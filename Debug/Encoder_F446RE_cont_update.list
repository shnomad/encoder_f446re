
Encoder_F446RE_cont_update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  0800436c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  0800436c  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de5b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002000  00000000  00000000  0002df36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  0002ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5c  00000000  00000000  00030c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000032c7  00000000  00000000  000316dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb3a  00000000  00000000  000349a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2a4b  00000000  00000000  000444dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f24  00000000  00000000  00116f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004108 	.word	0x08004108

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004108 	.word	0x08004108

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fcda 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f818 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f936 	bl	8000828 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005bc:	f000 f888 	bl	80006d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f8de 	bl	8000780 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f906 	bl	80007d4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  printf("Encoder Started!!\r\n");
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0x34>)
 80005ca:	f002 ff33 	bl	8003434 <puts>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005ce:	213c      	movs	r1, #60	; 0x3c
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <main+0x38>)
 80005d2:	f001 fef3 	bl	80023bc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <main+0x38>)
 80005d8:	f001 fdda 	bl	8002190 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x30>
 80005de:	bf00      	nop
 80005e0:	08004120 	.word	0x08004120
 80005e4:	20000084 	.word	0x20000084

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fffc 	bl	80035f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <SystemClock_Config+0xe0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <SystemClock_Config+0xe0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <SystemClock_Config+0xe0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <SystemClock_Config+0xe4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <SystemClock_Config+0xe4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xe4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800065c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4618      	mov	r0, r3
 8000674:	f001 faee 	bl	8001c54 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f000 fa37 	bl	8000af0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000682:	f000 ffd3 	bl	800162c <HAL_PWREx_EnableOverDrive>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800068c:	f000 fa30 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f80c 	bl	80016cc <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006ba:	f000 fa19 	bl	8000af0 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2224      	movs	r2, #36	; 0x24
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 ff88 	bl	80035f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <MX_TIM1_Init+0xa8>)
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_TIM1_Init+0xac>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_TIM1_Init+0xa8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_TIM1_Init+0xa8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_TIM1_Init+0xa8>)
 8000700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_TIM1_Init+0xa8>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_TIM1_Init+0xa8>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_TIM1_Init+0xa8>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000718:	2303      	movs	r3, #3
 800071a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000720:	2301      	movs	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000730:	2301      	movs	r3, #1
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_TIM1_Init+0xa8>)
 8000744:	f001 fd94 	bl	8002270 <HAL_TIM_Encoder_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800074e:	f000 f9cf 	bl	8000af0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]

  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_TIM1_Init+0xa8>)
 8000760:	f002 f8a4 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800076a:	f000 f9c1 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3730      	adds	r7, #48	; 0x30
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000084 	.word	0x20000084
 800077c:	40010000 	.word	0x40010000

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART1_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b8:	f002 f908 	bl	80029cc <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f995 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000cc 	.word	0x200000cc
 80007d0:	40011000 	.word	0x40011000

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f002 f8de 	bl	80029cc <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f96b 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000114 	.word	0x20000114
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b40      	ldr	r3, [pc, #256]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a3f      	ldr	r2, [pc, #252]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b39      	ldr	r3, [pc, #228]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a38      	ldr	r2, [pc, #224]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <MX_GPIO_Init+0x11c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b32      	ldr	r3, [pc, #200]	; (8000944 <MX_GPIO_Init+0x11c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a31      	ldr	r2, [pc, #196]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <MX_GPIO_Init+0x11c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRG_OUT_GPIO_Port, TRG_OUT_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2101      	movs	r1, #1
 8000896:	482c      	ldr	r0, [pc, #176]	; (8000948 <MX_GPIO_Init+0x120>)
 8000898:	f000 fe96 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC_MODE2_Pin ENC_MODE1_Pin */
  GPIO_InitStruct.Pin = ENC_MODE2_Pin|ENC_MODE1_Pin;
 800089c:	2303      	movs	r3, #3
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4827      	ldr	r0, [pc, #156]	; (800094c <MX_GPIO_Init+0x124>)
 80008b0:	f000 fcde 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_MODE_INT_Pin */
  GPIO_InitStruct.Pin = ENC_MODE_INT_Pin;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_MODE_INT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4821      	ldr	r0, [pc, #132]	; (8000950 <MX_GPIO_Init+0x128>)
 80008ca:	f000 fcd1 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_MODE0_Pin */
  GPIO_InitStruct.Pin = ENC_MODE0_Pin;
 80008ce:	2302      	movs	r3, #2
 80008d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_MODE0_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	481b      	ldr	r0, [pc, #108]	; (8000950 <MX_GPIO_Init+0x128>)
 80008e2:	f000 fcc5 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRG_OUT_Pin */
  GPIO_InitStruct.Pin = TRG_OUT_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ee:	2302      	movs	r3, #2
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRG_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4812      	ldr	r0, [pc, #72]	; (8000948 <MX_GPIO_Init+0x120>)
 80008fe:	f000 fcb7 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_INT_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_INT_Pin;
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_INDEX_INT_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_GPIO_Init+0x124>)
 8000918:	f000 fcaa 	bl	8001270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2006      	movs	r0, #6
 8000922:	f000 fc6e 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000926:	2006      	movs	r0, #6
 8000928:	f000 fc87 	bl	800123a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2017      	movs	r0, #23
 8000932:	f000 fc66 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000936:	2017      	movs	r0, #23
 8000938:	f000 fc7f 	bl	800123a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400
 800094c:	40020800 	.word	0x40020800
 8000950:	40020000 	.word	0x40020000

08000954 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENC_INDEX_INT_Pin)
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	2b80      	cmp	r3, #128	; 0x80
 8000962:	d105      	bne.n	8000970 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		printf("Encoder Z\r\n");
 8000964:	4838      	ldr	r0, [pc, #224]	; (8000a48 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000966:	f002 fd65 	bl	8003434 <puts>
		count_encoder_value();
 800096a:	f000 f8ab 	bl	8000ac4 <count_encoder_value>
			break;
		}

	}

}
 800096e:	e066      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
	else if(GPIO_Pin == ENC_MODE_INT_Pin)
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d163      	bne.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
		mode  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000976:	2102      	movs	r1, #2
 8000978:	4834      	ldr	r0, [pc, #208]	; (8000a4c <HAL_GPIO_EXTI_Callback+0xf8>)
 800097a:	f000 fe0d 	bl	8001598 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000984:	701a      	strb	r2, [r3, #0]
		mode |= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)<<1;
 8000986:	2102      	movs	r1, #2
 8000988:	4832      	ldr	r0, [pc, #200]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x100>)
 800098a:	f000 fe05 	bl	8001598 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	b25a      	sxtb	r2, r3
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b25b      	sxtb	r3, r3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009a2:	701a      	strb	r2, [r3, #0]
		mode |= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)<<2;
 80009a4:	2101      	movs	r1, #1
 80009a6:	482b      	ldr	r0, [pc, #172]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x100>)
 80009a8:	f000 fdf6 	bl	8001598 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	b25a      	sxtb	r2, r3
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009c0:	701a      	strb	r2, [r3, #0]
		printf("check Encoder working mode: %d\r\n", mode);
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4823      	ldr	r0, [pc, #140]	; (8000a58 <HAL_GPIO_EXTI_Callback+0x104>)
 80009ca:	f002 fccd 	bl	8003368 <iprintf>
		switch(mode)
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_GPIO_EXTI_Callback+0xfc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d82e      	bhi.n	8000a34 <HAL_GPIO_EXTI_Callback+0xe0>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <HAL_GPIO_EXTI_Callback+0x88>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009fd 	.word	0x080009fd
 80009e0:	08000a05 	.word	0x08000a05
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	08000a15 	.word	0x08000a15
 80009ec:	08000a1d 	.word	0x08000a1d
 80009f0:	08000a25 	.word	0x08000a25
 80009f4:	08000a3d 	.word	0x08000a3d
 80009f8:	08000a2d 	.word	0x08000a2d
				printf("dmi-mode : START_ENCODER_MEASURE_DISTANCE\r\n");
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x108>)
 80009fe:	f002 fd19 	bl	8003434 <puts>
			break;
 8000a02:	e01c      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : STOP_ENCODER_MEASURE_DISTANCE\r\n");
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000a06:	f002 fd15 	bl	8003434 <puts>
			break;
 8000a0a:	e018      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : START_ENCODER_CALIBRATION\r\n");
 8000a0c:	4815      	ldr	r0, [pc, #84]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x110>)
 8000a0e:	f002 fd11 	bl	8003434 <puts>
			break;
 8000a12:	e014      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : STOP_ENCODER_CALIBRATION\r\n");
 8000a14:	4814      	ldr	r0, [pc, #80]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x114>)
 8000a16:	f002 fd0d 	bl	8003434 <puts>
			break;
 8000a1a:	e010      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : START_DISTANCE_CALIBRATION\r\n");
 8000a1c:	4813      	ldr	r0, [pc, #76]	; (8000a6c <HAL_GPIO_EXTI_Callback+0x118>)
 8000a1e:	f002 fd09 	bl	8003434 <puts>
			break;
 8000a22:	e00c      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : STOP_DISTANCE_CALIBRATION\r\n");
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000a26:	f002 fd05 	bl	8003434 <puts>
			break;
 8000a2a:	e008      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : ENCODER_IDLE\r\n");
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x120>)
 8000a2e:	f002 fd01 	bl	8003434 <puts>
			break;
 8000a32:	e004      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : ENCODER_IDLE\r\n");
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x120>)
 8000a36:	f002 fcfd 	bl	8003434 <puts>
			break;
 8000a3a:	e000      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0xea>
			break;
 8000a3c:	bf00      	nop
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08004134 	.word	0x08004134
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	20000160 	.word	0x20000160
 8000a54:	40020800 	.word	0x40020800
 8000a58:	08004140 	.word	0x08004140
 8000a5c:	08004164 	.word	0x08004164
 8000a60:	08004190 	.word	0x08004190
 8000a64:	080041bc 	.word	0x080041bc
 8000a68:	080041e4 	.word	0x080041e4
 8000a6c:	0800420c 	.word	0x0800420c
 8000a70:	08004234 	.word	0x08004234
 8000a74:	0800425c 	.word	0x0800425c

08000a78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
   if(htim == &htim1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d102      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
   {
    /*Encoder Overflow Handler here*/
	  printf("TIM1 Counter update\r\n");
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a8a:	f002 fcd3 	bl	8003434 <puts>
   }
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000084 	.word	0x20000084
 8000a9c:	08004278 	.word	0x08004278

08000aa0 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <__io_putchar+0x20>)
 8000ab2:	f001 ffdb 	bl	8002a6c <HAL_UART_Transmit>

  return ch;
 8000ab6:	687b      	ldr	r3, [r7, #4]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000114 	.word	0x20000114

08000ac4 <count_encoder_value>:

void count_encoder_value(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	currentCount =  __HAL_TIM_GET_COUNTER(&htim1);
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <count_encoder_value+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <count_encoder_value+0x24>)
 8000ad2:	601a      	str	r2, [r3, #0]
	printf("currentCount : %ld\r\n", currentCount);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <count_encoder_value+0x24>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <count_encoder_value+0x28>)
 8000adc:	f002 fc44 	bl	8003368 <iprintf>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000084 	.word	0x20000084
 8000ae8:	2000015c 	.word	0x2000015c
 8000aec:	08004290 	.word	0x08004290

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_TIM_Encoder_MspInit+0x94>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d134      	bne.n	8000bd8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000bc4:	f000 fb54 	bl	8001270 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2019      	movs	r0, #25
 8000bce:	f000 fb18 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f000 fb31 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a41      	ldr	r2, [pc, #260]	; (8000d10 <HAL_UART_MspInit+0x124>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d14b      	bne.n	8000ca6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a38      	ldr	r2, [pc, #224]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c74:	2307      	movs	r3, #7
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4826      	ldr	r0, [pc, #152]	; (8000d18 <HAL_UART_MspInit+0x12c>)
 8000c80:	f000 faf6 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c94:	2307      	movs	r3, #7
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481f      	ldr	r0, [pc, #124]	; (8000d1c <HAL_UART_MspInit+0x130>)
 8000ca0:	f000 fae6 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca4:	e030      	b.n	8000d08 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <HAL_UART_MspInit+0x134>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d12b      	bne.n	8000d08 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_UART_MspInit+0x128>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_UART_MspInit+0x12c>)
 8000d04:	f000 fab4 	bl	8001270 <HAL_GPIO_Init>
}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	; 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40011000 	.word	0x40011000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40004400 	.word	0x40004400

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f94c 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_MODE_INT_Pin);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f000 fc3d 	bl	80015fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_INDEX_INT_Pin);
 8000d8a:	2080      	movs	r0, #128	; 0x80
 8000d8c:	f000 fc36 	bl	80015fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d9a:	f001 fb9d 	bl	80024d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000084 	.word	0x20000084

08000da8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00a      	b.n	8000dd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dba:	f3af 8000 	nop.w
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf0      	blt.n	8000dba <_read+0x12>
  }

  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e009      	b.n	8000e08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe4f 	bl	8000aa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf1      	blt.n	8000df4 <_write+0x12>
  }
  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_close>:

int _close(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e42:	605a      	str	r2, [r3, #4]
  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f002 fbec 	bl	8003690 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20020000 	.word	0x20020000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	20000164 	.word	0x20000164
 8000eec:	200002b8 	.word	0x200002b8

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	; (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f002 fbab 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb31 	bl	80005ac <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f58:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 8000f5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f60:	200002b8 	.word	0x200002b8

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f92b 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fdae 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f943 	bl	8001256 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f90b 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000008 	.word	0x20000008
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	20000168 	.word	0x20000168

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000168 	.word	0x20000168

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff29 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff3e 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff31 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa2 	bl	80011a8 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e165      	b.n	8001558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8154 	bne.w	8001552 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b03      	cmp	r3, #3
 800132e:	d017      	beq.n	8001360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80ae 	beq.w	8001552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <HAL_GPIO_Init+0x300>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a5c      	ldr	r2, [pc, #368]	; (8001570 <HAL_GPIO_Init+0x300>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <HAL_GPIO_Init+0x300>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a58      	ldr	r2, [pc, #352]	; (8001574 <HAL_GPIO_Init+0x304>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_GPIO_Init+0x308>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_GPIO_Init+0x30c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x310>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x314>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x318>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x20a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_GPIO_Init+0x31c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x206>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a49      	ldr	r2, [pc, #292]	; (8001590 <HAL_GPIO_Init+0x320>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x202>
 800146e:	2306      	movs	r3, #6
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001472:	2307      	movs	r3, #7
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4935      	ldr	r1, [pc, #212]	; (8001574 <HAL_GPIO_Init+0x304>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <HAL_GPIO_Init+0x324>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a31      	ldr	r2, [pc, #196]	; (8001594 <HAL_GPIO_Init+0x324>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <HAL_GPIO_Init+0x324>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <HAL_GPIO_Init+0x324>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_GPIO_Init+0x324>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <HAL_GPIO_Init+0x324>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_GPIO_Init+0x324>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_GPIO_Init+0x324>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f ae96 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40021400 	.word	0x40021400
 8001590:	40021800 	.word	0x40021800
 8001594:	40013c00 	.word	0x40013c00

08001598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e001      	b.n	80015ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041a      	lsls	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f99a 	bl	8000954 <HAL_GPIO_EXTI_Callback>
  }
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_PWREx_EnableOverDrive+0x90>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_PWREx_EnableOverDrive+0x90>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_PWREx_EnableOverDrive+0x90>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001658:	f7ff fcec 	bl	8001034 <HAL_GetTick>
 800165c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800165e:	e009      	b.n	8001674 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001660:	f7ff fce8 	bl	8001034 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800166e:	d901      	bls.n	8001674 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e01f      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d1ee      	bne.n	8001660 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001688:	f7ff fcd4 	bl	8001034 <HAL_GetTick>
 800168c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800168e:	e009      	b.n	80016a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001690:	f7ff fcd0 	bl	8001034 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169e:	d901      	bls.n	80016a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e007      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016b0:	d1ee      	bne.n	8001690 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	420e0040 	.word	0x420e0040
 80016c4:	40007000 	.word	0x40007000
 80016c8:	420e0044 	.word	0x420e0044

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cc      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d90c      	bls.n	8001708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d044      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d003      	beq.n	800178a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	2b03      	cmp	r3, #3
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e067      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4934      	ldr	r1, [pc, #208]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017bc:	f7ff fc3a 	bl	8001034 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff fc36 	bl	8001034 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d20c      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f855 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb9a 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	080042a8 	.word	0x080042a8
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_RCC_GetHCLKFreq+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000

080018b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018b4:	f7ff fff0 	bl	8001898 <HAL_RCC_GetHCLKFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	0a9b      	lsrs	r3, r3, #10
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	4903      	ldr	r1, [pc, #12]	; (80018d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	080042b8 	.word	0x080042b8

080018d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018dc:	f7ff ffdc 	bl	8001898 <HAL_RCC_GetHCLKFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0b5b      	lsrs	r3, r3, #13
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	4903      	ldr	r1, [pc, #12]	; (80018fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	080042b8 	.word	0x080042b8

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b0a6      	sub	sp, #152	; 0x98
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001926:	4bc8      	ldr	r3, [pc, #800]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b0c      	cmp	r3, #12
 8001930:	f200 817e 	bhi.w	8001c30 <HAL_RCC_GetSysClockFreq+0x330>
 8001934:	a201      	add	r2, pc, #4	; (adr r2, 800193c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	08001971 	.word	0x08001971
 8001940:	08001c31 	.word	0x08001c31
 8001944:	08001c31 	.word	0x08001c31
 8001948:	08001c31 	.word	0x08001c31
 800194c:	08001979 	.word	0x08001979
 8001950:	08001c31 	.word	0x08001c31
 8001954:	08001c31 	.word	0x08001c31
 8001958:	08001c31 	.word	0x08001c31
 800195c:	08001981 	.word	0x08001981
 8001960:	08001c31 	.word	0x08001c31
 8001964:	08001c31 	.word	0x08001c31
 8001968:	08001c31 	.word	0x08001c31
 800196c:	08001aeb 	.word	0x08001aeb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4bb6      	ldr	r3, [pc, #728]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001976:	e15f      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001978:	4bb5      	ldr	r3, [pc, #724]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x350>)
 800197a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800197e:	e15b      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4bb1      	ldr	r3, [pc, #708]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198c:	4bae      	ldr	r3, [pc, #696]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d031      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4bab      	ldr	r3, [pc, #684]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80019a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019aa:	663b      	str	r3, [r7, #96]	; 0x60
 80019ac:	2300      	movs	r3, #0
 80019ae:	667b      	str	r3, [r7, #100]	; 0x64
 80019b0:	4ba7      	ldr	r3, [pc, #668]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x350>)
 80019b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019b6:	462a      	mov	r2, r5
 80019b8:	fb03 f202 	mul.w	r2, r3, r2
 80019bc:	2300      	movs	r3, #0
 80019be:	4621      	mov	r1, r4
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	4aa2      	ldr	r2, [pc, #648]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x350>)
 80019c8:	4621      	mov	r1, r4
 80019ca:	fba1 1202 	umull	r1, r2, r1, r2
 80019ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80019d0:	460a      	mov	r2, r1
 80019d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80019d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80019d6:	4413      	add	r3, r2
 80019d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019de:	2200      	movs	r2, #0
 80019e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80019e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019ec:	f7fe fc60 	bl	80002b0 <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4613      	mov	r3, r2
 80019f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019fa:	e064      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fc:	4b92      	ldr	r3, [pc, #584]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	2200      	movs	r2, #0
 8001a04:	653b      	str	r3, [r7, #80]	; 0x50
 8001a06:	657a      	str	r2, [r7, #84]	; 0x54
 8001a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a10:	2300      	movs	r3, #0
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a14:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a18:	4622      	mov	r2, r4
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	0159      	lsls	r1, r3, #5
 8001a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2a:	0150      	lsls	r0, r2, #5
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4621      	mov	r1, r4
 8001a32:	1a51      	subs	r1, r2, r1
 8001a34:	6139      	str	r1, [r7, #16]
 8001a36:	4629      	mov	r1, r5
 8001a38:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a4a:	4659      	mov	r1, fp
 8001a4c:	018b      	lsls	r3, r1, #6
 8001a4e:	4651      	mov	r1, sl
 8001a50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a54:	4651      	mov	r1, sl
 8001a56:	018a      	lsls	r2, r1, #6
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ebb2 0801 	subs.w	r8, r2, r1
 8001a5e:	4659      	mov	r1, fp
 8001a60:	eb63 0901 	sbc.w	r9, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a78:	4690      	mov	r8, r2
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	eb18 0303 	adds.w	r3, r8, r3
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	462b      	mov	r3, r5
 8001a86:	eb49 0303 	adc.w	r3, r9, r3
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a98:	4629      	mov	r1, r5
 8001a9a:	028b      	lsls	r3, r1, #10
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	028a      	lsls	r2, r1, #10
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aae:	2200      	movs	r2, #0
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ab2:	647a      	str	r2, [r7, #68]	; 0x44
 8001ab4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ab8:	f7fe fbfa 	bl	80002b0 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac6:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001ad8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001ae8:	e0a6      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aea:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af6:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d02a      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b14:	2100      	movs	r1, #0
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b18:	fb03 f201 	mul.w	r2, r3, r1
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	fb00 f303 	mul.w	r3, r0, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b26:	fba0 1202 	umull	r1, r2, r0, r2
 8001b2a:	677a      	str	r2, [r7, #116]	; 0x74
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	673a      	str	r2, [r7, #112]	; 0x70
 8001b30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b32:	4413      	add	r3, r2
 8001b34:	677b      	str	r3, [r7, #116]	; 0x74
 8001b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3e:	637a      	str	r2, [r7, #52]	; 0x34
 8001b40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b48:	f7fe fbb2 	bl	80002b0 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b56:	e05b      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b58:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b74:	4642      	mov	r2, r8
 8001b76:	464b      	mov	r3, r9
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0159      	lsls	r1, r3, #5
 8001b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b86:	0150      	lsls	r0, r2, #5
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b92:	4649      	mov	r1, r9
 8001b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bac:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	00eb      	lsls	r3, r5, #3
 8001bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc2:	00e2      	lsls	r2, r4, #3
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	4643      	mov	r3, r8
 8001bca:	18e3      	adds	r3, r4, r3
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	464b      	mov	r3, r9
 8001bd0:	eb45 0303 	adc.w	r3, r5, r3
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be2:	4629      	mov	r1, r5
 8001be4:	028b      	lsls	r3, r1, #10
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bec:	4621      	mov	r1, r4
 8001bee:	028a      	lsls	r2, r1, #10
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	61fa      	str	r2, [r7, #28]
 8001bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c02:	f7fe fb55 	bl	80002b0 <__aeabi_uldivmod>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0f1b      	lsrs	r3, r3, #28
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c2e:	e003      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3798      	adds	r7, #152	; 0x98
 8001c40:	46bd      	mov	sp, r7
 8001c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	017d7840 	.word	0x017d7840

08001c54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e28d      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8083 	beq.w	8001d7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c74:	4b94      	ldr	r3, [pc, #592]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d019      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c80:	4b91      	ldr	r3, [pc, #580]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c8c:	4b8e      	ldr	r3, [pc, #568]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c98:	d00c      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9a:	4b8b      	ldr	r3, [pc, #556]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d112      	bne.n	8001ccc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca6:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cb2:	d10b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4b84      	ldr	r3, [pc, #528]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d05b      	beq.n	8001d78 <HAL_RCC_OscConfig+0x124>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d157      	bne.n	8001d78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e25a      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x90>
 8001cd6:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7b      	ldr	r2, [pc, #492]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xcc>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0xb4>
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a72      	ldr	r2, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xcc>
 8001d08:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6e      	ldr	r2, [pc, #440]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6b      	ldr	r2, [pc, #428]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f984 	bl	8001034 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f980 	bl	8001034 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e21f      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xdc>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f970 	bl	8001034 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f96c 	bl	8001034 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e20b      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x104>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d06f      	beq.n	8001e66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d86:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d017      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d92:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d11c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x186>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e1d3      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4937      	ldr	r1, [pc, #220]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	e03a      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df8:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_RCC_OscConfig+0x278>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f919 	bl	8001034 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff f915 	bl	8001034 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1b4      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4925      	ldr	r1, [pc, #148]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	e015      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_OscConfig+0x278>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff f8f8 	bl	8001034 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff f8f4 	bl	8001034 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e193      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d036      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d016      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff f8d8 	bl	8001034 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff f8d4 	bl	8001034 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e173      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x234>
 8001ea6:	e01b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7ff f8c1 	bl	8001034 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	e00e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f8bd 	bl	8001034 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d907      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e15c      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	42470000 	.word	0x42470000
 8001ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ea      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8097 	beq.w	800201c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a7e      	ldr	r2, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b79      	ldr	r3, [pc, #484]	; (8002104 <HAL_RCC_OscConfig+0x4b0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2a:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x4b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a75      	ldr	r2, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x4b0>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f36:	f7ff f87d 	bl	8001034 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff f879 	bl	8001034 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e118      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <HAL_RCC_OscConfig+0x4b0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x31e>
 8001f64:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f70:	e01c      	b.n	8001fac <HAL_RCC_OscConfig+0x358>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x340>
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a60      	ldr	r2, [pc, #384]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	4a5d      	ldr	r2, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6713      	str	r3, [r2, #112]	; 0x70
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0x358>
 8001f94:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a59      	ldr	r2, [pc, #356]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	4b57      	ldr	r3, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a56      	ldr	r2, [pc, #344]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f83e 	bl	8001034 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f83a 	bl	8001034 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0d7      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ee      	beq.n	8001fbc <HAL_RCC_OscConfig+0x368>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f828 	bl	8001034 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f824 	bl	8001034 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0c1      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ee      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d105      	bne.n	800201c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	4a3a      	ldr	r2, [pc, #232]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8002016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80ad 	beq.w	8002180 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d060      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d145      	bne.n	80020c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4b4>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe fff8 	bl	8001034 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fff4 	bl	8001034 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e093      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	071b      	lsls	r3, r3, #28
 8002092:	491b      	ldr	r1, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x4b4>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7fe ffc9 	bl	8001034 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe ffc5 	bl	8001034 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e064      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x452>
 80020c4:	e05c      	b.n	8002180 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x4b4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffb2 	bl	8001034 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe ffae 	bl	8001034 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e04d      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x480>
 80020f2:	e045      	b.n	8002180 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e040      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
 8002100:	40023800 	.word	0x40023800
 8002104:	40007000 	.word	0x40007000
 8002108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_RCC_OscConfig+0x538>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d030      	beq.n	800217c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d129      	bne.n	800217c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d122      	bne.n	800217c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002144:	4293      	cmp	r3, r2
 8002146:	d119      	bne.n	800217c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	3b01      	subs	r3, #1
 8002156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d10f      	bne.n	800217c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d001      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e04e      	b.n	8002246 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_TIM_Base_Start_IT+0xc4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d022      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x80>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d01d      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x80>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_TIM_Base_Start_IT+0xc8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d018      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x80>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_TIM_Base_Start_IT+0xcc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x80>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_TIM_Base_Start_IT+0xd0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00e      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x80>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_TIM_Base_Start_IT+0xd4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x80>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_TIM_Base_Start_IT+0xd8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d004      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x80>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_TIM_Base_Start_IT+0xdc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b06      	cmp	r3, #6
 8002220:	d010      	beq.n	8002244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002232:	e007      	b.n	8002244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40010000 	.word	0x40010000
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40010400 	.word	0x40010400
 8002268:	40014000 	.word	0x40014000
 800226c:	40001800 	.word	0x40001800

08002270 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e097      	b.n	80023b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d106      	bne.n	800229e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7fe fc57 	bl	8000b4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b4:	f023 0307 	bic.w	r3, r3, #7
 80022b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f000 fa1f 	bl	8002708 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	f023 0303 	bic.w	r3, r3, #3
 80022f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	4313      	orrs	r3, r2
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002310:	f023 030c 	bic.w	r3, r3, #12
 8002314:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800231c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	4313      	orrs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	011a      	lsls	r2, r3, #4
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	031b      	lsls	r3, r3, #12
 8002340:	4313      	orrs	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800234e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4313      	orrs	r3, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d110      	bne.n	800240e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80023f2:	7b7b      	ldrb	r3, [r7, #13]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d001      	beq.n	80023fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e069      	b.n	80024d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800240c:	e031      	b.n	8002472 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d110      	bne.n	8002436 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d102      	bne.n	8002420 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800241a:	7b3b      	ldrb	r3, [r7, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e055      	b.n	80024d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002434:	e01d      	b.n	8002472 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d108      	bne.n	800244e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800243c:	7bbb      	ldrb	r3, [r7, #14]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d105      	bne.n	800244e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002442:	7b7b      	ldrb	r3, [r7, #13]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d102      	bne.n	800244e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002448:	7b3b      	ldrb	r3, [r7, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e03e      	b.n	80024d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_TIM_Encoder_Start+0xc4>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d008      	beq.n	8002490 <HAL_TIM_Encoder_Start+0xd4>
 800247e:	e00f      	b.n	80024a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f9e9 	bl	8002860 <TIM_CCxChannelCmd>
      break;
 800248e:	e016      	b.n	80024be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	2104      	movs	r1, #4
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f9e1 	bl	8002860 <TIM_CCxChannelCmd>
      break;
 800249e:	e00e      	b.n	80024be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f9d9 	bl	8002860 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2201      	movs	r2, #1
 80024b4:	2104      	movs	r1, #4
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f9d2 	bl	8002860 <TIM_CCxChannelCmd>
      break;
 80024bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d020      	beq.n	800253c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0202 	mvn.w	r2, #2
 800250c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8d2 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8c4 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8d5 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d020      	beq.n	8002588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0204 	mvn.w	r2, #4
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8ac 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f89e 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8af 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d020      	beq.n	80025d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01b      	beq.n	80025d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0208 	mvn.w	r2, #8
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f886 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f878 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f889 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d020      	beq.n	8002620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0210 	mvn.w	r2, #16
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2208      	movs	r2, #8
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f860 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f852 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f863 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0201 	mvn.w	r2, #1
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fa1a 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f9a8 	bl	80029b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f834 	bl	80026f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00c      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0220 	mvn.w	r2, #32
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f97a 	bl	80029a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a46      	ldr	r2, [pc, #280]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002726:	d00f      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a43      	ldr	r2, [pc, #268]	; (8002838 <TIM_Base_SetConfig+0x130>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00b      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a42      	ldr	r2, [pc, #264]	; (800283c <TIM_Base_SetConfig+0x134>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d007      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a41      	ldr	r2, [pc, #260]	; (8002840 <TIM_Base_SetConfig+0x138>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a35      	ldr	r2, [pc, #212]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02b      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d027      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a32      	ldr	r2, [pc, #200]	; (8002838 <TIM_Base_SetConfig+0x130>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d023      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <TIM_Base_SetConfig+0x134>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a30      	ldr	r2, [pc, #192]	; (8002840 <TIM_Base_SetConfig+0x138>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01b      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2f      	ldr	r2, [pc, #188]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d017      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2e      	ldr	r2, [pc, #184]	; (8002848 <TIM_Base_SetConfig+0x140>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a2d      	ldr	r2, [pc, #180]	; (800284c <TIM_Base_SetConfig+0x144>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00f      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <TIM_Base_SetConfig+0x148>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00b      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a2b      	ldr	r2, [pc, #172]	; (8002854 <TIM_Base_SetConfig+0x14c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a2a      	ldr	r2, [pc, #168]	; (8002858 <TIM_Base_SetConfig+0x150>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d003      	beq.n	80027ba <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <TIM_Base_SetConfig+0x154>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d108      	bne.n	80027cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <TIM_Base_SetConfig+0xf8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d103      	bne.n	8002808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
  }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40010400 	.word	0x40010400
 8002848:	40014000 	.word	0x40014000
 800284c:	40014400 	.word	0x40014400
 8002850:	40014800 	.word	0x40014800
 8002854:	40001800 	.word	0x40001800
 8002858:	40001c00 	.word	0x40001c00
 800285c:	40002000 	.word	0x40002000

08002860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2201      	movs	r2, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a1a      	ldr	r2, [r3, #32]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	431a      	orrs	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e05a      	b.n	800297a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d01d      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10c      	bne.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4313      	orrs	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00
 8002998:	40010400 	.word	0x40010400
 800299c:	40014000 	.word	0x40014000
 80029a0:	40001800 	.word	0x40001800

080029a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e042      	b.n	8002a64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe f8fa 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f973 	bl	8002cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d175      	bne.n	8002b78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_UART_Transmit+0x2c>
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e06e      	b.n	8002b7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2221      	movs	r2, #33	; 0x21
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aaa:	f7fe fac3 	bl	8001034 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac4:	d108      	bne.n	8002ad8 <HAL_UART_Transmit+0x6c>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e003      	b.n	8002ae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ae0:	e02e      	b.n	8002b40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f848 	bl	8002b82 <UART_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e03a      	b.n	8002b7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e007      	b.n	8002b32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1cb      	bne.n	8002ae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2140      	movs	r1, #64	; 0x40
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f814 	bl	8002b82 <UART_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e006      	b.n	8002b7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b92:	e03b      	b.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d037      	beq.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9c:	f7fe fa4a 	bl	8001034 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	6a3a      	ldr	r2, [r7, #32]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e03a      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d023      	beq.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d020      	beq.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d01d      	beq.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d116      	bne.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f81d 	bl	8002c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e00f      	b.n	8002c2c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d0b4      	beq.n	8002b94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b095      	sub	sp, #84	; 0x54
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	e853 3f00 	ldrex	r3, [r3]
 8002c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c98:	e841 2300 	strex	r3, r2, [r1]
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e5      	bne.n	8002c70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d119      	bne.n	8002ce0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ccc:	61ba      	str	r2, [r7, #24]
 8002cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6979      	ldr	r1, [r7, #20]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	e841 2300 	strex	r3, r2, [r1]
 8002cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e5      	bne.n	8002cac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cee:	bf00      	nop
 8002cf0:	3754      	adds	r7, #84	; 0x54
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d00:	b0c0      	sub	sp, #256	; 0x100
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	ea40 0301 	orr.w	r3, r0, r1
 8002d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d54:	f021 010c 	bic.w	r1, r1, #12
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d62:	430b      	orrs	r3, r1
 8002d64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	6999      	ldr	r1, [r3, #24]
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	ea40 0301 	orr.w	r3, r0, r1
 8002d82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <UART_SetConfig+0x2cc>)
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d005      	beq.n	8002d9c <UART_SetConfig+0xa0>
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <UART_SetConfig+0x2d0>)
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d104      	bne.n	8002da6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d9c:	f7fe fd9c 	bl	80018d8 <HAL_RCC_GetPCLK2Freq>
 8002da0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002da4:	e003      	b.n	8002dae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002da6:	f7fe fd83 	bl	80018b0 <HAL_RCC_GetPCLK1Freq>
 8002daa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db8:	f040 810c 	bne.w	8002fd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dce:	4622      	mov	r2, r4
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	1891      	adds	r1, r2, r2
 8002dd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dd6:	415b      	adcs	r3, r3
 8002dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dde:	4621      	mov	r1, r4
 8002de0:	eb12 0801 	adds.w	r8, r2, r1
 8002de4:	4629      	mov	r1, r5
 8002de6:	eb43 0901 	adc.w	r9, r3, r1
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dfe:	4690      	mov	r8, r2
 8002e00:	4699      	mov	r9, r3
 8002e02:	4623      	mov	r3, r4
 8002e04:	eb18 0303 	adds.w	r3, r8, r3
 8002e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	eb49 0303 	adc.w	r3, r9, r3
 8002e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	18db      	adds	r3, r3, r3
 8002e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e30:	4613      	mov	r3, r2
 8002e32:	eb42 0303 	adc.w	r3, r2, r3
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
 8002e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e40:	f7fd fa36 	bl	80002b0 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	011c      	lsls	r4, r3, #4
 8002e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e64:	4642      	mov	r2, r8
 8002e66:	464b      	mov	r3, r9
 8002e68:	1891      	adds	r1, r2, r2
 8002e6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e6c:	415b      	adcs	r3, r3
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e74:	4641      	mov	r1, r8
 8002e76:	eb12 0a01 	adds.w	sl, r2, r1
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e94:	4692      	mov	sl, r2
 8002e96:	469b      	mov	fp, r3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	18db      	adds	r3, r3, r3
 8002ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	eb42 0303 	adc.w	r3, r2, r3
 8002ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ed6:	f7fd f9eb 	bl	80002b0 <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2264      	movs	r2, #100	; 0x64
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	1acb      	subs	r3, r1, r3
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f04:	441c      	add	r4, r3
 8002f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f18:	4642      	mov	r2, r8
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	1891      	adds	r1, r2, r2
 8002f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f20:	415b      	adcs	r3, r3
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f28:	4641      	mov	r1, r8
 8002f2a:	1851      	adds	r1, r2, r1
 8002f2c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f2e:	4649      	mov	r1, r9
 8002f30:	414b      	adcs	r3, r1
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f40:	4659      	mov	r1, fp
 8002f42:	00cb      	lsls	r3, r1, #3
 8002f44:	4651      	mov	r1, sl
 8002f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	00ca      	lsls	r2, r1, #3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	4642      	mov	r2, r8
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	460a      	mov	r2, r1
 8002f60:	eb42 0303 	adc.w	r3, r2, r3
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	18db      	adds	r3, r3, r3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f82:	4613      	mov	r3, r2
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f92:	f7fd f98d 	bl	80002b0 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	2164      	movs	r1, #100	; 0x64
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	3332      	adds	r3, #50	; 0x32
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <UART_SetConfig+0x2d4>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	f003 0207 	and.w	r2, r3, #7
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4422      	add	r2, r4
 8002fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fc4:	e106      	b.n	80031d4 <UART_SetConfig+0x4d8>
 8002fc6:	bf00      	nop
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	464b      	mov	r3, r9
 8002fea:	1891      	adds	r1, r2, r2
 8002fec:	6239      	str	r1, [r7, #32]
 8002fee:	415b      	adcs	r3, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	1854      	adds	r4, r2, r1
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	eb43 0501 	adc.w	r5, r3, r1
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	00eb      	lsls	r3, r5, #3
 800300a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300e:	00e2      	lsls	r2, r4, #3
 8003010:	4614      	mov	r4, r2
 8003012:	461d      	mov	r5, r3
 8003014:	4643      	mov	r3, r8
 8003016:	18e3      	adds	r3, r4, r3
 8003018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800301c:	464b      	mov	r3, r9
 800301e:	eb45 0303 	adc.w	r3, r5, r3
 8003022:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003042:	4629      	mov	r1, r5
 8003044:	008b      	lsls	r3, r1, #2
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304c:	4621      	mov	r1, r4
 800304e:	008a      	lsls	r2, r1, #2
 8003050:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003054:	f7fd f92c 	bl	80002b0 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <UART_SetConfig+0x4e4>)
 800305e:	fba3 2302 	umull	r2, r3, r3, r2
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	011c      	lsls	r4, r3, #4
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003074:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	61b9      	str	r1, [r7, #24]
 8003080:	415b      	adcs	r3, r3
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	4641      	mov	r1, r8
 800308a:	1851      	adds	r1, r2, r1
 800308c:	6139      	str	r1, [r7, #16]
 800308e:	4649      	mov	r1, r9
 8003090:	414b      	adcs	r3, r1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030a0:	4659      	mov	r1, fp
 80030a2:	00cb      	lsls	r3, r1, #3
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030aa:	4651      	mov	r1, sl
 80030ac:	00ca      	lsls	r2, r1, #3
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	4642      	mov	r2, r8
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030bc:	464b      	mov	r3, r9
 80030be:	460a      	mov	r2, r1
 80030c0:	eb42 0303 	adc.w	r3, r2, r3
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030e0:	4649      	mov	r1, r9
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	4641      	mov	r1, r8
 80030e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ea:	4641      	mov	r1, r8
 80030ec:	008a      	lsls	r2, r1, #2
 80030ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030f2:	f7fd f8dd 	bl	80002b0 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <UART_SetConfig+0x4e4>)
 80030fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2264      	movs	r2, #100	; 0x64
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	1acb      	subs	r3, r1, r3
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	3332      	adds	r3, #50	; 0x32
 8003110:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <UART_SetConfig+0x4e4>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311c:	441c      	add	r4, r3
 800311e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003122:	2200      	movs	r2, #0
 8003124:	673b      	str	r3, [r7, #112]	; 0x70
 8003126:	677a      	str	r2, [r7, #116]	; 0x74
 8003128:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	1891      	adds	r1, r2, r2
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	415b      	adcs	r3, r3
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800313c:	4641      	mov	r1, r8
 800313e:	1851      	adds	r1, r2, r1
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	4649      	mov	r1, r9
 8003144:	414b      	adcs	r3, r1
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003154:	4659      	mov	r1, fp
 8003156:	00cb      	lsls	r3, r1, #3
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315e:	4651      	mov	r1, sl
 8003160:	00ca      	lsls	r2, r1, #3
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	4603      	mov	r3, r0
 8003168:	4642      	mov	r2, r8
 800316a:	189b      	adds	r3, r3, r2
 800316c:	66bb      	str	r3, [r7, #104]	; 0x68
 800316e:	464b      	mov	r3, r9
 8003170:	460a      	mov	r2, r1
 8003172:	eb42 0303 	adc.w	r3, r2, r3
 8003176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	663b      	str	r3, [r7, #96]	; 0x60
 8003182:	667a      	str	r2, [r7, #100]	; 0x64
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003190:	4649      	mov	r1, r9
 8003192:	008b      	lsls	r3, r1, #2
 8003194:	4641      	mov	r1, r8
 8003196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319a:	4641      	mov	r1, r8
 800319c:	008a      	lsls	r2, r1, #2
 800319e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031a2:	f7fd f885 	bl	80002b0 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <UART_SetConfig+0x4e4>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <UART_SetConfig+0x4e4>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4422      	add	r2, r4
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	bf00      	nop
 80031d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031da:	46bd      	mov	sp, r7
 80031dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031e0:	51eb851f 	.word	0x51eb851f

080031e4 <std>:
 80031e4:	2300      	movs	r3, #0
 80031e6:	b510      	push	{r4, lr}
 80031e8:	4604      	mov	r4, r0
 80031ea:	e9c0 3300 	strd	r3, r3, [r0]
 80031ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031f2:	6083      	str	r3, [r0, #8]
 80031f4:	8181      	strh	r1, [r0, #12]
 80031f6:	6643      	str	r3, [r0, #100]	; 0x64
 80031f8:	81c2      	strh	r2, [r0, #14]
 80031fa:	6183      	str	r3, [r0, #24]
 80031fc:	4619      	mov	r1, r3
 80031fe:	2208      	movs	r2, #8
 8003200:	305c      	adds	r0, #92	; 0x5c
 8003202:	f000 f9f7 	bl	80035f4 <memset>
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <std+0x58>)
 8003208:	6263      	str	r3, [r4, #36]	; 0x24
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <std+0x5c>)
 800320c:	62a3      	str	r3, [r4, #40]	; 0x28
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <std+0x60>)
 8003210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <std+0x64>)
 8003214:	6323      	str	r3, [r4, #48]	; 0x30
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <std+0x68>)
 8003218:	6224      	str	r4, [r4, #32]
 800321a:	429c      	cmp	r4, r3
 800321c:	d006      	beq.n	800322c <std+0x48>
 800321e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003222:	4294      	cmp	r4, r2
 8003224:	d002      	beq.n	800322c <std+0x48>
 8003226:	33d0      	adds	r3, #208	; 0xd0
 8003228:	429c      	cmp	r4, r3
 800322a:	d105      	bne.n	8003238 <std+0x54>
 800322c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003234:	f000 ba56 	b.w	80036e4 <__retarget_lock_init_recursive>
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	08003445 	.word	0x08003445
 8003240:	08003467 	.word	0x08003467
 8003244:	0800349f 	.word	0x0800349f
 8003248:	080034c3 	.word	0x080034c3
 800324c:	2000016c 	.word	0x2000016c

08003250 <stdio_exit_handler>:
 8003250:	4a02      	ldr	r2, [pc, #8]	; (800325c <stdio_exit_handler+0xc>)
 8003252:	4903      	ldr	r1, [pc, #12]	; (8003260 <stdio_exit_handler+0x10>)
 8003254:	4803      	ldr	r0, [pc, #12]	; (8003264 <stdio_exit_handler+0x14>)
 8003256:	f000 b869 	b.w	800332c <_fwalk_sglue>
 800325a:	bf00      	nop
 800325c:	2000000c 	.word	0x2000000c
 8003260:	08003f91 	.word	0x08003f91
 8003264:	20000018 	.word	0x20000018

08003268 <cleanup_stdio>:
 8003268:	6841      	ldr	r1, [r0, #4]
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <cleanup_stdio+0x34>)
 800326c:	4299      	cmp	r1, r3
 800326e:	b510      	push	{r4, lr}
 8003270:	4604      	mov	r4, r0
 8003272:	d001      	beq.n	8003278 <cleanup_stdio+0x10>
 8003274:	f000 fe8c 	bl	8003f90 <_fflush_r>
 8003278:	68a1      	ldr	r1, [r4, #8]
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <cleanup_stdio+0x38>)
 800327c:	4299      	cmp	r1, r3
 800327e:	d002      	beq.n	8003286 <cleanup_stdio+0x1e>
 8003280:	4620      	mov	r0, r4
 8003282:	f000 fe85 	bl	8003f90 <_fflush_r>
 8003286:	68e1      	ldr	r1, [r4, #12]
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <cleanup_stdio+0x3c>)
 800328a:	4299      	cmp	r1, r3
 800328c:	d004      	beq.n	8003298 <cleanup_stdio+0x30>
 800328e:	4620      	mov	r0, r4
 8003290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003294:	f000 be7c 	b.w	8003f90 <_fflush_r>
 8003298:	bd10      	pop	{r4, pc}
 800329a:	bf00      	nop
 800329c:	2000016c 	.word	0x2000016c
 80032a0:	200001d4 	.word	0x200001d4
 80032a4:	2000023c 	.word	0x2000023c

080032a8 <global_stdio_init.part.0>:
 80032a8:	b510      	push	{r4, lr}
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <global_stdio_init.part.0+0x30>)
 80032ac:	4c0b      	ldr	r4, [pc, #44]	; (80032dc <global_stdio_init.part.0+0x34>)
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <global_stdio_init.part.0+0x38>)
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	4620      	mov	r0, r4
 80032b4:	2200      	movs	r2, #0
 80032b6:	2104      	movs	r1, #4
 80032b8:	f7ff ff94 	bl	80031e4 <std>
 80032bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80032c0:	2201      	movs	r2, #1
 80032c2:	2109      	movs	r1, #9
 80032c4:	f7ff ff8e 	bl	80031e4 <std>
 80032c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80032cc:	2202      	movs	r2, #2
 80032ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d2:	2112      	movs	r1, #18
 80032d4:	f7ff bf86 	b.w	80031e4 <std>
 80032d8:	200002a4 	.word	0x200002a4
 80032dc:	2000016c 	.word	0x2000016c
 80032e0:	08003251 	.word	0x08003251

080032e4 <__sfp_lock_acquire>:
 80032e4:	4801      	ldr	r0, [pc, #4]	; (80032ec <__sfp_lock_acquire+0x8>)
 80032e6:	f000 b9fe 	b.w	80036e6 <__retarget_lock_acquire_recursive>
 80032ea:	bf00      	nop
 80032ec:	200002ad 	.word	0x200002ad

080032f0 <__sfp_lock_release>:
 80032f0:	4801      	ldr	r0, [pc, #4]	; (80032f8 <__sfp_lock_release+0x8>)
 80032f2:	f000 b9f9 	b.w	80036e8 <__retarget_lock_release_recursive>
 80032f6:	bf00      	nop
 80032f8:	200002ad 	.word	0x200002ad

080032fc <__sinit>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4604      	mov	r4, r0
 8003300:	f7ff fff0 	bl	80032e4 <__sfp_lock_acquire>
 8003304:	6a23      	ldr	r3, [r4, #32]
 8003306:	b11b      	cbz	r3, 8003310 <__sinit+0x14>
 8003308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800330c:	f7ff bff0 	b.w	80032f0 <__sfp_lock_release>
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__sinit+0x28>)
 8003312:	6223      	str	r3, [r4, #32]
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__sinit+0x2c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f5      	bne.n	8003308 <__sinit+0xc>
 800331c:	f7ff ffc4 	bl	80032a8 <global_stdio_init.part.0>
 8003320:	e7f2      	b.n	8003308 <__sinit+0xc>
 8003322:	bf00      	nop
 8003324:	08003269 	.word	0x08003269
 8003328:	200002a4 	.word	0x200002a4

0800332c <_fwalk_sglue>:
 800332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003330:	4607      	mov	r7, r0
 8003332:	4688      	mov	r8, r1
 8003334:	4614      	mov	r4, r2
 8003336:	2600      	movs	r6, #0
 8003338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800333c:	f1b9 0901 	subs.w	r9, r9, #1
 8003340:	d505      	bpl.n	800334e <_fwalk_sglue+0x22>
 8003342:	6824      	ldr	r4, [r4, #0]
 8003344:	2c00      	cmp	r4, #0
 8003346:	d1f7      	bne.n	8003338 <_fwalk_sglue+0xc>
 8003348:	4630      	mov	r0, r6
 800334a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800334e:	89ab      	ldrh	r3, [r5, #12]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d907      	bls.n	8003364 <_fwalk_sglue+0x38>
 8003354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003358:	3301      	adds	r3, #1
 800335a:	d003      	beq.n	8003364 <_fwalk_sglue+0x38>
 800335c:	4629      	mov	r1, r5
 800335e:	4638      	mov	r0, r7
 8003360:	47c0      	blx	r8
 8003362:	4306      	orrs	r6, r0
 8003364:	3568      	adds	r5, #104	; 0x68
 8003366:	e7e9      	b.n	800333c <_fwalk_sglue+0x10>

08003368 <iprintf>:
 8003368:	b40f      	push	{r0, r1, r2, r3}
 800336a:	b507      	push	{r0, r1, r2, lr}
 800336c:	4906      	ldr	r1, [pc, #24]	; (8003388 <iprintf+0x20>)
 800336e:	ab04      	add	r3, sp, #16
 8003370:	6808      	ldr	r0, [r1, #0]
 8003372:	f853 2b04 	ldr.w	r2, [r3], #4
 8003376:	6881      	ldr	r1, [r0, #8]
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	f000 fad9 	bl	8003930 <_vfiprintf_r>
 800337e:	b003      	add	sp, #12
 8003380:	f85d eb04 	ldr.w	lr, [sp], #4
 8003384:	b004      	add	sp, #16
 8003386:	4770      	bx	lr
 8003388:	20000064 	.word	0x20000064

0800338c <_puts_r>:
 800338c:	6a03      	ldr	r3, [r0, #32]
 800338e:	b570      	push	{r4, r5, r6, lr}
 8003390:	6884      	ldr	r4, [r0, #8]
 8003392:	4605      	mov	r5, r0
 8003394:	460e      	mov	r6, r1
 8003396:	b90b      	cbnz	r3, 800339c <_puts_r+0x10>
 8003398:	f7ff ffb0 	bl	80032fc <__sinit>
 800339c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800339e:	07db      	lsls	r3, r3, #31
 80033a0:	d405      	bmi.n	80033ae <_puts_r+0x22>
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	0598      	lsls	r0, r3, #22
 80033a6:	d402      	bmi.n	80033ae <_puts_r+0x22>
 80033a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033aa:	f000 f99c 	bl	80036e6 <__retarget_lock_acquire_recursive>
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	0719      	lsls	r1, r3, #28
 80033b2:	d513      	bpl.n	80033dc <_puts_r+0x50>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	b18b      	cbz	r3, 80033dc <_puts_r+0x50>
 80033b8:	3e01      	subs	r6, #1
 80033ba:	68a3      	ldr	r3, [r4, #8]
 80033bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033c0:	3b01      	subs	r3, #1
 80033c2:	60a3      	str	r3, [r4, #8]
 80033c4:	b9e9      	cbnz	r1, 8003402 <_puts_r+0x76>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da2e      	bge.n	8003428 <_puts_r+0x9c>
 80033ca:	4622      	mov	r2, r4
 80033cc:	210a      	movs	r1, #10
 80033ce:	4628      	mov	r0, r5
 80033d0:	f000 f87b 	bl	80034ca <__swbuf_r>
 80033d4:	3001      	adds	r0, #1
 80033d6:	d007      	beq.n	80033e8 <_puts_r+0x5c>
 80033d8:	250a      	movs	r5, #10
 80033da:	e007      	b.n	80033ec <_puts_r+0x60>
 80033dc:	4621      	mov	r1, r4
 80033de:	4628      	mov	r0, r5
 80033e0:	f000 f8b0 	bl	8003544 <__swsetup_r>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d0e7      	beq.n	80033b8 <_puts_r+0x2c>
 80033e8:	f04f 35ff 	mov.w	r5, #4294967295
 80033ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033ee:	07da      	lsls	r2, r3, #31
 80033f0:	d405      	bmi.n	80033fe <_puts_r+0x72>
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	059b      	lsls	r3, r3, #22
 80033f6:	d402      	bmi.n	80033fe <_puts_r+0x72>
 80033f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033fa:	f000 f975 	bl	80036e8 <__retarget_lock_release_recursive>
 80033fe:	4628      	mov	r0, r5
 8003400:	bd70      	pop	{r4, r5, r6, pc}
 8003402:	2b00      	cmp	r3, #0
 8003404:	da04      	bge.n	8003410 <_puts_r+0x84>
 8003406:	69a2      	ldr	r2, [r4, #24]
 8003408:	429a      	cmp	r2, r3
 800340a:	dc06      	bgt.n	800341a <_puts_r+0x8e>
 800340c:	290a      	cmp	r1, #10
 800340e:	d004      	beq.n	800341a <_puts_r+0x8e>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	6022      	str	r2, [r4, #0]
 8003416:	7019      	strb	r1, [r3, #0]
 8003418:	e7cf      	b.n	80033ba <_puts_r+0x2e>
 800341a:	4622      	mov	r2, r4
 800341c:	4628      	mov	r0, r5
 800341e:	f000 f854 	bl	80034ca <__swbuf_r>
 8003422:	3001      	adds	r0, #1
 8003424:	d1c9      	bne.n	80033ba <_puts_r+0x2e>
 8003426:	e7df      	b.n	80033e8 <_puts_r+0x5c>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	250a      	movs	r5, #10
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	6022      	str	r2, [r4, #0]
 8003430:	701d      	strb	r5, [r3, #0]
 8003432:	e7db      	b.n	80033ec <_puts_r+0x60>

08003434 <puts>:
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <puts+0xc>)
 8003436:	4601      	mov	r1, r0
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	f7ff bfa7 	b.w	800338c <_puts_r>
 800343e:	bf00      	nop
 8003440:	20000064 	.word	0x20000064

08003444 <__sread>:
 8003444:	b510      	push	{r4, lr}
 8003446:	460c      	mov	r4, r1
 8003448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344c:	f000 f8fc 	bl	8003648 <_read_r>
 8003450:	2800      	cmp	r0, #0
 8003452:	bfab      	itete	ge
 8003454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003456:	89a3      	ldrhlt	r3, [r4, #12]
 8003458:	181b      	addge	r3, r3, r0
 800345a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800345e:	bfac      	ite	ge
 8003460:	6563      	strge	r3, [r4, #84]	; 0x54
 8003462:	81a3      	strhlt	r3, [r4, #12]
 8003464:	bd10      	pop	{r4, pc}

08003466 <__swrite>:
 8003466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800346a:	461f      	mov	r7, r3
 800346c:	898b      	ldrh	r3, [r1, #12]
 800346e:	05db      	lsls	r3, r3, #23
 8003470:	4605      	mov	r5, r0
 8003472:	460c      	mov	r4, r1
 8003474:	4616      	mov	r6, r2
 8003476:	d505      	bpl.n	8003484 <__swrite+0x1e>
 8003478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800347c:	2302      	movs	r3, #2
 800347e:	2200      	movs	r2, #0
 8003480:	f000 f8d0 	bl	8003624 <_lseek_r>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800348a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800348e:	81a3      	strh	r3, [r4, #12]
 8003490:	4632      	mov	r2, r6
 8003492:	463b      	mov	r3, r7
 8003494:	4628      	mov	r0, r5
 8003496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800349a:	f000 b8e7 	b.w	800366c <_write_r>

0800349e <__sseek>:
 800349e:	b510      	push	{r4, lr}
 80034a0:	460c      	mov	r4, r1
 80034a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a6:	f000 f8bd 	bl	8003624 <_lseek_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	bf15      	itete	ne
 80034b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80034b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034ba:	81a3      	strheq	r3, [r4, #12]
 80034bc:	bf18      	it	ne
 80034be:	81a3      	strhne	r3, [r4, #12]
 80034c0:	bd10      	pop	{r4, pc}

080034c2 <__sclose>:
 80034c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c6:	f000 b89d 	b.w	8003604 <_close_r>

080034ca <__swbuf_r>:
 80034ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034cc:	460e      	mov	r6, r1
 80034ce:	4614      	mov	r4, r2
 80034d0:	4605      	mov	r5, r0
 80034d2:	b118      	cbz	r0, 80034dc <__swbuf_r+0x12>
 80034d4:	6a03      	ldr	r3, [r0, #32]
 80034d6:	b90b      	cbnz	r3, 80034dc <__swbuf_r+0x12>
 80034d8:	f7ff ff10 	bl	80032fc <__sinit>
 80034dc:	69a3      	ldr	r3, [r4, #24]
 80034de:	60a3      	str	r3, [r4, #8]
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	071a      	lsls	r2, r3, #28
 80034e4:	d525      	bpl.n	8003532 <__swbuf_r+0x68>
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	b31b      	cbz	r3, 8003532 <__swbuf_r+0x68>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	6922      	ldr	r2, [r4, #16]
 80034ee:	1a98      	subs	r0, r3, r2
 80034f0:	6963      	ldr	r3, [r4, #20]
 80034f2:	b2f6      	uxtb	r6, r6
 80034f4:	4283      	cmp	r3, r0
 80034f6:	4637      	mov	r7, r6
 80034f8:	dc04      	bgt.n	8003504 <__swbuf_r+0x3a>
 80034fa:	4621      	mov	r1, r4
 80034fc:	4628      	mov	r0, r5
 80034fe:	f000 fd47 	bl	8003f90 <_fflush_r>
 8003502:	b9e0      	cbnz	r0, 800353e <__swbuf_r+0x74>
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	3b01      	subs	r3, #1
 8003508:	60a3      	str	r3, [r4, #8]
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	6022      	str	r2, [r4, #0]
 8003510:	701e      	strb	r6, [r3, #0]
 8003512:	6962      	ldr	r2, [r4, #20]
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	429a      	cmp	r2, r3
 8003518:	d004      	beq.n	8003524 <__swbuf_r+0x5a>
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	07db      	lsls	r3, r3, #31
 800351e:	d506      	bpl.n	800352e <__swbuf_r+0x64>
 8003520:	2e0a      	cmp	r6, #10
 8003522:	d104      	bne.n	800352e <__swbuf_r+0x64>
 8003524:	4621      	mov	r1, r4
 8003526:	4628      	mov	r0, r5
 8003528:	f000 fd32 	bl	8003f90 <_fflush_r>
 800352c:	b938      	cbnz	r0, 800353e <__swbuf_r+0x74>
 800352e:	4638      	mov	r0, r7
 8003530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003532:	4621      	mov	r1, r4
 8003534:	4628      	mov	r0, r5
 8003536:	f000 f805 	bl	8003544 <__swsetup_r>
 800353a:	2800      	cmp	r0, #0
 800353c:	d0d5      	beq.n	80034ea <__swbuf_r+0x20>
 800353e:	f04f 37ff 	mov.w	r7, #4294967295
 8003542:	e7f4      	b.n	800352e <__swbuf_r+0x64>

08003544 <__swsetup_r>:
 8003544:	b538      	push	{r3, r4, r5, lr}
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <__swsetup_r+0xac>)
 8003548:	4605      	mov	r5, r0
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	460c      	mov	r4, r1
 800354e:	b118      	cbz	r0, 8003558 <__swsetup_r+0x14>
 8003550:	6a03      	ldr	r3, [r0, #32]
 8003552:	b90b      	cbnz	r3, 8003558 <__swsetup_r+0x14>
 8003554:	f7ff fed2 	bl	80032fc <__sinit>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800355e:	0718      	lsls	r0, r3, #28
 8003560:	d422      	bmi.n	80035a8 <__swsetup_r+0x64>
 8003562:	06d9      	lsls	r1, r3, #27
 8003564:	d407      	bmi.n	8003576 <__swsetup_r+0x32>
 8003566:	2309      	movs	r3, #9
 8003568:	602b      	str	r3, [r5, #0]
 800356a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800356e:	81a3      	strh	r3, [r4, #12]
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	e034      	b.n	80035e0 <__swsetup_r+0x9c>
 8003576:	0758      	lsls	r0, r3, #29
 8003578:	d512      	bpl.n	80035a0 <__swsetup_r+0x5c>
 800357a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800357c:	b141      	cbz	r1, 8003590 <__swsetup_r+0x4c>
 800357e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003582:	4299      	cmp	r1, r3
 8003584:	d002      	beq.n	800358c <__swsetup_r+0x48>
 8003586:	4628      	mov	r0, r5
 8003588:	f000 f8b0 	bl	80036ec <_free_r>
 800358c:	2300      	movs	r3, #0
 800358e:	6363      	str	r3, [r4, #52]	; 0x34
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	2300      	movs	r3, #0
 800359a:	6063      	str	r3, [r4, #4]
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	6023      	str	r3, [r4, #0]
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	f043 0308 	orr.w	r3, r3, #8
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	6923      	ldr	r3, [r4, #16]
 80035aa:	b94b      	cbnz	r3, 80035c0 <__swsetup_r+0x7c>
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d003      	beq.n	80035c0 <__swsetup_r+0x7c>
 80035b8:	4621      	mov	r1, r4
 80035ba:	4628      	mov	r0, r5
 80035bc:	f000 fd36 	bl	800402c <__smakebuf_r>
 80035c0:	89a0      	ldrh	r0, [r4, #12]
 80035c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035c6:	f010 0301 	ands.w	r3, r0, #1
 80035ca:	d00a      	beq.n	80035e2 <__swsetup_r+0x9e>
 80035cc:	2300      	movs	r3, #0
 80035ce:	60a3      	str	r3, [r4, #8]
 80035d0:	6963      	ldr	r3, [r4, #20]
 80035d2:	425b      	negs	r3, r3
 80035d4:	61a3      	str	r3, [r4, #24]
 80035d6:	6923      	ldr	r3, [r4, #16]
 80035d8:	b943      	cbnz	r3, 80035ec <__swsetup_r+0xa8>
 80035da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035de:	d1c4      	bne.n	800356a <__swsetup_r+0x26>
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
 80035e2:	0781      	lsls	r1, r0, #30
 80035e4:	bf58      	it	pl
 80035e6:	6963      	ldrpl	r3, [r4, #20]
 80035e8:	60a3      	str	r3, [r4, #8]
 80035ea:	e7f4      	b.n	80035d6 <__swsetup_r+0x92>
 80035ec:	2000      	movs	r0, #0
 80035ee:	e7f7      	b.n	80035e0 <__swsetup_r+0x9c>
 80035f0:	20000064 	.word	0x20000064

080035f4 <memset>:
 80035f4:	4402      	add	r2, r0
 80035f6:	4603      	mov	r3, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <_close_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4d06      	ldr	r5, [pc, #24]	; (8003620 <_close_r+0x1c>)
 8003608:	2300      	movs	r3, #0
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fd fc03 	bl	8000e1a <_close>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_close_r+0x1a>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_close_r+0x1a>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	200002a8 	.word	0x200002a8

08003624 <_lseek_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4d07      	ldr	r5, [pc, #28]	; (8003644 <_lseek_r+0x20>)
 8003628:	4604      	mov	r4, r0
 800362a:	4608      	mov	r0, r1
 800362c:	4611      	mov	r1, r2
 800362e:	2200      	movs	r2, #0
 8003630:	602a      	str	r2, [r5, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f7fd fc18 	bl	8000e68 <_lseek>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_lseek_r+0x1e>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b103      	cbz	r3, 8003642 <_lseek_r+0x1e>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	200002a8 	.word	0x200002a8

08003648 <_read_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4d07      	ldr	r5, [pc, #28]	; (8003668 <_read_r+0x20>)
 800364c:	4604      	mov	r4, r0
 800364e:	4608      	mov	r0, r1
 8003650:	4611      	mov	r1, r2
 8003652:	2200      	movs	r2, #0
 8003654:	602a      	str	r2, [r5, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	f7fd fba6 	bl	8000da8 <_read>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_read_r+0x1e>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_read_r+0x1e>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	200002a8 	.word	0x200002a8

0800366c <_write_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	4d07      	ldr	r5, [pc, #28]	; (800368c <_write_r+0x20>)
 8003670:	4604      	mov	r4, r0
 8003672:	4608      	mov	r0, r1
 8003674:	4611      	mov	r1, r2
 8003676:	2200      	movs	r2, #0
 8003678:	602a      	str	r2, [r5, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	f7fd fbb1 	bl	8000de2 <_write>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d102      	bne.n	800368a <_write_r+0x1e>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	b103      	cbz	r3, 800368a <_write_r+0x1e>
 8003688:	6023      	str	r3, [r4, #0]
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	200002a8 	.word	0x200002a8

08003690 <__errno>:
 8003690:	4b01      	ldr	r3, [pc, #4]	; (8003698 <__errno+0x8>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000064 	.word	0x20000064

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4d0d      	ldr	r5, [pc, #52]	; (80036d4 <__libc_init_array+0x38>)
 80036a0:	4c0d      	ldr	r4, [pc, #52]	; (80036d8 <__libc_init_array+0x3c>)
 80036a2:	1b64      	subs	r4, r4, r5
 80036a4:	10a4      	asrs	r4, r4, #2
 80036a6:	2600      	movs	r6, #0
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	4d0b      	ldr	r5, [pc, #44]	; (80036dc <__libc_init_array+0x40>)
 80036ae:	4c0c      	ldr	r4, [pc, #48]	; (80036e0 <__libc_init_array+0x44>)
 80036b0:	f000 fd2a 	bl	8004108 <_init>
 80036b4:	1b64      	subs	r4, r4, r5
 80036b6:	10a4      	asrs	r4, r4, #2
 80036b8:	2600      	movs	r6, #0
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c4:	4798      	blx	r3
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ce:	4798      	blx	r3
 80036d0:	3601      	adds	r6, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	080042fc 	.word	0x080042fc
 80036d8:	080042fc 	.word	0x080042fc
 80036dc:	080042fc 	.word	0x080042fc
 80036e0:	08004300 	.word	0x08004300

080036e4 <__retarget_lock_init_recursive>:
 80036e4:	4770      	bx	lr

080036e6 <__retarget_lock_acquire_recursive>:
 80036e6:	4770      	bx	lr

080036e8 <__retarget_lock_release_recursive>:
 80036e8:	4770      	bx	lr
	...

080036ec <_free_r>:
 80036ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ee:	2900      	cmp	r1, #0
 80036f0:	d044      	beq.n	800377c <_free_r+0x90>
 80036f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f6:	9001      	str	r0, [sp, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f1a1 0404 	sub.w	r4, r1, #4
 80036fe:	bfb8      	it	lt
 8003700:	18e4      	addlt	r4, r4, r3
 8003702:	f000 f8df 	bl	80038c4 <__malloc_lock>
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <_free_r+0x94>)
 8003708:	9801      	ldr	r0, [sp, #4]
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	b933      	cbnz	r3, 800371c <_free_r+0x30>
 800370e:	6063      	str	r3, [r4, #4]
 8003710:	6014      	str	r4, [r2, #0]
 8003712:	b003      	add	sp, #12
 8003714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003718:	f000 b8da 	b.w	80038d0 <__malloc_unlock>
 800371c:	42a3      	cmp	r3, r4
 800371e:	d908      	bls.n	8003732 <_free_r+0x46>
 8003720:	6825      	ldr	r5, [r4, #0]
 8003722:	1961      	adds	r1, r4, r5
 8003724:	428b      	cmp	r3, r1
 8003726:	bf01      	itttt	eq
 8003728:	6819      	ldreq	r1, [r3, #0]
 800372a:	685b      	ldreq	r3, [r3, #4]
 800372c:	1949      	addeq	r1, r1, r5
 800372e:	6021      	streq	r1, [r4, #0]
 8003730:	e7ed      	b.n	800370e <_free_r+0x22>
 8003732:	461a      	mov	r2, r3
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b10b      	cbz	r3, 800373c <_free_r+0x50>
 8003738:	42a3      	cmp	r3, r4
 800373a:	d9fa      	bls.n	8003732 <_free_r+0x46>
 800373c:	6811      	ldr	r1, [r2, #0]
 800373e:	1855      	adds	r5, r2, r1
 8003740:	42a5      	cmp	r5, r4
 8003742:	d10b      	bne.n	800375c <_free_r+0x70>
 8003744:	6824      	ldr	r4, [r4, #0]
 8003746:	4421      	add	r1, r4
 8003748:	1854      	adds	r4, r2, r1
 800374a:	42a3      	cmp	r3, r4
 800374c:	6011      	str	r1, [r2, #0]
 800374e:	d1e0      	bne.n	8003712 <_free_r+0x26>
 8003750:	681c      	ldr	r4, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	6053      	str	r3, [r2, #4]
 8003756:	440c      	add	r4, r1
 8003758:	6014      	str	r4, [r2, #0]
 800375a:	e7da      	b.n	8003712 <_free_r+0x26>
 800375c:	d902      	bls.n	8003764 <_free_r+0x78>
 800375e:	230c      	movs	r3, #12
 8003760:	6003      	str	r3, [r0, #0]
 8003762:	e7d6      	b.n	8003712 <_free_r+0x26>
 8003764:	6825      	ldr	r5, [r4, #0]
 8003766:	1961      	adds	r1, r4, r5
 8003768:	428b      	cmp	r3, r1
 800376a:	bf04      	itt	eq
 800376c:	6819      	ldreq	r1, [r3, #0]
 800376e:	685b      	ldreq	r3, [r3, #4]
 8003770:	6063      	str	r3, [r4, #4]
 8003772:	bf04      	itt	eq
 8003774:	1949      	addeq	r1, r1, r5
 8003776:	6021      	streq	r1, [r4, #0]
 8003778:	6054      	str	r4, [r2, #4]
 800377a:	e7ca      	b.n	8003712 <_free_r+0x26>
 800377c:	b003      	add	sp, #12
 800377e:	bd30      	pop	{r4, r5, pc}
 8003780:	200002b0 	.word	0x200002b0

08003784 <sbrk_aligned>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	4e0e      	ldr	r6, [pc, #56]	; (80037c0 <sbrk_aligned+0x3c>)
 8003788:	460c      	mov	r4, r1
 800378a:	6831      	ldr	r1, [r6, #0]
 800378c:	4605      	mov	r5, r0
 800378e:	b911      	cbnz	r1, 8003796 <sbrk_aligned+0x12>
 8003790:	f000 fcaa 	bl	80040e8 <_sbrk_r>
 8003794:	6030      	str	r0, [r6, #0]
 8003796:	4621      	mov	r1, r4
 8003798:	4628      	mov	r0, r5
 800379a:	f000 fca5 	bl	80040e8 <_sbrk_r>
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	d00a      	beq.n	80037b8 <sbrk_aligned+0x34>
 80037a2:	1cc4      	adds	r4, r0, #3
 80037a4:	f024 0403 	bic.w	r4, r4, #3
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d007      	beq.n	80037bc <sbrk_aligned+0x38>
 80037ac:	1a21      	subs	r1, r4, r0
 80037ae:	4628      	mov	r0, r5
 80037b0:	f000 fc9a 	bl	80040e8 <_sbrk_r>
 80037b4:	3001      	adds	r0, #1
 80037b6:	d101      	bne.n	80037bc <sbrk_aligned+0x38>
 80037b8:	f04f 34ff 	mov.w	r4, #4294967295
 80037bc:	4620      	mov	r0, r4
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	200002b4 	.word	0x200002b4

080037c4 <_malloc_r>:
 80037c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c8:	1ccd      	adds	r5, r1, #3
 80037ca:	f025 0503 	bic.w	r5, r5, #3
 80037ce:	3508      	adds	r5, #8
 80037d0:	2d0c      	cmp	r5, #12
 80037d2:	bf38      	it	cc
 80037d4:	250c      	movcc	r5, #12
 80037d6:	2d00      	cmp	r5, #0
 80037d8:	4607      	mov	r7, r0
 80037da:	db01      	blt.n	80037e0 <_malloc_r+0x1c>
 80037dc:	42a9      	cmp	r1, r5
 80037de:	d905      	bls.n	80037ec <_malloc_r+0x28>
 80037e0:	230c      	movs	r3, #12
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	2600      	movs	r6, #0
 80037e6:	4630      	mov	r0, r6
 80037e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038c0 <_malloc_r+0xfc>
 80037f0:	f000 f868 	bl	80038c4 <__malloc_lock>
 80037f4:	f8d8 3000 	ldr.w	r3, [r8]
 80037f8:	461c      	mov	r4, r3
 80037fa:	bb5c      	cbnz	r4, 8003854 <_malloc_r+0x90>
 80037fc:	4629      	mov	r1, r5
 80037fe:	4638      	mov	r0, r7
 8003800:	f7ff ffc0 	bl	8003784 <sbrk_aligned>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	4604      	mov	r4, r0
 8003808:	d155      	bne.n	80038b6 <_malloc_r+0xf2>
 800380a:	f8d8 4000 	ldr.w	r4, [r8]
 800380e:	4626      	mov	r6, r4
 8003810:	2e00      	cmp	r6, #0
 8003812:	d145      	bne.n	80038a0 <_malloc_r+0xdc>
 8003814:	2c00      	cmp	r4, #0
 8003816:	d048      	beq.n	80038aa <_malloc_r+0xe6>
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	4631      	mov	r1, r6
 800381c:	4638      	mov	r0, r7
 800381e:	eb04 0903 	add.w	r9, r4, r3
 8003822:	f000 fc61 	bl	80040e8 <_sbrk_r>
 8003826:	4581      	cmp	r9, r0
 8003828:	d13f      	bne.n	80038aa <_malloc_r+0xe6>
 800382a:	6821      	ldr	r1, [r4, #0]
 800382c:	1a6d      	subs	r5, r5, r1
 800382e:	4629      	mov	r1, r5
 8003830:	4638      	mov	r0, r7
 8003832:	f7ff ffa7 	bl	8003784 <sbrk_aligned>
 8003836:	3001      	adds	r0, #1
 8003838:	d037      	beq.n	80038aa <_malloc_r+0xe6>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	442b      	add	r3, r5
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	f8d8 3000 	ldr.w	r3, [r8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d038      	beq.n	80038ba <_malloc_r+0xf6>
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	42a2      	cmp	r2, r4
 800384c:	d12b      	bne.n	80038a6 <_malloc_r+0xe2>
 800384e:	2200      	movs	r2, #0
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	e00f      	b.n	8003874 <_malloc_r+0xb0>
 8003854:	6822      	ldr	r2, [r4, #0]
 8003856:	1b52      	subs	r2, r2, r5
 8003858:	d41f      	bmi.n	800389a <_malloc_r+0xd6>
 800385a:	2a0b      	cmp	r2, #11
 800385c:	d917      	bls.n	800388e <_malloc_r+0xca>
 800385e:	1961      	adds	r1, r4, r5
 8003860:	42a3      	cmp	r3, r4
 8003862:	6025      	str	r5, [r4, #0]
 8003864:	bf18      	it	ne
 8003866:	6059      	strne	r1, [r3, #4]
 8003868:	6863      	ldr	r3, [r4, #4]
 800386a:	bf08      	it	eq
 800386c:	f8c8 1000 	streq.w	r1, [r8]
 8003870:	5162      	str	r2, [r4, r5]
 8003872:	604b      	str	r3, [r1, #4]
 8003874:	4638      	mov	r0, r7
 8003876:	f104 060b 	add.w	r6, r4, #11
 800387a:	f000 f829 	bl	80038d0 <__malloc_unlock>
 800387e:	f026 0607 	bic.w	r6, r6, #7
 8003882:	1d23      	adds	r3, r4, #4
 8003884:	1af2      	subs	r2, r6, r3
 8003886:	d0ae      	beq.n	80037e6 <_malloc_r+0x22>
 8003888:	1b9b      	subs	r3, r3, r6
 800388a:	50a3      	str	r3, [r4, r2]
 800388c:	e7ab      	b.n	80037e6 <_malloc_r+0x22>
 800388e:	42a3      	cmp	r3, r4
 8003890:	6862      	ldr	r2, [r4, #4]
 8003892:	d1dd      	bne.n	8003850 <_malloc_r+0x8c>
 8003894:	f8c8 2000 	str.w	r2, [r8]
 8003898:	e7ec      	b.n	8003874 <_malloc_r+0xb0>
 800389a:	4623      	mov	r3, r4
 800389c:	6864      	ldr	r4, [r4, #4]
 800389e:	e7ac      	b.n	80037fa <_malloc_r+0x36>
 80038a0:	4634      	mov	r4, r6
 80038a2:	6876      	ldr	r6, [r6, #4]
 80038a4:	e7b4      	b.n	8003810 <_malloc_r+0x4c>
 80038a6:	4613      	mov	r3, r2
 80038a8:	e7cc      	b.n	8003844 <_malloc_r+0x80>
 80038aa:	230c      	movs	r3, #12
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4638      	mov	r0, r7
 80038b0:	f000 f80e 	bl	80038d0 <__malloc_unlock>
 80038b4:	e797      	b.n	80037e6 <_malloc_r+0x22>
 80038b6:	6025      	str	r5, [r4, #0]
 80038b8:	e7dc      	b.n	8003874 <_malloc_r+0xb0>
 80038ba:	605b      	str	r3, [r3, #4]
 80038bc:	deff      	udf	#255	; 0xff
 80038be:	bf00      	nop
 80038c0:	200002b0 	.word	0x200002b0

080038c4 <__malloc_lock>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__malloc_lock+0x8>)
 80038c6:	f7ff bf0e 	b.w	80036e6 <__retarget_lock_acquire_recursive>
 80038ca:	bf00      	nop
 80038cc:	200002ac 	.word	0x200002ac

080038d0 <__malloc_unlock>:
 80038d0:	4801      	ldr	r0, [pc, #4]	; (80038d8 <__malloc_unlock+0x8>)
 80038d2:	f7ff bf09 	b.w	80036e8 <__retarget_lock_release_recursive>
 80038d6:	bf00      	nop
 80038d8:	200002ac 	.word	0x200002ac

080038dc <__sfputc_r>:
 80038dc:	6893      	ldr	r3, [r2, #8]
 80038de:	3b01      	subs	r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	b410      	push	{r4}
 80038e4:	6093      	str	r3, [r2, #8]
 80038e6:	da08      	bge.n	80038fa <__sfputc_r+0x1e>
 80038e8:	6994      	ldr	r4, [r2, #24]
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	db01      	blt.n	80038f2 <__sfputc_r+0x16>
 80038ee:	290a      	cmp	r1, #10
 80038f0:	d103      	bne.n	80038fa <__sfputc_r+0x1e>
 80038f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038f6:	f7ff bde8 	b.w	80034ca <__swbuf_r>
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	1c58      	adds	r0, r3, #1
 80038fe:	6010      	str	r0, [r2, #0]
 8003900:	7019      	strb	r1, [r3, #0]
 8003902:	4608      	mov	r0, r1
 8003904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003908:	4770      	bx	lr

0800390a <__sfputs_r>:
 800390a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390c:	4606      	mov	r6, r0
 800390e:	460f      	mov	r7, r1
 8003910:	4614      	mov	r4, r2
 8003912:	18d5      	adds	r5, r2, r3
 8003914:	42ac      	cmp	r4, r5
 8003916:	d101      	bne.n	800391c <__sfputs_r+0x12>
 8003918:	2000      	movs	r0, #0
 800391a:	e007      	b.n	800392c <__sfputs_r+0x22>
 800391c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003920:	463a      	mov	r2, r7
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff ffda 	bl	80038dc <__sfputc_r>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d1f3      	bne.n	8003914 <__sfputs_r+0xa>
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003930 <_vfiprintf_r>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	460d      	mov	r5, r1
 8003936:	b09d      	sub	sp, #116	; 0x74
 8003938:	4614      	mov	r4, r2
 800393a:	4698      	mov	r8, r3
 800393c:	4606      	mov	r6, r0
 800393e:	b118      	cbz	r0, 8003948 <_vfiprintf_r+0x18>
 8003940:	6a03      	ldr	r3, [r0, #32]
 8003942:	b90b      	cbnz	r3, 8003948 <_vfiprintf_r+0x18>
 8003944:	f7ff fcda 	bl	80032fc <__sinit>
 8003948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800394a:	07d9      	lsls	r1, r3, #31
 800394c:	d405      	bmi.n	800395a <_vfiprintf_r+0x2a>
 800394e:	89ab      	ldrh	r3, [r5, #12]
 8003950:	059a      	lsls	r2, r3, #22
 8003952:	d402      	bmi.n	800395a <_vfiprintf_r+0x2a>
 8003954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003956:	f7ff fec6 	bl	80036e6 <__retarget_lock_acquire_recursive>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	d501      	bpl.n	8003964 <_vfiprintf_r+0x34>
 8003960:	692b      	ldr	r3, [r5, #16]
 8003962:	b99b      	cbnz	r3, 800398c <_vfiprintf_r+0x5c>
 8003964:	4629      	mov	r1, r5
 8003966:	4630      	mov	r0, r6
 8003968:	f7ff fdec 	bl	8003544 <__swsetup_r>
 800396c:	b170      	cbz	r0, 800398c <_vfiprintf_r+0x5c>
 800396e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003970:	07dc      	lsls	r4, r3, #31
 8003972:	d504      	bpl.n	800397e <_vfiprintf_r+0x4e>
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	b01d      	add	sp, #116	; 0x74
 800397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	0598      	lsls	r0, r3, #22
 8003982:	d4f7      	bmi.n	8003974 <_vfiprintf_r+0x44>
 8003984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003986:	f7ff feaf 	bl	80036e8 <__retarget_lock_release_recursive>
 800398a:	e7f3      	b.n	8003974 <_vfiprintf_r+0x44>
 800398c:	2300      	movs	r3, #0
 800398e:	9309      	str	r3, [sp, #36]	; 0x24
 8003990:	2320      	movs	r3, #32
 8003992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003996:	f8cd 800c 	str.w	r8, [sp, #12]
 800399a:	2330      	movs	r3, #48	; 0x30
 800399c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003b50 <_vfiprintf_r+0x220>
 80039a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039a4:	f04f 0901 	mov.w	r9, #1
 80039a8:	4623      	mov	r3, r4
 80039aa:	469a      	mov	sl, r3
 80039ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039b0:	b10a      	cbz	r2, 80039b6 <_vfiprintf_r+0x86>
 80039b2:	2a25      	cmp	r2, #37	; 0x25
 80039b4:	d1f9      	bne.n	80039aa <_vfiprintf_r+0x7a>
 80039b6:	ebba 0b04 	subs.w	fp, sl, r4
 80039ba:	d00b      	beq.n	80039d4 <_vfiprintf_r+0xa4>
 80039bc:	465b      	mov	r3, fp
 80039be:	4622      	mov	r2, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7ff ffa1 	bl	800390a <__sfputs_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	f000 80a9 	beq.w	8003b20 <_vfiprintf_r+0x1f0>
 80039ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039d0:	445a      	add	r2, fp
 80039d2:	9209      	str	r2, [sp, #36]	; 0x24
 80039d4:	f89a 3000 	ldrb.w	r3, [sl]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a1 	beq.w	8003b20 <_vfiprintf_r+0x1f0>
 80039de:	2300      	movs	r3, #0
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039e8:	f10a 0a01 	add.w	sl, sl, #1
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	9307      	str	r3, [sp, #28]
 80039f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039f4:	931a      	str	r3, [sp, #104]	; 0x68
 80039f6:	4654      	mov	r4, sl
 80039f8:	2205      	movs	r2, #5
 80039fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039fe:	4854      	ldr	r0, [pc, #336]	; (8003b50 <_vfiprintf_r+0x220>)
 8003a00:	f7fc fc06 	bl	8000210 <memchr>
 8003a04:	9a04      	ldr	r2, [sp, #16]
 8003a06:	b9d8      	cbnz	r0, 8003a40 <_vfiprintf_r+0x110>
 8003a08:	06d1      	lsls	r1, r2, #27
 8003a0a:	bf44      	itt	mi
 8003a0c:	2320      	movmi	r3, #32
 8003a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a12:	0713      	lsls	r3, r2, #28
 8003a14:	bf44      	itt	mi
 8003a16:	232b      	movmi	r3, #43	; 0x2b
 8003a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a20:	2b2a      	cmp	r3, #42	; 0x2a
 8003a22:	d015      	beq.n	8003a50 <_vfiprintf_r+0x120>
 8003a24:	9a07      	ldr	r2, [sp, #28]
 8003a26:	4654      	mov	r4, sl
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f04f 0c0a 	mov.w	ip, #10
 8003a2e:	4621      	mov	r1, r4
 8003a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a34:	3b30      	subs	r3, #48	; 0x30
 8003a36:	2b09      	cmp	r3, #9
 8003a38:	d94d      	bls.n	8003ad6 <_vfiprintf_r+0x1a6>
 8003a3a:	b1b0      	cbz	r0, 8003a6a <_vfiprintf_r+0x13a>
 8003a3c:	9207      	str	r2, [sp, #28]
 8003a3e:	e014      	b.n	8003a6a <_vfiprintf_r+0x13a>
 8003a40:	eba0 0308 	sub.w	r3, r0, r8
 8003a44:	fa09 f303 	lsl.w	r3, r9, r3
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	9304      	str	r3, [sp, #16]
 8003a4c:	46a2      	mov	sl, r4
 8003a4e:	e7d2      	b.n	80039f6 <_vfiprintf_r+0xc6>
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	1d19      	adds	r1, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	9103      	str	r1, [sp, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bfbb      	ittet	lt
 8003a5c:	425b      	neglt	r3, r3
 8003a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a62:	9307      	strge	r3, [sp, #28]
 8003a64:	9307      	strlt	r3, [sp, #28]
 8003a66:	bfb8      	it	lt
 8003a68:	9204      	strlt	r2, [sp, #16]
 8003a6a:	7823      	ldrb	r3, [r4, #0]
 8003a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a6e:	d10c      	bne.n	8003a8a <_vfiprintf_r+0x15a>
 8003a70:	7863      	ldrb	r3, [r4, #1]
 8003a72:	2b2a      	cmp	r3, #42	; 0x2a
 8003a74:	d134      	bne.n	8003ae0 <_vfiprintf_r+0x1b0>
 8003a76:	9b03      	ldr	r3, [sp, #12]
 8003a78:	1d1a      	adds	r2, r3, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	9203      	str	r2, [sp, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bfb8      	it	lt
 8003a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a86:	3402      	adds	r4, #2
 8003a88:	9305      	str	r3, [sp, #20]
 8003a8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003b60 <_vfiprintf_r+0x230>
 8003a8e:	7821      	ldrb	r1, [r4, #0]
 8003a90:	2203      	movs	r2, #3
 8003a92:	4650      	mov	r0, sl
 8003a94:	f7fc fbbc 	bl	8000210 <memchr>
 8003a98:	b138      	cbz	r0, 8003aaa <_vfiprintf_r+0x17a>
 8003a9a:	9b04      	ldr	r3, [sp, #16]
 8003a9c:	eba0 000a 	sub.w	r0, r0, sl
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	4082      	lsls	r2, r0
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	3401      	adds	r4, #1
 8003aa8:	9304      	str	r3, [sp, #16]
 8003aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aae:	4829      	ldr	r0, [pc, #164]	; (8003b54 <_vfiprintf_r+0x224>)
 8003ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ab4:	2206      	movs	r2, #6
 8003ab6:	f7fc fbab 	bl	8000210 <memchr>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d03f      	beq.n	8003b3e <_vfiprintf_r+0x20e>
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <_vfiprintf_r+0x228>)
 8003ac0:	bb1b      	cbnz	r3, 8003b0a <_vfiprintf_r+0x1da>
 8003ac2:	9b03      	ldr	r3, [sp, #12]
 8003ac4:	3307      	adds	r3, #7
 8003ac6:	f023 0307 	bic.w	r3, r3, #7
 8003aca:	3308      	adds	r3, #8
 8003acc:	9303      	str	r3, [sp, #12]
 8003ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad0:	443b      	add	r3, r7
 8003ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad4:	e768      	b.n	80039a8 <_vfiprintf_r+0x78>
 8003ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ada:	460c      	mov	r4, r1
 8003adc:	2001      	movs	r0, #1
 8003ade:	e7a6      	b.n	8003a2e <_vfiprintf_r+0xfe>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	3401      	adds	r4, #1
 8003ae4:	9305      	str	r3, [sp, #20]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f04f 0c0a 	mov.w	ip, #10
 8003aec:	4620      	mov	r0, r4
 8003aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003af2:	3a30      	subs	r2, #48	; 0x30
 8003af4:	2a09      	cmp	r2, #9
 8003af6:	d903      	bls.n	8003b00 <_vfiprintf_r+0x1d0>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0c6      	beq.n	8003a8a <_vfiprintf_r+0x15a>
 8003afc:	9105      	str	r1, [sp, #20]
 8003afe:	e7c4      	b.n	8003a8a <_vfiprintf_r+0x15a>
 8003b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b04:	4604      	mov	r4, r0
 8003b06:	2301      	movs	r3, #1
 8003b08:	e7f0      	b.n	8003aec <_vfiprintf_r+0x1bc>
 8003b0a:	ab03      	add	r3, sp, #12
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	462a      	mov	r2, r5
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <_vfiprintf_r+0x22c>)
 8003b12:	a904      	add	r1, sp, #16
 8003b14:	4630      	mov	r0, r6
 8003b16:	f3af 8000 	nop.w
 8003b1a:	4607      	mov	r7, r0
 8003b1c:	1c78      	adds	r0, r7, #1
 8003b1e:	d1d6      	bne.n	8003ace <_vfiprintf_r+0x19e>
 8003b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b22:	07d9      	lsls	r1, r3, #31
 8003b24:	d405      	bmi.n	8003b32 <_vfiprintf_r+0x202>
 8003b26:	89ab      	ldrh	r3, [r5, #12]
 8003b28:	059a      	lsls	r2, r3, #22
 8003b2a:	d402      	bmi.n	8003b32 <_vfiprintf_r+0x202>
 8003b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b2e:	f7ff fddb 	bl	80036e8 <__retarget_lock_release_recursive>
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	065b      	lsls	r3, r3, #25
 8003b36:	f53f af1d 	bmi.w	8003974 <_vfiprintf_r+0x44>
 8003b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b3c:	e71c      	b.n	8003978 <_vfiprintf_r+0x48>
 8003b3e:	ab03      	add	r3, sp, #12
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	462a      	mov	r2, r5
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <_vfiprintf_r+0x22c>)
 8003b46:	a904      	add	r1, sp, #16
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 f879 	bl	8003c40 <_printf_i>
 8003b4e:	e7e4      	b.n	8003b1a <_vfiprintf_r+0x1ea>
 8003b50:	080042c0 	.word	0x080042c0
 8003b54:	080042ca 	.word	0x080042ca
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	0800390b 	.word	0x0800390b
 8003b60:	080042c6 	.word	0x080042c6

08003b64 <_printf_common>:
 8003b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	4616      	mov	r6, r2
 8003b6a:	4699      	mov	r9, r3
 8003b6c:	688a      	ldr	r2, [r1, #8]
 8003b6e:	690b      	ldr	r3, [r1, #16]
 8003b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bfb8      	it	lt
 8003b78:	4613      	movlt	r3, r2
 8003b7a:	6033      	str	r3, [r6, #0]
 8003b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b80:	4607      	mov	r7, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	b10a      	cbz	r2, 8003b8a <_printf_common+0x26>
 8003b86:	3301      	adds	r3, #1
 8003b88:	6033      	str	r3, [r6, #0]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	0699      	lsls	r1, r3, #26
 8003b8e:	bf42      	ittt	mi
 8003b90:	6833      	ldrmi	r3, [r6, #0]
 8003b92:	3302      	addmi	r3, #2
 8003b94:	6033      	strmi	r3, [r6, #0]
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	f015 0506 	ands.w	r5, r5, #6
 8003b9c:	d106      	bne.n	8003bac <_printf_common+0x48>
 8003b9e:	f104 0a19 	add.w	sl, r4, #25
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	6832      	ldr	r2, [r6, #0]
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dc26      	bgt.n	8003bfa <_printf_common+0x96>
 8003bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bb0:	1e13      	subs	r3, r2, #0
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	bf18      	it	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	0692      	lsls	r2, r2, #26
 8003bba:	d42b      	bmi.n	8003c14 <_printf_common+0xb0>
 8003bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c0      	blx	r8
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d01e      	beq.n	8003c08 <_printf_common+0xa4>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	6922      	ldr	r2, [r4, #16]
 8003bce:	f003 0306 	and.w	r3, r3, #6
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	bf02      	ittt	eq
 8003bd6:	68e5      	ldreq	r5, [r4, #12]
 8003bd8:	6833      	ldreq	r3, [r6, #0]
 8003bda:	1aed      	subeq	r5, r5, r3
 8003bdc:	68a3      	ldr	r3, [r4, #8]
 8003bde:	bf0c      	ite	eq
 8003be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be4:	2500      	movne	r5, #0
 8003be6:	4293      	cmp	r3, r2
 8003be8:	bfc4      	itt	gt
 8003bea:	1a9b      	subgt	r3, r3, r2
 8003bec:	18ed      	addgt	r5, r5, r3
 8003bee:	2600      	movs	r6, #0
 8003bf0:	341a      	adds	r4, #26
 8003bf2:	42b5      	cmp	r5, r6
 8003bf4:	d11a      	bne.n	8003c2c <_printf_common+0xc8>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	e008      	b.n	8003c0c <_printf_common+0xa8>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4652      	mov	r2, sl
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4638      	mov	r0, r7
 8003c02:	47c0      	blx	r8
 8003c04:	3001      	adds	r0, #1
 8003c06:	d103      	bne.n	8003c10 <_printf_common+0xac>
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c10:	3501      	adds	r5, #1
 8003c12:	e7c6      	b.n	8003ba2 <_printf_common+0x3e>
 8003c14:	18e1      	adds	r1, r4, r3
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	2030      	movs	r0, #48	; 0x30
 8003c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c1e:	4422      	add	r2, r4
 8003c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c28:	3302      	adds	r3, #2
 8003c2a:	e7c7      	b.n	8003bbc <_printf_common+0x58>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	4622      	mov	r2, r4
 8003c30:	4649      	mov	r1, r9
 8003c32:	4638      	mov	r0, r7
 8003c34:	47c0      	blx	r8
 8003c36:	3001      	adds	r0, #1
 8003c38:	d0e6      	beq.n	8003c08 <_printf_common+0xa4>
 8003c3a:	3601      	adds	r6, #1
 8003c3c:	e7d9      	b.n	8003bf2 <_printf_common+0x8e>
	...

08003c40 <_printf_i>:
 8003c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	7e0f      	ldrb	r7, [r1, #24]
 8003c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c48:	2f78      	cmp	r7, #120	; 0x78
 8003c4a:	4691      	mov	r9, r2
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	469a      	mov	sl, r3
 8003c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c56:	d807      	bhi.n	8003c68 <_printf_i+0x28>
 8003c58:	2f62      	cmp	r7, #98	; 0x62
 8003c5a:	d80a      	bhi.n	8003c72 <_printf_i+0x32>
 8003c5c:	2f00      	cmp	r7, #0
 8003c5e:	f000 80d4 	beq.w	8003e0a <_printf_i+0x1ca>
 8003c62:	2f58      	cmp	r7, #88	; 0x58
 8003c64:	f000 80c0 	beq.w	8003de8 <_printf_i+0x1a8>
 8003c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c70:	e03a      	b.n	8003ce8 <_printf_i+0xa8>
 8003c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c76:	2b15      	cmp	r3, #21
 8003c78:	d8f6      	bhi.n	8003c68 <_printf_i+0x28>
 8003c7a:	a101      	add	r1, pc, #4	; (adr r1, 8003c80 <_printf_i+0x40>)
 8003c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003ced 	.word	0x08003ced
 8003c88:	08003c69 	.word	0x08003c69
 8003c8c:	08003c69 	.word	0x08003c69
 8003c90:	08003c69 	.word	0x08003c69
 8003c94:	08003c69 	.word	0x08003c69
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003c69 	.word	0x08003c69
 8003ca0:	08003c69 	.word	0x08003c69
 8003ca4:	08003c69 	.word	0x08003c69
 8003ca8:	08003c69 	.word	0x08003c69
 8003cac:	08003df1 	.word	0x08003df1
 8003cb0:	08003d19 	.word	0x08003d19
 8003cb4:	08003dab 	.word	0x08003dab
 8003cb8:	08003c69 	.word	0x08003c69
 8003cbc:	08003c69 	.word	0x08003c69
 8003cc0:	08003e13 	.word	0x08003e13
 8003cc4:	08003c69 	.word	0x08003c69
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003c69 	.word	0x08003c69
 8003cd0:	08003c69 	.word	0x08003c69
 8003cd4:	08003db3 	.word	0x08003db3
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	602a      	str	r2, [r5, #0]
 8003ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e09f      	b.n	8003e2c <_printf_i+0x1ec>
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	682b      	ldr	r3, [r5, #0]
 8003cf0:	0607      	lsls	r7, r0, #24
 8003cf2:	f103 0104 	add.w	r1, r3, #4
 8003cf6:	6029      	str	r1, [r5, #0]
 8003cf8:	d501      	bpl.n	8003cfe <_printf_i+0xbe>
 8003cfa:	681e      	ldr	r6, [r3, #0]
 8003cfc:	e003      	b.n	8003d06 <_printf_i+0xc6>
 8003cfe:	0646      	lsls	r6, r0, #25
 8003d00:	d5fb      	bpl.n	8003cfa <_printf_i+0xba>
 8003d02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d06:	2e00      	cmp	r6, #0
 8003d08:	da03      	bge.n	8003d12 <_printf_i+0xd2>
 8003d0a:	232d      	movs	r3, #45	; 0x2d
 8003d0c:	4276      	negs	r6, r6
 8003d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d12:	485a      	ldr	r0, [pc, #360]	; (8003e7c <_printf_i+0x23c>)
 8003d14:	230a      	movs	r3, #10
 8003d16:	e012      	b.n	8003d3e <_printf_i+0xfe>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	6820      	ldr	r0, [r4, #0]
 8003d1c:	1d19      	adds	r1, r3, #4
 8003d1e:	6029      	str	r1, [r5, #0]
 8003d20:	0605      	lsls	r5, r0, #24
 8003d22:	d501      	bpl.n	8003d28 <_printf_i+0xe8>
 8003d24:	681e      	ldr	r6, [r3, #0]
 8003d26:	e002      	b.n	8003d2e <_printf_i+0xee>
 8003d28:	0641      	lsls	r1, r0, #25
 8003d2a:	d5fb      	bpl.n	8003d24 <_printf_i+0xe4>
 8003d2c:	881e      	ldrh	r6, [r3, #0]
 8003d2e:	4853      	ldr	r0, [pc, #332]	; (8003e7c <_printf_i+0x23c>)
 8003d30:	2f6f      	cmp	r7, #111	; 0x6f
 8003d32:	bf0c      	ite	eq
 8003d34:	2308      	moveq	r3, #8
 8003d36:	230a      	movne	r3, #10
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d3e:	6865      	ldr	r5, [r4, #4]
 8003d40:	60a5      	str	r5, [r4, #8]
 8003d42:	2d00      	cmp	r5, #0
 8003d44:	bfa2      	ittt	ge
 8003d46:	6821      	ldrge	r1, [r4, #0]
 8003d48:	f021 0104 	bicge.w	r1, r1, #4
 8003d4c:	6021      	strge	r1, [r4, #0]
 8003d4e:	b90e      	cbnz	r6, 8003d54 <_printf_i+0x114>
 8003d50:	2d00      	cmp	r5, #0
 8003d52:	d04b      	beq.n	8003dec <_printf_i+0x1ac>
 8003d54:	4615      	mov	r5, r2
 8003d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d5e:	5dc7      	ldrb	r7, [r0, r7]
 8003d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d64:	4637      	mov	r7, r6
 8003d66:	42bb      	cmp	r3, r7
 8003d68:	460e      	mov	r6, r1
 8003d6a:	d9f4      	bls.n	8003d56 <_printf_i+0x116>
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d10b      	bne.n	8003d88 <_printf_i+0x148>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	07de      	lsls	r6, r3, #31
 8003d74:	d508      	bpl.n	8003d88 <_printf_i+0x148>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6861      	ldr	r1, [r4, #4]
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	bfde      	ittt	le
 8003d7e:	2330      	movle	r3, #48	; 0x30
 8003d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d88:	1b52      	subs	r2, r2, r5
 8003d8a:	6122      	str	r2, [r4, #16]
 8003d8c:	f8cd a000 	str.w	sl, [sp]
 8003d90:	464b      	mov	r3, r9
 8003d92:	aa03      	add	r2, sp, #12
 8003d94:	4621      	mov	r1, r4
 8003d96:	4640      	mov	r0, r8
 8003d98:	f7ff fee4 	bl	8003b64 <_printf_common>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d14a      	bne.n	8003e36 <_printf_i+0x1f6>
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	b004      	add	sp, #16
 8003da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	f043 0320 	orr.w	r3, r3, #32
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	4833      	ldr	r0, [pc, #204]	; (8003e80 <_printf_i+0x240>)
 8003db4:	2778      	movs	r7, #120	; 0x78
 8003db6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	6829      	ldr	r1, [r5, #0]
 8003dbe:	061f      	lsls	r7, r3, #24
 8003dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dc4:	d402      	bmi.n	8003dcc <_printf_i+0x18c>
 8003dc6:	065f      	lsls	r7, r3, #25
 8003dc8:	bf48      	it	mi
 8003dca:	b2b6      	uxthmi	r6, r6
 8003dcc:	07df      	lsls	r7, r3, #31
 8003dce:	bf48      	it	mi
 8003dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd4:	6029      	str	r1, [r5, #0]
 8003dd6:	bf48      	it	mi
 8003dd8:	6023      	strmi	r3, [r4, #0]
 8003dda:	b91e      	cbnz	r6, 8003de4 <_printf_i+0x1a4>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f023 0320 	bic.w	r3, r3, #32
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	2310      	movs	r3, #16
 8003de6:	e7a7      	b.n	8003d38 <_printf_i+0xf8>
 8003de8:	4824      	ldr	r0, [pc, #144]	; (8003e7c <_printf_i+0x23c>)
 8003dea:	e7e4      	b.n	8003db6 <_printf_i+0x176>
 8003dec:	4615      	mov	r5, r2
 8003dee:	e7bd      	b.n	8003d6c <_printf_i+0x12c>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	6826      	ldr	r6, [r4, #0]
 8003df4:	6961      	ldr	r1, [r4, #20]
 8003df6:	1d18      	adds	r0, r3, #4
 8003df8:	6028      	str	r0, [r5, #0]
 8003dfa:	0635      	lsls	r5, r6, #24
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	d501      	bpl.n	8003e04 <_printf_i+0x1c4>
 8003e00:	6019      	str	r1, [r3, #0]
 8003e02:	e002      	b.n	8003e0a <_printf_i+0x1ca>
 8003e04:	0670      	lsls	r0, r6, #25
 8003e06:	d5fb      	bpl.n	8003e00 <_printf_i+0x1c0>
 8003e08:	8019      	strh	r1, [r3, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	4615      	mov	r5, r2
 8003e10:	e7bc      	b.n	8003d8c <_printf_i+0x14c>
 8003e12:	682b      	ldr	r3, [r5, #0]
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	602a      	str	r2, [r5, #0]
 8003e18:	681d      	ldr	r5, [r3, #0]
 8003e1a:	6862      	ldr	r2, [r4, #4]
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f7fc f9f6 	bl	8000210 <memchr>
 8003e24:	b108      	cbz	r0, 8003e2a <_printf_i+0x1ea>
 8003e26:	1b40      	subs	r0, r0, r5
 8003e28:	6060      	str	r0, [r4, #4]
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	6123      	str	r3, [r4, #16]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e34:	e7aa      	b.n	8003d8c <_printf_i+0x14c>
 8003e36:	6923      	ldr	r3, [r4, #16]
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	47d0      	blx	sl
 8003e40:	3001      	adds	r0, #1
 8003e42:	d0ad      	beq.n	8003da0 <_printf_i+0x160>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	079b      	lsls	r3, r3, #30
 8003e48:	d413      	bmi.n	8003e72 <_printf_i+0x232>
 8003e4a:	68e0      	ldr	r0, [r4, #12]
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	4298      	cmp	r0, r3
 8003e50:	bfb8      	it	lt
 8003e52:	4618      	movlt	r0, r3
 8003e54:	e7a6      	b.n	8003da4 <_printf_i+0x164>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4632      	mov	r2, r6
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4640      	mov	r0, r8
 8003e5e:	47d0      	blx	sl
 8003e60:	3001      	adds	r0, #1
 8003e62:	d09d      	beq.n	8003da0 <_printf_i+0x160>
 8003e64:	3501      	adds	r5, #1
 8003e66:	68e3      	ldr	r3, [r4, #12]
 8003e68:	9903      	ldr	r1, [sp, #12]
 8003e6a:	1a5b      	subs	r3, r3, r1
 8003e6c:	42ab      	cmp	r3, r5
 8003e6e:	dcf2      	bgt.n	8003e56 <_printf_i+0x216>
 8003e70:	e7eb      	b.n	8003e4a <_printf_i+0x20a>
 8003e72:	2500      	movs	r5, #0
 8003e74:	f104 0619 	add.w	r6, r4, #25
 8003e78:	e7f5      	b.n	8003e66 <_printf_i+0x226>
 8003e7a:	bf00      	nop
 8003e7c:	080042d1 	.word	0x080042d1
 8003e80:	080042e2 	.word	0x080042e2

08003e84 <__sflush_r>:
 8003e84:	898a      	ldrh	r2, [r1, #12]
 8003e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	0710      	lsls	r0, r2, #28
 8003e8e:	460c      	mov	r4, r1
 8003e90:	d458      	bmi.n	8003f44 <__sflush_r+0xc0>
 8003e92:	684b      	ldr	r3, [r1, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dc05      	bgt.n	8003ea4 <__sflush_r+0x20>
 8003e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dc02      	bgt.n	8003ea4 <__sflush_r+0x20>
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ea6:	2e00      	cmp	r6, #0
 8003ea8:	d0f9      	beq.n	8003e9e <__sflush_r+0x1a>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003eb0:	682f      	ldr	r7, [r5, #0]
 8003eb2:	6a21      	ldr	r1, [r4, #32]
 8003eb4:	602b      	str	r3, [r5, #0]
 8003eb6:	d032      	beq.n	8003f1e <__sflush_r+0x9a>
 8003eb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	075a      	lsls	r2, r3, #29
 8003ebe:	d505      	bpl.n	8003ecc <__sflush_r+0x48>
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	1ac0      	subs	r0, r0, r3
 8003ec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ec6:	b10b      	cbz	r3, 8003ecc <__sflush_r+0x48>
 8003ec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eca:	1ac0      	subs	r0, r0, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ed2:	6a21      	ldr	r1, [r4, #32]
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	47b0      	blx	r6
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	d106      	bne.n	8003eec <__sflush_r+0x68>
 8003ede:	6829      	ldr	r1, [r5, #0]
 8003ee0:	291d      	cmp	r1, #29
 8003ee2:	d82b      	bhi.n	8003f3c <__sflush_r+0xb8>
 8003ee4:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <__sflush_r+0x108>)
 8003ee6:	410a      	asrs	r2, r1
 8003ee8:	07d6      	lsls	r6, r2, #31
 8003eea:	d427      	bmi.n	8003f3c <__sflush_r+0xb8>
 8003eec:	2200      	movs	r2, #0
 8003eee:	6062      	str	r2, [r4, #4]
 8003ef0:	04d9      	lsls	r1, r3, #19
 8003ef2:	6922      	ldr	r2, [r4, #16]
 8003ef4:	6022      	str	r2, [r4, #0]
 8003ef6:	d504      	bpl.n	8003f02 <__sflush_r+0x7e>
 8003ef8:	1c42      	adds	r2, r0, #1
 8003efa:	d101      	bne.n	8003f00 <__sflush_r+0x7c>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b903      	cbnz	r3, 8003f02 <__sflush_r+0x7e>
 8003f00:	6560      	str	r0, [r4, #84]	; 0x54
 8003f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f04:	602f      	str	r7, [r5, #0]
 8003f06:	2900      	cmp	r1, #0
 8003f08:	d0c9      	beq.n	8003e9e <__sflush_r+0x1a>
 8003f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f0e:	4299      	cmp	r1, r3
 8003f10:	d002      	beq.n	8003f18 <__sflush_r+0x94>
 8003f12:	4628      	mov	r0, r5
 8003f14:	f7ff fbea 	bl	80036ec <_free_r>
 8003f18:	2000      	movs	r0, #0
 8003f1a:	6360      	str	r0, [r4, #52]	; 0x34
 8003f1c:	e7c0      	b.n	8003ea0 <__sflush_r+0x1c>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4628      	mov	r0, r5
 8003f22:	47b0      	blx	r6
 8003f24:	1c41      	adds	r1, r0, #1
 8003f26:	d1c8      	bne.n	8003eba <__sflush_r+0x36>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0c5      	beq.n	8003eba <__sflush_r+0x36>
 8003f2e:	2b1d      	cmp	r3, #29
 8003f30:	d001      	beq.n	8003f36 <__sflush_r+0xb2>
 8003f32:	2b16      	cmp	r3, #22
 8003f34:	d101      	bne.n	8003f3a <__sflush_r+0xb6>
 8003f36:	602f      	str	r7, [r5, #0]
 8003f38:	e7b1      	b.n	8003e9e <__sflush_r+0x1a>
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	e7ad      	b.n	8003ea0 <__sflush_r+0x1c>
 8003f44:	690f      	ldr	r7, [r1, #16]
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	d0a9      	beq.n	8003e9e <__sflush_r+0x1a>
 8003f4a:	0793      	lsls	r3, r2, #30
 8003f4c:	680e      	ldr	r6, [r1, #0]
 8003f4e:	bf08      	it	eq
 8003f50:	694b      	ldreq	r3, [r1, #20]
 8003f52:	600f      	str	r7, [r1, #0]
 8003f54:	bf18      	it	ne
 8003f56:	2300      	movne	r3, #0
 8003f58:	eba6 0807 	sub.w	r8, r6, r7
 8003f5c:	608b      	str	r3, [r1, #8]
 8003f5e:	f1b8 0f00 	cmp.w	r8, #0
 8003f62:	dd9c      	ble.n	8003e9e <__sflush_r+0x1a>
 8003f64:	6a21      	ldr	r1, [r4, #32]
 8003f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f68:	4643      	mov	r3, r8
 8003f6a:	463a      	mov	r2, r7
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b0      	blx	r6
 8003f70:	2800      	cmp	r0, #0
 8003f72:	dc06      	bgt.n	8003f82 <__sflush_r+0xfe>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7a:	81a3      	strh	r3, [r4, #12]
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e78e      	b.n	8003ea0 <__sflush_r+0x1c>
 8003f82:	4407      	add	r7, r0
 8003f84:	eba8 0800 	sub.w	r8, r8, r0
 8003f88:	e7e9      	b.n	8003f5e <__sflush_r+0xda>
 8003f8a:	bf00      	nop
 8003f8c:	dfbffffe 	.word	0xdfbffffe

08003f90 <_fflush_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	4605      	mov	r5, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	b913      	cbnz	r3, 8003fa0 <_fflush_r+0x10>
 8003f9a:	2500      	movs	r5, #0
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	b118      	cbz	r0, 8003faa <_fflush_r+0x1a>
 8003fa2:	6a03      	ldr	r3, [r0, #32]
 8003fa4:	b90b      	cbnz	r3, 8003faa <_fflush_r+0x1a>
 8003fa6:	f7ff f9a9 	bl	80032fc <__sinit>
 8003faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f3      	beq.n	8003f9a <_fflush_r+0xa>
 8003fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fb4:	07d0      	lsls	r0, r2, #31
 8003fb6:	d404      	bmi.n	8003fc2 <_fflush_r+0x32>
 8003fb8:	0599      	lsls	r1, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_fflush_r+0x32>
 8003fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fbe:	f7ff fb92 	bl	80036e6 <__retarget_lock_acquire_recursive>
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	f7ff ff5d 	bl	8003e84 <__sflush_r>
 8003fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fcc:	07da      	lsls	r2, r3, #31
 8003fce:	4605      	mov	r5, r0
 8003fd0:	d4e4      	bmi.n	8003f9c <_fflush_r+0xc>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	059b      	lsls	r3, r3, #22
 8003fd6:	d4e1      	bmi.n	8003f9c <_fflush_r+0xc>
 8003fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fda:	f7ff fb85 	bl	80036e8 <__retarget_lock_release_recursive>
 8003fde:	e7dd      	b.n	8003f9c <_fflush_r+0xc>

08003fe0 <__swhatbuf_r>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	b096      	sub	sp, #88	; 0x58
 8003fec:	4615      	mov	r5, r2
 8003fee:	461e      	mov	r6, r3
 8003ff0:	da0d      	bge.n	800400e <__swhatbuf_r+0x2e>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	bf0c      	ite	eq
 8003ffe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004002:	2340      	movne	r3, #64	; 0x40
 8004004:	2000      	movs	r0, #0
 8004006:	6031      	str	r1, [r6, #0]
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	b016      	add	sp, #88	; 0x58
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	466a      	mov	r2, sp
 8004010:	f000 f848 	bl	80040a4 <_fstat_r>
 8004014:	2800      	cmp	r0, #0
 8004016:	dbec      	blt.n	8003ff2 <__swhatbuf_r+0x12>
 8004018:	9901      	ldr	r1, [sp, #4]
 800401a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800401e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004022:	4259      	negs	r1, r3
 8004024:	4159      	adcs	r1, r3
 8004026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402a:	e7eb      	b.n	8004004 <__swhatbuf_r+0x24>

0800402c <__smakebuf_r>:
 800402c:	898b      	ldrh	r3, [r1, #12]
 800402e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004030:	079d      	lsls	r5, r3, #30
 8004032:	4606      	mov	r6, r0
 8004034:	460c      	mov	r4, r1
 8004036:	d507      	bpl.n	8004048 <__smakebuf_r+0x1c>
 8004038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	6123      	str	r3, [r4, #16]
 8004040:	2301      	movs	r3, #1
 8004042:	6163      	str	r3, [r4, #20]
 8004044:	b002      	add	sp, #8
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	ab01      	add	r3, sp, #4
 800404a:	466a      	mov	r2, sp
 800404c:	f7ff ffc8 	bl	8003fe0 <__swhatbuf_r>
 8004050:	9900      	ldr	r1, [sp, #0]
 8004052:	4605      	mov	r5, r0
 8004054:	4630      	mov	r0, r6
 8004056:	f7ff fbb5 	bl	80037c4 <_malloc_r>
 800405a:	b948      	cbnz	r0, 8004070 <__smakebuf_r+0x44>
 800405c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004060:	059a      	lsls	r2, r3, #22
 8004062:	d4ef      	bmi.n	8004044 <__smakebuf_r+0x18>
 8004064:	f023 0303 	bic.w	r3, r3, #3
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	81a3      	strh	r3, [r4, #12]
 800406e:	e7e3      	b.n	8004038 <__smakebuf_r+0xc>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	6020      	str	r0, [r4, #0]
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	9b00      	ldr	r3, [sp, #0]
 800407c:	6163      	str	r3, [r4, #20]
 800407e:	9b01      	ldr	r3, [sp, #4]
 8004080:	6120      	str	r0, [r4, #16]
 8004082:	b15b      	cbz	r3, 800409c <__smakebuf_r+0x70>
 8004084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004088:	4630      	mov	r0, r6
 800408a:	f000 f81d 	bl	80040c8 <_isatty_r>
 800408e:	b128      	cbz	r0, 800409c <__smakebuf_r+0x70>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	431d      	orrs	r5, r3
 80040a0:	81a5      	strh	r5, [r4, #12]
 80040a2:	e7cf      	b.n	8004044 <__smakebuf_r+0x18>

080040a4 <_fstat_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4d07      	ldr	r5, [pc, #28]	; (80040c4 <_fstat_r+0x20>)
 80040a8:	2300      	movs	r3, #0
 80040aa:	4604      	mov	r4, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	602b      	str	r3, [r5, #0]
 80040b2:	f7fc febe 	bl	8000e32 <_fstat>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	d102      	bne.n	80040c0 <_fstat_r+0x1c>
 80040ba:	682b      	ldr	r3, [r5, #0]
 80040bc:	b103      	cbz	r3, 80040c0 <_fstat_r+0x1c>
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	bd38      	pop	{r3, r4, r5, pc}
 80040c2:	bf00      	nop
 80040c4:	200002a8 	.word	0x200002a8

080040c8 <_isatty_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4d06      	ldr	r5, [pc, #24]	; (80040e4 <_isatty_r+0x1c>)
 80040cc:	2300      	movs	r3, #0
 80040ce:	4604      	mov	r4, r0
 80040d0:	4608      	mov	r0, r1
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	f7fc febd 	bl	8000e52 <_isatty>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_isatty_r+0x1a>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_isatty_r+0x1a>
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	200002a8 	.word	0x200002a8

080040e8 <_sbrk_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d06      	ldr	r5, [pc, #24]	; (8004104 <_sbrk_r+0x1c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7fc fec6 	bl	8000e84 <_sbrk>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_sbrk_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_sbrk_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	200002a8 	.word	0x200002a8

08004108 <_init>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr

08004114 <_fini>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr
