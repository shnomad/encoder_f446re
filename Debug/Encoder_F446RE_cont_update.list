
Encoder_F446RE_cont_update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005514  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e4  080058e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  0800595c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800595c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd30  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002943  00000000  00000000  0002fe13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2f  00000000  00000000  00033708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233c1  00000000  00000000  00034337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d62  00000000  00000000  000576f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d37aa  00000000  00000000  0006a45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048bc  00000000  00000000  0013dc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001424c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080056cc 	.word	0x080056cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080056cc 	.word	0x080056cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80005b2:	2306      	movs	r3, #6
 80005b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80005b6:	2306      	movs	r3, #6
 80005b8:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	83fb      	strh	r3, [r7, #30]
 80005c2:	2300      	movs	r3, #0
 80005c4:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80005c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ca:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80005d0:	4ba1      	ldr	r3, [pc, #644]	; (8000858 <EE_Init+0x2ac>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80005d6:	4ba1      	ldr	r3, [pc, #644]	; (800085c <EE_Init+0x2b0>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80005ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80005ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d00b      	beq.n	800060e <EE_Init+0x62>
 80005f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005fa:	f280 8196 	bge.w	800092a <EE_Init+0x37e>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	f000 80f8 	beq.w	80007f4 <EE_Init+0x248>
 8000604:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000608:	4293      	cmp	r3, r2
 800060a:	d050      	beq.n	80006ae <EE_Init+0x102>
 800060c:	e18d      	b.n	800092a <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800060e:	8c3b      	ldrh	r3, [r7, #32]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d116      	bne.n	8000642 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000614:	4890      	ldr	r0, [pc, #576]	; (8000858 <EE_Init+0x2ac>)
 8000616:	f000 f9a9 	bl	800096c <EE_VerifyPageFullyErased>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	f040 818e 	bne.w	800093e <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000622:	f107 0214 	add.w	r2, r7, #20
 8000626:	463b      	mov	r3, r7
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd0e 	bl	800204c <HAL_FLASHEx_Erase>
 8000630:	4603      	mov	r3, r0
 8000632:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2b00      	cmp	r3, #0
 8000638:	f000 8181 	beq.w	800093e <EE_Init+0x392>
          {
            return FlashStatus;
 800063c:	7efb      	ldrb	r3, [r7, #27]
 800063e:	b29b      	uxth	r3, r3
 8000640:	e185      	b.n	800094e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000642:	8c3b      	ldrh	r3, [r7, #32]
 8000644:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000648:	4293      	cmp	r3, r2
 800064a:	d125      	bne.n	8000698 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800064c:	4882      	ldr	r0, [pc, #520]	; (8000858 <EE_Init+0x2ac>)
 800064e:	f000 f98d 	bl	800096c <EE_VerifyPageFullyErased>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10e      	bne.n	8000676 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000658:	f107 0214 	add.w	r2, r7, #20
 800065c:	463b      	mov	r3, r7
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fcf3 	bl	800204c <HAL_FLASHEx_Erase>
 8000666:	4603      	mov	r3, r0
 8000668:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800066a:	7efb      	ldrb	r3, [r7, #27]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <EE_Init+0xca>
          {
            return FlashStatus;
 8000670:	7efb      	ldrb	r3, [r7, #27]
 8000672:	b29b      	uxth	r3, r3
 8000674:	e16b      	b.n	800094e <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	4977      	ldr	r1, [pc, #476]	; (800085c <EE_Init+0x2b0>)
 8000680:	2001      	movs	r0, #1
 8000682:	f001 fb1d 	bl	8001cc0 <HAL_FLASH_Program>
 8000686:	4603      	mov	r3, r0
 8000688:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800068a:	7efb      	ldrb	r3, [r7, #27]
 800068c:	2b00      	cmp	r3, #0
 800068e:	f000 8156 	beq.w	800093e <EE_Init+0x392>
        {
          return FlashStatus;
 8000692:	7efb      	ldrb	r3, [r7, #27]
 8000694:	b29b      	uxth	r3, r3
 8000696:	e15a      	b.n	800094e <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000698:	f000 f9fe 	bl	8000a98 <EE_Format>
 800069c:	4603      	mov	r3, r0
 800069e:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80006a0:	7efb      	ldrb	r3, [r7, #27]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 814b 	beq.w	800093e <EE_Init+0x392>
        {
          return FlashStatus;
 80006a8:	7efb      	ldrb	r3, [r7, #27]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	e14f      	b.n	800094e <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80006ae:	8c3b      	ldrh	r3, [r7, #32]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d163      	bne.n	800077c <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006b8:	e030      	b.n	800071c <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80006ba:	4b69      	ldr	r3, [pc, #420]	; (8000860 <EE_Init+0x2b4>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006c2:	4968      	ldr	r1, [pc, #416]	; (8000864 <EE_Init+0x2b8>)
 80006c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d101      	bne.n	80006d0 <EE_Init+0x124>
          {
            x = VarIdx;
 80006cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ce:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80006d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006d2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d01d      	beq.n	8000716 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80006da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006dc:	4a61      	ldr	r2, [pc, #388]	; (8000864 <EE_Init+0x2b8>)
 80006de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e2:	4961      	ldr	r1, [pc, #388]	; (8000868 <EE_Init+0x2bc>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f96b 	bl	80009c0 <EE_ReadVariable>
 80006ea:	4603      	mov	r3, r0
 80006ec:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80006ee:	8bbb      	ldrh	r3, [r7, #28]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d010      	beq.n	8000716 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80006f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006f6:	4a5b      	ldr	r2, [pc, #364]	; (8000864 <EE_Init+0x2b8>)
 80006f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fc:	4a5a      	ldr	r2, [pc, #360]	; (8000868 <EE_Init+0x2bc>)
 80006fe:	8812      	ldrh	r2, [r2, #0]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fa60 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000708:	4603      	mov	r3, r0
 800070a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800070c:	8bfb      	ldrh	r3, [r7, #30]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <EE_Init+0x16a>
              {
                return EepromStatus;
 8000712:	8bfb      	ldrh	r3, [r7, #30]
 8000714:	e11b      	b.n	800094e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000718:	3301      	adds	r3, #1
 800071a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800071c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800071e:	2b02      	cmp	r3, #2
 8000720:	d9cb      	bls.n	80006ba <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	f04f 0300 	mov.w	r3, #0
 800072a:	494b      	ldr	r1, [pc, #300]	; (8000858 <EE_Init+0x2ac>)
 800072c:	2001      	movs	r0, #1
 800072e:	f001 fac7 	bl	8001cc0 <HAL_FLASH_Program>
 8000732:	4603      	mov	r3, r0
 8000734:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000736:	7efb      	ldrb	r3, [r7, #27]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <EE_Init+0x196>
        {
          return FlashStatus;
 800073c:	7efb      	ldrb	r3, [r7, #27]
 800073e:	b29b      	uxth	r3, r3
 8000740:	e105      	b.n	800094e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000742:	2303      	movs	r3, #3
 8000744:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800074a:	2302      	movs	r3, #2
 800074c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800074e:	4843      	ldr	r0, [pc, #268]	; (800085c <EE_Init+0x2b0>)
 8000750:	f000 f90c 	bl	800096c <EE_VerifyPageFullyErased>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	f040 80f3 	bne.w	8000942 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800075c:	f107 0214 	add.w	r2, r7, #20
 8000760:	463b      	mov	r3, r7
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fc71 	bl	800204c <HAL_FLASHEx_Erase>
 800076a:	4603      	mov	r3, r0
 800076c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800076e:	7efb      	ldrb	r3, [r7, #27]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 80e6 	beq.w	8000942 <EE_Init+0x396>
          {
            return FlashStatus;
 8000776:	7efb      	ldrb	r3, [r7, #27]
 8000778:	b29b      	uxth	r3, r3
 800077a:	e0e8      	b.n	800094e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800077c:	8c3b      	ldrh	r3, [r7, #32]
 800077e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000782:	4293      	cmp	r3, r2
 8000784:	d12b      	bne.n	80007de <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8000786:	2303      	movs	r3, #3
 8000788:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000792:	4832      	ldr	r0, [pc, #200]	; (800085c <EE_Init+0x2b0>)
 8000794:	f000 f8ea 	bl	800096c <EE_VerifyPageFullyErased>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10e      	bne.n	80007bc <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800079e:	f107 0214 	add.w	r2, r7, #20
 80007a2:	463b      	mov	r3, r7
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fc50 	bl	800204c <HAL_FLASHEx_Erase>
 80007ac:	4603      	mov	r3, r0
 80007ae:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80007b0:	7efb      	ldrb	r3, [r7, #27]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <EE_Init+0x210>
          {
            return FlashStatus;
 80007b6:	7efb      	ldrb	r3, [r7, #27]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	e0c8      	b.n	800094e <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80007bc:	f04f 0200 	mov.w	r2, #0
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	4924      	ldr	r1, [pc, #144]	; (8000858 <EE_Init+0x2ac>)
 80007c6:	2001      	movs	r0, #1
 80007c8:	f001 fa7a 	bl	8001cc0 <HAL_FLASH_Program>
 80007cc:	4603      	mov	r3, r0
 80007ce:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007d0:	7efb      	ldrb	r3, [r7, #27]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 80b5 	beq.w	8000942 <EE_Init+0x396>
        {
          return FlashStatus;
 80007d8:	7efb      	ldrb	r3, [r7, #27]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	e0b7      	b.n	800094e <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007de:	f000 f95b 	bl	8000a98 <EE_Format>
 80007e2:	4603      	mov	r3, r0
 80007e4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007e6:	7efb      	ldrb	r3, [r7, #27]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	f000 80aa 	beq.w	8000942 <EE_Init+0x396>
        {
          return FlashStatus;
 80007ee:	7efb      	ldrb	r3, [r7, #27]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	e0ac      	b.n	800094e <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80007f4:	8c3b      	ldrh	r3, [r7, #32]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10a      	bne.n	8000810 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007fa:	f000 f94d 	bl	8000a98 <EE_Format>
 80007fe:	4603      	mov	r3, r0
 8000800:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000802:	7efb      	ldrb	r3, [r7, #27]
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 809e 	beq.w	8000946 <EE_Init+0x39a>
        {
          return FlashStatus;
 800080a:	7efb      	ldrb	r3, [r7, #27]
 800080c:	b29b      	uxth	r3, r3
 800080e:	e09e      	b.n	800094e <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000810:	8c3b      	ldrh	r3, [r7, #32]
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	4293      	cmp	r3, r2
 8000818:	d11b      	bne.n	8000852 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <EE_Init+0x2b0>)
 8000828:	f000 f8a0 	bl	800096c <EE_VerifyPageFullyErased>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	f040 8089 	bne.w	8000946 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000834:	f107 0214 	add.w	r2, r7, #20
 8000838:	463b      	mov	r3, r7
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fc05 	bl	800204c <HAL_FLASHEx_Erase>
 8000842:	4603      	mov	r3, r0
 8000844:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000846:	7efb      	ldrb	r3, [r7, #27]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d07c      	beq.n	8000946 <EE_Init+0x39a>
          {
            return FlashStatus;
 800084c:	7efb      	ldrb	r3, [r7, #27]
 800084e:	b29b      	uxth	r3, r3
 8000850:	e07d      	b.n	800094e <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000856:	e03a      	b.n	80008ce <EE_Init+0x322>
 8000858:	08008000 	.word	0x08008000
 800085c:	0800c000 	.word	0x0800c000
 8000860:	08008006 	.word	0x08008006
 8000864:	20000000 	.word	0x20000000
 8000868:	2000008c 	.word	0x2000008c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800086c:	4b3a      	ldr	r3, [pc, #232]	; (8000958 <EE_Init+0x3ac>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000874:	4939      	ldr	r1, [pc, #228]	; (800095c <EE_Init+0x3b0>)
 8000876:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800087a:	429a      	cmp	r2, r3
 800087c:	d101      	bne.n	8000882 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800087e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000880:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8000882:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000884:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000888:	429a      	cmp	r2, r3
 800088a:	d01d      	beq.n	80008c8 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800088c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800088e:	4a33      	ldr	r2, [pc, #204]	; (800095c <EE_Init+0x3b0>)
 8000890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000894:	4932      	ldr	r1, [pc, #200]	; (8000960 <EE_Init+0x3b4>)
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f892 	bl	80009c0 <EE_ReadVariable>
 800089c:	4603      	mov	r3, r0
 800089e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80008a0:	8bbb      	ldrh	r3, [r7, #28]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d010      	beq.n	80008c8 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80008a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008a8:	4a2c      	ldr	r2, [pc, #176]	; (800095c <EE_Init+0x3b0>)
 80008aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ae:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <EE_Init+0x3b4>)
 80008b0:	8812      	ldrh	r2, [r2, #0]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f987 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 80008ba:	4603      	mov	r3, r0
 80008bc:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80008be:	8bfb      	ldrh	r3, [r7, #30]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <EE_Init+0x31c>
              {
                return EepromStatus;
 80008c4:	8bfb      	ldrh	r3, [r7, #30]
 80008c6:	e042      	b.n	800094e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80008c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008ca:	3301      	adds	r3, #1
 80008cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d9cb      	bls.n	800086c <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80008d4:	f04f 0200 	mov.w	r2, #0
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	4921      	ldr	r1, [pc, #132]	; (8000964 <EE_Init+0x3b8>)
 80008de:	2001      	movs	r0, #1
 80008e0:	f001 f9ee 	bl	8001cc0 <HAL_FLASH_Program>
 80008e4:	4603      	mov	r3, r0
 80008e6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80008e8:	7efb      	ldrb	r3, [r7, #27]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <EE_Init+0x348>
        {
          return FlashStatus;
 80008ee:	7efb      	ldrb	r3, [r7, #27]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	e02c      	b.n	800094e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 80008f4:	2302      	movs	r3, #2
 80008f6:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80008fc:	2302      	movs	r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000900:	4819      	ldr	r0, [pc, #100]	; (8000968 <EE_Init+0x3bc>)
 8000902:	f000 f833 	bl	800096c <EE_VerifyPageFullyErased>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d11c      	bne.n	8000946 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800090c:	f107 0214 	add.w	r2, r7, #20
 8000910:	463b      	mov	r3, r7
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fb99 	bl	800204c <HAL_FLASHEx_Erase>
 800091a:	4603      	mov	r3, r0
 800091c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800091e:	7efb      	ldrb	r3, [r7, #27]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d010      	beq.n	8000946 <EE_Init+0x39a>
          {
            return FlashStatus;
 8000924:	7efb      	ldrb	r3, [r7, #27]
 8000926:	b29b      	uxth	r3, r3
 8000928:	e011      	b.n	800094e <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800092a:	f000 f8b5 	bl	8000a98 <EE_Format>
 800092e:	4603      	mov	r3, r0
 8000930:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000932:	7efb      	ldrb	r3, [r7, #27]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d008      	beq.n	800094a <EE_Init+0x39e>
      {
        return FlashStatus;
 8000938:	7efb      	ldrb	r3, [r7, #27]
 800093a:	b29b      	uxth	r3, r3
 800093c:	e007      	b.n	800094e <EE_Init+0x3a2>
      break;
 800093e:	bf00      	nop
 8000940:	e004      	b.n	800094c <EE_Init+0x3a0>
      break;
 8000942:	bf00      	nop
 8000944:	e002      	b.n	800094c <EE_Init+0x3a0>
      break;
 8000946:	bf00      	nop
 8000948:	e000      	b.n	800094c <EE_Init+0x3a0>
      }
      break;
 800094a:	bf00      	nop
  }

  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	0800c006 	.word	0x0800c006
 800095c:	20000000 	.word	0x20000000
 8000960:	2000008c 	.word	0x2000008c
 8000964:	0800c000 	.word	0x0800c000
 8000968:	08008000 	.word	0x08008000

0800096c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 8000978:	f245 5355 	movw	r3, #21845	; 0x5555
 800097c:	827b      	strh	r3, [r7, #18]
   
  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000984:	333c      	adds	r3, #60	; 0x3c
 8000986:	60fb      	str	r3, [r7, #12]
  
  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 8000988:	e00d      	b.n	80009a6 <EE_VerifyPageFullyErased+0x3a>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8000990:	8a7b      	ldrh	r3, [r7, #18]
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	4293      	cmp	r3, r2
 8000998:	d002      	beq.n	80009a0 <EE_VerifyPageFullyErased+0x34>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]

      break;
 800099e:	e006      	b.n	80009ae <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3304      	adds	r3, #4
 80009a4:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d9ed      	bls.n	800098a <EE_VerifyPageFullyErased+0x1e>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	b29b      	uxth	r3, r3
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80009d0:	f245 5355 	movw	r3, #21845	; 0x5555
 80009d4:	81bb      	strh	r3, [r7, #12]
 80009d6:	2301      	movs	r3, #1
 80009d8:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <EE_ReadVariable+0x8c>)
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <EE_ReadVariable+0x8c>)
 80009e0:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f8aa 	bl	8000b3c <EE_FindValidPage>
 80009e8:	4603      	mov	r3, r0
 80009ea:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	2bab      	cmp	r3, #171	; 0xab
 80009f0:	d101      	bne.n	80009f6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80009f2:	23ab      	movs	r3, #171	; 0xab
 80009f4:	e025      	b.n	8000a42 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80009fc:	3302      	adds	r3, #2
 80009fe:	039b      	lsls	r3, r3, #14
 8000a00:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	3301      	adds	r3, #1
 8000a06:	039a      	lsls	r2, r3, #14
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <EE_ReadVariable+0x90>)
 8000a0a:	4413      	add	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000a0e:	e012      	b.n	8000a36 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000a16:	89ba      	ldrh	r2, [r7, #12]
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d108      	bne.n	8000a30 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3b02      	subs	r3, #2
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	82fb      	strh	r3, [r7, #22]

      break;
 8000a2e:	e007      	b.n	8000a40 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	3b04      	subs	r3, #4
 8000a34:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3302      	adds	r3, #2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8e7      	bhi.n	8000a10 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000a40:	8afb      	ldrh	r3, [r7, #22]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08008000 	.word	0x08008000
 8000a50:	08007ffe 	.word	0x08007ffe

08000a54 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	80fb      	strh	r3, [r7, #6]
 8000a60:	4613      	mov	r3, r2
 8000a62:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000a68:	88ba      	ldrh	r2, [r7, #4]
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f8aa 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000a74:	4603      	mov	r3, r0
 8000a76:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	2b80      	cmp	r3, #128	; 0x80
 8000a7c:	d107      	bne.n	8000a8e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000a7e:	88ba      	ldrh	r2, [r7, #4]
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f901 	bl	8000c8c <EE_PageTransfer>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <EE_Format+0x9c>)
 8000ab8:	f7ff ff58 	bl	800096c <EE_VerifyPageFullyErased>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10d      	bne.n	8000ade <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000ac2:	f107 0218 	add.w	r2, r7, #24
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fabe 	bl	800204c <HAL_FLASHEx_Erase>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000ad4:	7ffb      	ldrb	r3, [r7, #31]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <EE_Format+0x46>
    {
      return FlashStatus;
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	e025      	b.n	8000b2a <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	4913      	ldr	r1, [pc, #76]	; (8000b34 <EE_Format+0x9c>)
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 f8e9 	bl	8001cc0 <HAL_FLASH_Program>
 8000aee:	4603      	mov	r3, r0
 8000af0:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000af2:	7ffb      	ldrb	r3, [r7, #31]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <EE_Format+0x64>
  {
    return FlashStatus;
 8000af8:	7ffb      	ldrb	r3, [r7, #31]
 8000afa:	e016      	b.n	8000b2a <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000afc:	2303      	movs	r3, #3
 8000afe:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <EE_Format+0xa0>)
 8000b02:	f7ff ff33 	bl	800096c <EE_VerifyPageFullyErased>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10d      	bne.n	8000b28 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000b0c:	f107 0218 	add.w	r2, r7, #24
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fa99 	bl	800204c <HAL_FLASHEx_Erase>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <EE_Format+0x90>
    {
      return FlashStatus;
 8000b24:	7ffb      	ldrb	r3, [r7, #31]
 8000b26:	e000      	b.n	8000b2a <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08008000 	.word	0x08008000
 8000b38:	0800c000 	.word	0x0800c000

08000b3c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000b46:	2306      	movs	r3, #6
 8000b48:	81fb      	strh	r3, [r7, #14]
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <EE_FindValidPage+0x84>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <EE_FindValidPage+0x88>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01b      	beq.n	8000b98 <EE_FindValidPage+0x5c>
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d125      	bne.n	8000bb0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000b64:	89bb      	ldrh	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d108      	bne.n	8000b7c <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
 8000b6c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000b74:	2300      	movs	r3, #0
 8000b76:	e01c      	b.n	8000bb2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e01a      	b.n	8000bb2 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000b7c:	89fb      	ldrh	r3, [r7, #14]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d108      	bne.n	8000b94 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000b82:	89bb      	ldrh	r3, [r7, #12]
 8000b84:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d101      	bne.n	8000b90 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e010      	b.n	8000bb2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000b90:	2300      	movs	r3, #0
 8000b92:	e00e      	b.n	8000bb2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000b94:	23ab      	movs	r3, #171	; 0xab
 8000b96:	e00c      	b.n	8000bb2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e007      	b.n	8000bb2 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000ba2:	89bb      	ldrh	r3, [r7, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e002      	b.n	8000bb2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000bac:	23ab      	movs	r3, #171	; 0xab
 8000bae:	e000      	b.n	8000bb2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000bb0:	2300      	movs	r3, #0
  }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	08008000 	.word	0x08008000
 8000bc4:	0800c000 	.word	0x0800c000

08000bc8 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ffa6 	bl	8000b3c <EE_FindValidPage>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000bf4:	8a3b      	ldrh	r3, [r7, #16]
 8000bf6:	2bab      	cmp	r3, #171	; 0xab
 8000bf8:	d101      	bne.n	8000bfe <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000bfa:	23ab      	movs	r3, #171	; 0xab
 8000bfc:	e03b      	b.n	8000c76 <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000bfe:	8a3b      	ldrh	r3, [r7, #16]
 8000c00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000c04:	3302      	adds	r3, #2
 8000c06:	039b      	lsls	r3, r3, #14
 8000c08:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000c0a:	8a3b      	ldrh	r3, [r7, #16]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	039a      	lsls	r2, r3, #14
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <EE_VerifyPageFullWriteVariable+0xc0>)
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8000c16:	e029      	b.n	8000c6c <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d121      	bne.n	8000c66 <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000c22:	88bb      	ldrh	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	461c      	mov	r4, r3
 8000c28:	4615      	mov	r5, r2
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	462b      	mov	r3, r5
 8000c2e:	6979      	ldr	r1, [r7, #20]
 8000c30:	2001      	movs	r0, #1
 8000c32:	f001 f845 	bl	8001cc0 <HAL_FLASH_Program>
 8000c36:	4603      	mov	r3, r0
 8000c38:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8000c40:	7cfb      	ldrb	r3, [r7, #19]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	e017      	b.n	8000c76 <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	1c99      	adds	r1, r3, #2
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4698      	mov	r8, r3
 8000c50:	4691      	mov	r9, r2
 8000c52:	4642      	mov	r2, r8
 8000c54:	464b      	mov	r3, r9
 8000c56:	2001      	movs	r0, #1
 8000c58:	f001 f832 	bl	8001cc0 <HAL_FLASH_Program>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000c60:	7cfb      	ldrb	r3, [r7, #19]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	e007      	b.n	8000c76 <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d3d1      	bcc.n	8000c18 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000c74:	2380      	movs	r3, #128	; 0x80
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c80:	08008000 	.word	0x08008000
 8000c84:	0800c000 	.word	0x0800c000
 8000c88:	08007fff 	.word	0x08007fff

08000c8c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	460a      	mov	r2, r1
 8000c96:	80fb      	strh	r3, [r7, #6]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <EE_PageTransfer+0x168>)
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000cae:	2300      	movs	r3, #0
 8000cb0:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	847b      	strh	r3, [r7, #34]	; 0x22
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff ff3c 	bl	8000b3c <EE_FindValidPage>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d104      	bne.n	8000cd8 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000cce:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <EE_PageTransfer+0x168>)
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000cd6:	e009      	b.n	8000cec <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d104      	bne.n	8000ce8 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <EE_PageTransfer+0x16c>)
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000ce6:	e001      	b.n	8000cec <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000ce8:	23ab      	movs	r3, #171	; 0xab
 8000cea:	e07e      	b.n	8000dea <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000cec:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 ffe2 	bl	8001cc0 <HAL_FLASH_Program>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	e06b      	b.n	8000dea <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000d12:	88ba      	ldrh	r2, [r7, #4]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff55 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000d28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d2a:	e05e      	b.n	8000dea <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	853b      	strh	r3, [r7, #40]	; 0x28
 8000d30:	e027      	b.n	8000d82 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000d32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d34:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <EE_PageTransfer+0x170>)
 8000d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3a:	88fa      	ldrh	r2, [r7, #6]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d01d      	beq.n	8000d7c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000d40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d42:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <EE_PageTransfer+0x170>)
 8000d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d48:	492d      	ldr	r1, [pc, #180]	; (8000e00 <EE_PageTransfer+0x174>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fe38 	bl	80009c0 <EE_ReadVariable>
 8000d50:	4603      	mov	r3, r0
 8000d52:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000d54:	8c3b      	ldrh	r3, [r7, #32]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d010      	beq.n	8000d7c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000d5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <EE_PageTransfer+0x170>)
 8000d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d62:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <EE_PageTransfer+0x174>)
 8000d64:	8812      	ldrh	r2, [r2, #0]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff2d 	bl	8000bc8 <EE_VerifyPageFullWriteVariable>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d7a:	e036      	b.n	8000dea <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d7e:	3301      	adds	r3, #1
 8000d80:	853b      	strh	r3, [r7, #40]	; 0x28
 8000d82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d9d4      	bls.n	8000d32 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000d8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d8e:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000d98:	f107 021c 	add.w	r2, r7, #28
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 f952 	bl	800204c <HAL_FLASHEx_Erase>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	e015      	b.n	8000dea <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 ff79 	bl	8001cc0 <HAL_FLASH_Program>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	e002      	b.n	8000dea <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000de8:	b29b      	uxth	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3730      	adds	r7, #48	; 0x30
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08008000 	.word	0x08008000
 8000df8:	0800c000 	.word	0x0800c000
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	2000008c 	.word	0x2000008c

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fd44 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f81c 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 f93a 	bl	8001088 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e14:	f000 f88c 	bl	8000f30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e18:	f000 f8e2 	bl	8000fe0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e1c:	f000 f90a 	bl	8001034 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Encoder Started!!\r\n");
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <main+0x3c>)
 8000e22:	f003 fde9 	bl	80049f8 <puts>

  save_100mm_encoder_counter(34567);
 8000e26:	f248 7007 	movw	r0, #34567	; 0x8707
 8000e2a:	f000 fa91 	bl	8001350 <save_100mm_encoder_counter>
//  read_100mm_encoder_counter();

  printf("EEPROM Emulation W/R Test : %d\r\n",read_100mm_encoder_counter());
 8000e2e:	f000 fac7 	bl	80013c0 <read_100mm_encoder_counter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <main+0x40>)
 8000e38:	f003 fd78 	bl	800492c <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <main+0x38>
 8000e3e:	bf00      	nop
 8000e40:	080056e4 	.word	0x080056e4
 8000e44:	080056f8 	.word	0x080056f8

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2234      	movs	r2, #52	; 0x34
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 feae 	bl	8004bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <SystemClock_Config+0xe0>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a2c      	ldr	r2, [pc, #176]	; (8000f28 <SystemClock_Config+0xe0>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <SystemClock_Config+0xe0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <SystemClock_Config+0xe4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <SystemClock_Config+0xe4>)
 8000e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <SystemClock_Config+0xe4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eac:	2310      	movs	r3, #16
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000ebc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ec0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fece 	bl	8002c74 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ede:	f000 fa8b 	bl	80013f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ee2:	f001 fbb3 	bl	800264c <HAL_PWREx_EnableOverDrive>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000eec:	f000 fa84 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fbec 	bl	80026ec <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000f1a:	f000 fa6d 	bl	80013f8 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3750      	adds	r7, #80	; 0x50
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fe3a 	bl	8004bb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f90:	2301      	movs	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000fa4:	f002 f904 	bl	80031b0 <HAL_TIM_Encoder_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000fae:	f000 fa23 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_TIM1_Init+0xa8>)
 8000fc0:	f002 fb60 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000fca:	f000 fa15 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3730      	adds	r7, #48	; 0x30
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_USART1_UART_Init+0x50>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART1_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USART1_UART_Init+0x4c>)
 8001018:	f002 fbc4 	bl	80037a4 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001022:	f000 f9e9 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200000d8 	.word	0x200000d8
 8001030:	40011000 	.word	0x40011000

08001034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <MX_USART2_UART_Init+0x50>)
 800103c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART2_UART_Init+0x4c>)
 800106c:	f002 fb9a 	bl	80037a4 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001076:	f000 f9bf 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000120 	.word	0x20000120
 8001084:	40004400 	.word	0x40004400

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a38      	ldr	r2, [pc, #224]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <MX_GPIO_Init+0x11c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRG_OUT_GPIO_Port, TRG_OUT_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2101      	movs	r1, #1
 80010f6:	482c      	ldr	r0, [pc, #176]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010f8:	f001 fa76 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC_MODE2_Pin ENC_MODE1_Pin */
  GPIO_InitStruct.Pin = ENC_MODE2_Pin|ENC_MODE1_Pin;
 80010fc:	2303      	movs	r3, #3
 80010fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4827      	ldr	r0, [pc, #156]	; (80011ac <MX_GPIO_Init+0x124>)
 8001110:	f001 f8be 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_MODE_INT_Pin */
  GPIO_InitStruct.Pin = ENC_MODE_INT_Pin;
 8001114:	2301      	movs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001118:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_MODE_INT_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	4821      	ldr	r0, [pc, #132]	; (80011b0 <MX_GPIO_Init+0x128>)
 800112a:	f001 f8b1 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_MODE0_Pin */
  GPIO_InitStruct.Pin = ENC_MODE0_Pin;
 800112e:	2302      	movs	r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_MODE0_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	4619      	mov	r1, r3
 8001140:	481b      	ldr	r0, [pc, #108]	; (80011b0 <MX_GPIO_Init+0x128>)
 8001142:	f001 f8a5 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRG_OUT_Pin */
  GPIO_InitStruct.Pin = TRG_OUT_Pin;
 8001146:	2301      	movs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114e:	2302      	movs	r3, #2
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_GPIO_Init+0x120>)
 800115e:	f001 f897 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_INT_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_INT_Pin;
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_INDEX_INT_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	4619      	mov	r1, r3
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_GPIO_Init+0x124>)
 8001178:	f001 f88a 	bl	8002290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2006      	movs	r0, #6
 8001182:	f000 fcd4 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001186:	2006      	movs	r0, #6
 8001188:	f000 fced 	bl	8001b66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2017      	movs	r0, #23
 8001192:	f000 fccc 	bl	8001b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001196:	2017      	movs	r0, #23
 8001198:	f000 fce5 	bl	8001b66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENC_INDEX_INT_Pin)
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	2b80      	cmp	r3, #128	; 0x80
 80011c2:	d105      	bne.n	80011d0 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		printf("Encoder Z\r\n");
 80011c4:	4838      	ldr	r0, [pc, #224]	; (80012a8 <HAL_GPIO_EXTI_Callback+0xf4>)
 80011c6:	f003 fc17 	bl	80049f8 <puts>
		count_encoder_value();
 80011ca:	f000 f8ab 	bl	8001324 <count_encoder_value>
			break;
		}

	}

}
 80011ce:	e066      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
	else if(GPIO_Pin == ENC_MODE_INT_Pin)
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d163      	bne.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
		mode  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80011d6:	2102      	movs	r1, #2
 80011d8:	4834      	ldr	r0, [pc, #208]	; (80012ac <HAL_GPIO_EXTI_Callback+0xf8>)
 80011da:	f001 f9ed 	bl	80025b8 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011e4:	701a      	strb	r2, [r3, #0]
		mode |= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)<<1;
 80011e6:	2102      	movs	r1, #2
 80011e8:	4832      	ldr	r0, [pc, #200]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x100>)
 80011ea:	f001 f9e5 	bl	80025b8 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <HAL_GPIO_EXTI_Callback+0xfc>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001202:	701a      	strb	r2, [r3, #0]
		mode |= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)<<2;
 8001204:	2101      	movs	r1, #1
 8001206:	482b      	ldr	r0, [pc, #172]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x100>)
 8001208:	f001 f9d6 	bl	80025b8 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	b25a      	sxtb	r2, r3
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b25b      	sxtb	r3, r3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001220:	701a      	strb	r2, [r3, #0]
		printf("check Encoder working mode: %d\r\n", mode);
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	4823      	ldr	r0, [pc, #140]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x104>)
 800122a:	f003 fb7f 	bl	800492c <iprintf>
		switch(mode)
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b07      	cmp	r3, #7
 8001234:	d82e      	bhi.n	8001294 <HAL_GPIO_EXTI_Callback+0xe0>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <HAL_GPIO_EXTI_Callback+0x88>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800125d 	.word	0x0800125d
 8001240:	08001265 	.word	0x08001265
 8001244:	0800126d 	.word	0x0800126d
 8001248:	08001275 	.word	0x08001275
 800124c:	0800127d 	.word	0x0800127d
 8001250:	08001285 	.word	0x08001285
 8001254:	0800129d 	.word	0x0800129d
 8001258:	0800128d 	.word	0x0800128d
				printf("dmi-mode : START_ENCODER_MEASURE_DISTANCE\r\n");
 800125c:	4817      	ldr	r0, [pc, #92]	; (80012bc <HAL_GPIO_EXTI_Callback+0x108>)
 800125e:	f003 fbcb 	bl	80049f8 <puts>
			break;
 8001262:	e01c      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : STOP_ENCODER_MEASURE_DISTANCE\r\n");
 8001264:	4816      	ldr	r0, [pc, #88]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001266:	f003 fbc7 	bl	80049f8 <puts>
			break;
 800126a:	e018      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : START_ENCODER_CALIBRATION\r\n");
 800126c:	4815      	ldr	r0, [pc, #84]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x110>)
 800126e:	f003 fbc3 	bl	80049f8 <puts>
			break;
 8001272:	e014      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : STOP_ENCODER_CALIBRATION\r\n");
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x114>)
 8001276:	f003 fbbf 	bl	80049f8 <puts>
			break;
 800127a:	e010      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : START_DISTANCE_CALIBRATION\r\n");
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <HAL_GPIO_EXTI_Callback+0x118>)
 800127e:	f003 fbbb 	bl	80049f8 <puts>
			break;
 8001282:	e00c      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : STOP_DISTANCE_CALIBRATION\r\n");
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001286:	f003 fbb7 	bl	80049f8 <puts>
			break;
 800128a:	e008      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : ENCODER_IDLE\r\n");
 800128c:	4811      	ldr	r0, [pc, #68]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x120>)
 800128e:	f003 fbb3 	bl	80049f8 <puts>
			break;
 8001292:	e004      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
				printf("dmi-mode : ENCODER_IDLE\r\n");
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001296:	f003 fbaf 	bl	80049f8 <puts>
			break;
 800129a:	e000      	b.n	800129e <HAL_GPIO_EXTI_Callback+0xea>
			break;
 800129c:	bf00      	nop
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0800571c 	.word	0x0800571c
 80012ac:	40020000 	.word	0x40020000
 80012b0:	2000016c 	.word	0x2000016c
 80012b4:	40020800 	.word	0x40020800
 80012b8:	08005728 	.word	0x08005728
 80012bc:	0800574c 	.word	0x0800574c
 80012c0:	08005778 	.word	0x08005778
 80012c4:	080057a4 	.word	0x080057a4
 80012c8:	080057cc 	.word	0x080057cc
 80012cc:	080057f4 	.word	0x080057f4
 80012d0:	0800581c 	.word	0x0800581c
 80012d4:	08005844 	.word	0x08005844

080012d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
   if(htim == &htim1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d102      	bne.n	80012ee <HAL_TIM_PeriodElapsedCallback+0x16>
   {
    /*Encoder Overflow Handler here*/
	  printf("TIM1 Counter update\r\n");
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012ea:	f003 fb85 	bl	80049f8 <puts>
   }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000090 	.word	0x20000090
 80012fc:	08005860 	.word	0x08005860

08001300 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001308:	1d39      	adds	r1, r7, #4
 800130a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130e:	2201      	movs	r2, #1
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <__io_putchar+0x20>)
 8001312:	f002 fa97 	bl	8003844 <HAL_UART_Transmit>

  return ch;
 8001316:	687b      	ldr	r3, [r7, #4]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000120 	.word	0x20000120

08001324 <count_encoder_value>:

void count_encoder_value(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	currentCount =  __HAL_TIM_GET_COUNTER(&htim1);
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <count_encoder_value+0x20>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	461a      	mov	r2, r3
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <count_encoder_value+0x24>)
 8001332:	601a      	str	r2, [r3, #0]
	printf("currentCount : %ld\r\n", currentCount);
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <count_encoder_value+0x24>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <count_encoder_value+0x28>)
 800133c:	f003 faf6 	bl	800492c <iprintf>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000090 	.word	0x20000090
 8001348:	20000168 	.word	0x20000168
 800134c:	08005878 	.word	0x08005878

08001350 <save_100mm_encoder_counter>:

uint8_t save_100mm_encoder_counter(uint16_t VarValue)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
    HAL_FLASH_Unlock();
 800135a:	f000 fd05 	bl	8001d68 <HAL_FLASH_Unlock>

	if( EE_Init() != EE_OK)
 800135e:	f7ff f925 	bl	80005ac <EE_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <save_100mm_encoder_counter+0x1c>
	{
		Error_Handler();
 8001368:	f000 f846 	bl	80013f8 <Error_Handler>
	}

	if((EE_WriteVariable(VirtAddVarTab[0],  VarValue)) != HAL_OK)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <save_100mm_encoder_counter+0x68>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	88fa      	ldrh	r2, [r7, #6]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb6d 	bl	8000a54 <EE_WriteVariable>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <save_100mm_encoder_counter+0x34>
	{
		Error_Handler();
 8001380:	f000 f83a 	bl	80013f8 <Error_Handler>
	}

	if((EE_ReadVariable(VirtAddVarTab[0],  &VarDataTab[0])) != HAL_OK)
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <save_100mm_encoder_counter+0x68>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <save_100mm_encoder_counter+0x6c>)
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fb18 	bl	80009c0 <EE_ReadVariable>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <save_100mm_encoder_counter+0x4a>
	{
		Error_Handler();
 8001396:	f000 f82f 	bl	80013f8 <Error_Handler>
	}

	HAL_FLASH_Lock();
 800139a:	f000 fd07 	bl	8001dac <HAL_FLASH_Lock>

	if (VarValue != VarDataTab[0])
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <save_100mm_encoder_counter+0x6c>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <save_100mm_encoder_counter+0x5c>
	{
		Error_Handler();
 80013a8:	f000 f826 	bl	80013f8 <Error_Handler>
	}

	return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000170 	.word	0x20000170

080013c0 <read_100mm_encoder_counter>:

uint16_t read_100mm_encoder_counter(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	if( EE_Init() != EE_OK)
 80013c4:	f7ff f8f2 	bl	80005ac <EE_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <read_100mm_encoder_counter+0x12>
	{
		Error_Handler();
 80013ce:	f000 f813 	bl	80013f8 <Error_Handler>
	}

	if((EE_ReadVariable(VirtAddVarTab[0],  &VarDataTab[0])) != HAL_OK)
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <read_100mm_encoder_counter+0x30>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	4907      	ldr	r1, [pc, #28]	; (80013f4 <read_100mm_encoder_counter+0x34>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff faf1 	bl	80009c0 <EE_ReadVariable>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <read_100mm_encoder_counter+0x28>
	{
		Error_Handler();
 80013e4:	f000 f808 	bl	80013f8 <Error_Handler>
	}

	return VarDataTab[0];
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <read_100mm_encoder_counter+0x34>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000170 	.word	0x20000170

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_MspInit+0x4c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_MspInit+0x4c>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d134      	bne.n	80014e0 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_TIM_Encoder_MspInit+0x98>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_TIM_Encoder_MspInit+0x98>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_TIM_Encoder_MspInit+0x98>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_TIM_Encoder_MspInit+0x98>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_TIM_Encoder_MspInit+0x98>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_TIM_Encoder_MspInit+0x98>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014cc:	f000 fee0 	bl	8002290 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2019      	movs	r0, #25
 80014d6:	f000 fb2a 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014da:	2019      	movs	r0, #25
 80014dc:	f000 fb43 	bl	8001b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a45      	ldr	r2, [pc, #276]	; (8001628 <HAL_UART_MspInit+0x134>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d14b      	bne.n	80015ae <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <HAL_UART_MspInit+0x138>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a43      	ldr	r2, [pc, #268]	; (800162c <HAL_UART_MspInit+0x138>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_UART_MspInit+0x138>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_UART_MspInit+0x138>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a3c      	ldr	r2, [pc, #240]	; (800162c <HAL_UART_MspInit+0x138>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <HAL_UART_MspInit+0x138>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_UART_MspInit+0x138>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a35      	ldr	r2, [pc, #212]	; (800162c <HAL_UART_MspInit+0x138>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_UART_MspInit+0x138>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800157c:	2307      	movs	r3, #7
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	482a      	ldr	r0, [pc, #168]	; (8001630 <HAL_UART_MspInit+0x13c>)
 8001588:	f000 fe82 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159c:	2307      	movs	r3, #7
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4823      	ldr	r0, [pc, #140]	; (8001634 <HAL_UART_MspInit+0x140>)
 80015a8:	f000 fe72 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ac:	e038      	b.n	8001620 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_UART_MspInit+0x144>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d133      	bne.n	8001620 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_UART_MspInit+0x138>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <HAL_UART_MspInit+0x138>)
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_UART_MspInit+0x138>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_UART_MspInit+0x138>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	4a13      	ldr	r2, [pc, #76]	; (800162c <HAL_UART_MspInit+0x138>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6313      	str	r3, [r2, #48]	; 0x30
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_UART_MspInit+0x138>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015f0:	230c      	movs	r3, #12
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001600:	2307      	movs	r3, #7
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4809      	ldr	r0, [pc, #36]	; (8001630 <HAL_UART_MspInit+0x13c>)
 800160c:	f000 fe40 	bl	8002290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	2026      	movs	r0, #38	; 0x26
 8001616:	f000 fa8a 	bl	8001b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800161a:	2026      	movs	r0, #38	; 0x26
 800161c:	f000 faa3 	bl	8001b66 <HAL_NVIC_EnableIRQ>
}
 8001620:	bf00      	nop
 8001622:	3730      	adds	r7, #48	; 0x30
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40011000 	.word	0x40011000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	40004400 	.word	0x40004400

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f956 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_MODE_INT_Pin);
 8001694:	2001      	movs	r0, #1
 8001696:	f000 ffc1 	bl	800261c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_INDEX_INT_Pin);
 80016a2:	2080      	movs	r0, #128	; 0x80
 80016a4:	f000 ffba 	bl	800261c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016b2:	f001 fe23 	bl	80032fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000090 	.word	0x20000090

080016c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <USART2_IRQHandler+0x10>)
 80016c6:	f002 f949 	bl	800395c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000120 	.word	0x20000120

080016d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e6:	f3af 8000 	nop.w
 80016ea:	4601      	mov	r1, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf0      	blt.n	80016e6 <_read+0x12>
  }

  return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e009      	b.n	8001734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fde9 	bl	8001300 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf1      	blt.n	8001720 <_write+0x12>
  }
  return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_close>:

int _close(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176e:	605a      	str	r2, [r3, #4]
  return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_isatty>:

int _isatty(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f003 fa38 	bl	8004c54 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20020000 	.word	0x20020000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000178 	.word	0x20000178
 8001818:	200002f0 	.word	0x200002f0

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001844:	f7ff ffea 	bl	800181c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	; (8001880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800186e:	f003 f9f7 	bl	8004c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7ff fac7 	bl	8000e04 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001884:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 8001888:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800188c:	200002ec 	.word	0x200002ec

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f92b 	bl	8001b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fd9c 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f943 	bl	8001b82 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f90b 	bl	8001b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000008 	.word	0x20000008
 8001930:	20000010 	.word	0x20000010
 8001934:	2000000c 	.word	0x2000000c

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000010 	.word	0x20000010
 800195c:	2000017c 	.word	0x2000017c

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000017c 	.word	0x2000017c

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d301      	bcc.n	8001aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00f      	b.n	8001b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <SysTick_Config+0x40>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af2:	210f      	movs	r1, #15
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f7ff ff8e 	bl	8001a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <SysTick_Config+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x40>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff3e 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff8e 	bl	8001a6c <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5d 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff31 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffa2 	bl	8001ad4 <SysTick_Config>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff feda 	bl	8001960 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d008      	beq.n	8001bcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e052      	b.n	8001c72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0216 	bic.w	r2, r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <HAL_DMA_Abort+0x62>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0208 	bic.w	r2, r2, #8
 8001c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1c:	e013      	b.n	8001c46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1e:	f7ff fe9f 	bl	8001960 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d90c      	bls.n	8001c46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2203      	movs	r2, #3
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e015      	b.n	8001c72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e4      	bne.n	8001c1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	223f      	movs	r2, #63	; 0x3f
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d004      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e00c      	b.n	8001cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_FLASH_Program+0xa0>)
 8001cd4:	7e1b      	ldrb	r3, [r3, #24]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_FLASH_Program+0x1e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e03b      	b.n	8001d56 <HAL_FLASH_Program+0x96>
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_FLASH_Program+0xa0>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ce4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ce8:	f000 f870 	bl	8001dcc <FLASH_WaitForLastOperation>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12b      	bne.n	8001d4e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001cfc:	783b      	ldrb	r3, [r7, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	68b8      	ldr	r0, [r7, #8]
 8001d02:	f000 f91b 	bl	8001f3c <FLASH_Program_Byte>
 8001d06:	e016      	b.n	8001d36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d105      	bne.n	8001d1a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d0e:	883b      	ldrh	r3, [r7, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	68b8      	ldr	r0, [r7, #8]
 8001d14:	f000 f8ee 	bl	8001ef4 <FLASH_Program_HalfWord>
 8001d18:	e00d      	b.n	8001d36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d105      	bne.n	8001d2c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	68b8      	ldr	r0, [r7, #8]
 8001d26:	f000 f8c3 	bl	8001eb0 <FLASH_Program_Word>
 8001d2a:	e004      	b.n	8001d36 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f000 f88b 	bl	8001e4c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d3a:	f000 f847 	bl	8001dcc <FLASH_WaitForLastOperation>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_FLASH_Program+0xa4>)
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_FLASH_Program+0xa4>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <HAL_FLASH_Program+0xa0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000180 	.word	0x20000180
 8001d64:	40023c00 	.word	0x40023c00

08001d68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_FLASH_Unlock+0x38>)
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da0b      	bge.n	8001d92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_FLASH_Unlock+0x38>)
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_FLASH_Unlock+0x3c>)
 8001d7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_FLASH_Unlock+0x38>)
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_FLASH_Unlock+0x40>)
 8001d84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_FLASH_Unlock+0x38>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da01      	bge.n	8001d92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40023c00 	.word	0x40023c00
 8001da4:	45670123 	.word	0x45670123
 8001da8:	cdef89ab 	.word	0xcdef89ab

08001dac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_FLASH_Lock+0x1c>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_FLASH_Lock+0x1c>)
 8001db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <FLASH_WaitForLastOperation+0x78>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dde:	f7ff fdbf 	bl	8001960 <HAL_GetTick>
 8001de2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001de4:	e010      	b.n	8001e08 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d00c      	beq.n	8001e08 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <FLASH_WaitForLastOperation+0x38>
 8001df4:	f7ff fdb4 	bl	8001960 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d201      	bcs.n	8001e08 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e019      	b.n	8001e3c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <FLASH_WaitForLastOperation+0x7c>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e8      	bne.n	8001de6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <FLASH_WaitForLastOperation+0x7c>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <FLASH_WaitForLastOperation+0x7c>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <FLASH_WaitForLastOperation+0x7c>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e32:	f000 f8a5 	bl	8001f80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
  
}  
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000180 	.word	0x20000180
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <FLASH_Program_DoubleWord+0x60>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <FLASH_Program_DoubleWord+0x60>)
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <FLASH_Program_DoubleWord+0x60>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <FLASH_Program_DoubleWord+0x60>)
 8001e6a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <FLASH_Program_DoubleWord+0x60>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <FLASH_Program_DoubleWord+0x60>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001e82:	f3bf 8f6f 	isb	sy
}
 8001e86:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	000a      	movs	r2, r1
 8001e96:	2300      	movs	r3, #0
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	3104      	adds	r1, #4
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <FLASH_Program_Word+0x40>)
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <FLASH_Program_Word+0x40>)
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <FLASH_Program_Word+0x40>)
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <FLASH_Program_Word+0x40>)
 8001ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <FLASH_Program_Word+0x40>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <FLASH_Program_Word+0x40>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40023c00 	.word	0x40023c00

08001ef4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <FLASH_Program_HalfWord+0x44>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <FLASH_Program_HalfWord+0x44>)
 8001f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <FLASH_Program_HalfWord+0x44>)
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <FLASH_Program_HalfWord+0x44>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <FLASH_Program_HalfWord+0x44>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <FLASH_Program_HalfWord+0x44>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	801a      	strh	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <FLASH_Program_Byte+0x40>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <FLASH_Program_Byte+0x40>)
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <FLASH_Program_Byte+0x40>)
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <FLASH_Program_Byte+0x40>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <FLASH_Program_Byte+0x40>)
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <FLASH_Program_Byte+0x40>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	701a      	strb	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001f9a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001fb8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001fd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	4a15      	ldr	r2, [pc, #84]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8001ff4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8002012:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8002016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f043 0320 	orr.w	r3, r3, #32
 8002030:	4a05      	ldr	r2, [pc, #20]	; (8002048 <FLASH_SetErrorCode+0xc8>)
 8002032:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <FLASH_SetErrorCode+0xc4>)
 8002036:	2202      	movs	r2, #2
 8002038:	60da      	str	r2, [r3, #12]
  }
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40023c00 	.word	0x40023c00
 8002048:	20000180 	.word	0x20000180

0800204c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_FLASHEx_Erase+0xd8>)
 8002060:	7e1b      	ldrb	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_FLASHEx_Erase+0x1e>
 8002066:	2302      	movs	r3, #2
 8002068:	e058      	b.n	800211c <HAL_FLASHEx_Erase+0xd0>
 800206a:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_FLASHEx_Erase+0xd8>)
 800206c:	2201      	movs	r2, #1
 800206e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002070:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002074:	f7ff feaa 	bl	8001dcc <FLASH_WaitForLastOperation>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d148      	bne.n	8002114 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d115      	bne.n	80020be <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f000 f844 	bl	800212c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020a8:	f7ff fe90 	bl	8001dcc <FLASH_WaitForLastOperation>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_FLASHEx_Erase+0xdc>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_FLASHEx_Erase+0xdc>)
 80020b6:	f023 0304 	bic.w	r3, r3, #4
 80020ba:	6113      	str	r3, [r2, #16]
 80020bc:	e028      	b.n	8002110 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	e01c      	b.n	8002100 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	68b8      	ldr	r0, [r7, #8]
 80020d0:	f000 f850 	bl	8002174 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020d8:	f7ff fe78 	bl	8001dcc <FLASH_WaitForLastOperation>
 80020dc:	4603      	mov	r3, r0
 80020de:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_FLASHEx_Erase+0xdc>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_FLASHEx_Erase+0xdc>)
 80020e6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80020ea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	601a      	str	r2, [r3, #0]
          break;
 80020f8:	e00a      	b.n	8002110 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4413      	add	r3, r2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d3da      	bcc.n	80020c6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002110:	f000 f878 	bl	8002204 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_FLASHEx_Erase+0xd8>)
 8002116:	2200      	movs	r2, #0
 8002118:	761a      	strb	r2, [r3, #24]

  return status;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000180 	.word	0x20000180
 8002128:	40023c00 	.word	0x40023c00

0800212c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <FLASH_MassErase+0x44>)
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <FLASH_MassErase+0x44>)
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <FLASH_MassErase+0x44>)
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <FLASH_MassErase+0x44>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <FLASH_MassErase+0x44>)
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	4313      	orrs	r3, r2
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <FLASH_MassErase+0x44>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6113      	str	r3, [r2, #16]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e010      	b.n	80021b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d103      	bne.n	800219e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e009      	b.n	80021b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d103      	bne.n	80021ac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80021a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	e002      	b.n	80021b2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80021ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	490f      	ldr	r1, [pc, #60]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4313      	orrs	r3, r2
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <FLASH_Erase_Sector+0x8c>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f2:	6113      	str	r3, [r2, #16]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40023c00 	.word	0x40023c00

08002204 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <FLASH_FlushCaches+0x88>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d017      	beq.n	8002244 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <FLASH_FlushCaches+0x88>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1c      	ldr	r2, [pc, #112]	; (800228c <FLASH_FlushCaches+0x88>)
 800221a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <FLASH_FlushCaches+0x88>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <FLASH_FlushCaches+0x88>)
 8002226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <FLASH_FlushCaches+0x88>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a16      	ldr	r2, [pc, #88]	; (800228c <FLASH_FlushCaches+0x88>)
 8002232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002236:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <FLASH_FlushCaches+0x88>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a13      	ldr	r2, [pc, #76]	; (800228c <FLASH_FlushCaches+0x88>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002242:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <FLASH_FlushCaches+0x88>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <FLASH_FlushCaches+0x88>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <FLASH_FlushCaches+0x88>)
 8002256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800225a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <FLASH_FlushCaches+0x88>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <FLASH_FlushCaches+0x88>)
 8002262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <FLASH_FlushCaches+0x88>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a07      	ldr	r2, [pc, #28]	; (800228c <FLASH_FlushCaches+0x88>)
 800226e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002272:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <FLASH_FlushCaches+0x88>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <FLASH_FlushCaches+0x88>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227e:	6013      	str	r3, [r2, #0]
  }
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e165      	b.n	8002578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 8154 	bne.w	8002572 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d017      	beq.n	8002380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d123      	bne.n	80023d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80ae 	beq.w	8002572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <HAL_GPIO_Init+0x300>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a5c      	ldr	r2, [pc, #368]	; (8002590 <HAL_GPIO_Init+0x300>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b5a      	ldr	r3, [pc, #360]	; (8002590 <HAL_GPIO_Init+0x300>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4f      	ldr	r2, [pc, #316]	; (8002598 <HAL_GPIO_Init+0x308>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d025      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4e      	ldr	r2, [pc, #312]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01f      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4d      	ldr	r2, [pc, #308]	; (80025a0 <HAL_GPIO_Init+0x310>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4c      	ldr	r2, [pc, #304]	; (80025a4 <HAL_GPIO_Init+0x314>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0x20e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_GPIO_Init+0x318>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00d      	beq.n	800249a <HAL_GPIO_Init+0x20a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_GPIO_Init+0x31c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <HAL_GPIO_Init+0x206>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a49      	ldr	r2, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x320>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_GPIO_Init+0x202>
 800248e:	2306      	movs	r3, #6
 8002490:	e00c      	b.n	80024ac <HAL_GPIO_Init+0x21c>
 8002492:	2307      	movs	r3, #7
 8002494:	e00a      	b.n	80024ac <HAL_GPIO_Init+0x21c>
 8002496:	2305      	movs	r3, #5
 8002498:	e008      	b.n	80024ac <HAL_GPIO_Init+0x21c>
 800249a:	2304      	movs	r3, #4
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x21c>
 800249e:	2303      	movs	r3, #3
 80024a0:	e004      	b.n	80024ac <HAL_GPIO_Init+0x21c>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e002      	b.n	80024ac <HAL_GPIO_Init+0x21c>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_GPIO_Init+0x21c>
 80024aa:	2300      	movs	r3, #0
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f002 0203 	and.w	r2, r2, #3
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	4093      	lsls	r3, r2
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024bc:	4935      	ldr	r1, [pc, #212]	; (8002594 <HAL_GPIO_Init+0x304>)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_GPIO_Init+0x324>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ee:	4a31      	ldr	r2, [pc, #196]	; (80025b4 <HAL_GPIO_Init+0x324>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_GPIO_Init+0x324>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_GPIO_Init+0x324>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002542:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_GPIO_Init+0x324>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3301      	adds	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b0f      	cmp	r3, #15
 800257c:	f67f ae96 	bls.w	80022ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	40013800 	.word	0x40013800
 8002598:	40020000 	.word	0x40020000
 800259c:	40020400 	.word	0x40020400
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40021400 	.word	0x40021400
 80025b0:	40021800 	.word	0x40021800
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fdba 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_PWREx_EnableOverDrive+0x90>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002678:	f7ff f972 	bl	8001960 <HAL_GetTick>
 800267c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800267e:	e009      	b.n	8002694 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002680:	f7ff f96e 	bl	8001960 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268e:	d901      	bls.n	8002694 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e01f      	b.n	80026d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d1ee      	bne.n	8002680 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a8:	f7ff f95a 	bl	8001960 <HAL_GetTick>
 80026ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026ae:	e009      	b.n	80026c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026b0:	f7ff f956 	bl	8001960 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026be:	d901      	bls.n	80026c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e007      	b.n	80026d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d0:	d1ee      	bne.n	80026b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	420e0040 	.word	0x420e0040
 80026e4:	40007000 	.word	0x40007000
 80026e8:	420e0044 	.word	0x420e0044

080026ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0cc      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d90c      	bls.n	8002728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0b8      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002740:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800274a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002758:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a52      	ldr	r2, [pc, #328]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	494d      	ldr	r1, [pc, #308]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d044      	beq.n	800280c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b47      	ldr	r3, [pc, #284]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d119      	bne.n	80027ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e07f      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06f      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e067      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ca:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f023 0203 	bic.w	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4934      	ldr	r1, [pc, #208]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027dc:	f7ff f8c0 	bl	8001960 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7ff f8bc 	bl	8001960 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e04f      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 020c 	and.w	r2, r3, #12
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	429a      	cmp	r2, r3
 800280a:	d1eb      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d20c      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e032      	b.n	800289a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4916      	ldr	r1, [pc, #88]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	490e      	ldr	r1, [pc, #56]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002872:	f000 f855 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8002876:	4602      	mov	r2, r0
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	490a      	ldr	r1, [pc, #40]	; (80028ac <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	5ccb      	ldrb	r3, [r1, r3]
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f820 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023c00 	.word	0x40023c00
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08005890 	.word	0x08005890
 80028b0:	20000008 	.word	0x20000008
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCC_GetHCLKFreq+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000008 	.word	0x20000008

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d4:	f7ff fff0 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0a9b      	lsrs	r3, r3, #10
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	080058a0 	.word	0x080058a0

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028fc:	f7ff ffdc 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0b5b      	lsrs	r3, r3, #13
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	080058a0 	.word	0x080058a0

08002920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002924:	b0a6      	sub	sp, #152	; 0x98
 8002926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002946:	4bc8      	ldr	r3, [pc, #800]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b0c      	cmp	r3, #12
 8002950:	f200 817e 	bhi.w	8002c50 <HAL_RCC_GetSysClockFreq+0x330>
 8002954:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	08002991 	.word	0x08002991
 8002960:	08002c51 	.word	0x08002c51
 8002964:	08002c51 	.word	0x08002c51
 8002968:	08002c51 	.word	0x08002c51
 800296c:	08002999 	.word	0x08002999
 8002970:	08002c51 	.word	0x08002c51
 8002974:	08002c51 	.word	0x08002c51
 8002978:	08002c51 	.word	0x08002c51
 800297c:	080029a1 	.word	0x080029a1
 8002980:	08002c51 	.word	0x08002c51
 8002984:	08002c51 	.word	0x08002c51
 8002988:	08002c51 	.word	0x08002c51
 800298c:	08002b0b 	.word	0x08002b0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4bb6      	ldr	r3, [pc, #728]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002996:	e15f      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4bb5      	ldr	r3, [pc, #724]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x350>)
 800299a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800299e:	e15b      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a0:	4bb1      	ldr	r3, [pc, #708]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ac:	4bae      	ldr	r3, [pc, #696]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d031      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b8:	4bab      	ldr	r3, [pc, #684]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	2200      	movs	r2, #0
 80029c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ca:	663b      	str	r3, [r7, #96]	; 0x60
 80029cc:	2300      	movs	r3, #0
 80029ce:	667b      	str	r3, [r7, #100]	; 0x64
 80029d0:	4ba7      	ldr	r3, [pc, #668]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x350>)
 80029d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029d6:	462a      	mov	r2, r5
 80029d8:	fb03 f202 	mul.w	r2, r3, r2
 80029dc:	2300      	movs	r3, #0
 80029de:	4621      	mov	r1, r4
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	4aa2      	ldr	r2, [pc, #648]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x350>)
 80029e8:	4621      	mov	r1, r4
 80029ea:	fba1 1202 	umull	r1, r2, r1, r2
 80029ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029f0:	460a      	mov	r2, r1
 80029f2:	67ba      	str	r2, [r7, #120]	; 0x78
 80029f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029f6:	4413      	add	r3, r2
 80029f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fe:	2200      	movs	r2, #0
 8002a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002a0c:	f7fd fc50 	bl	80002b0 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a1a:	e064      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	2200      	movs	r2, #0
 8002a24:	653b      	str	r3, [r7, #80]	; 0x50
 8002a26:	657a      	str	r2, [r7, #84]	; 0x54
 8002a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a30:	2300      	movs	r3, #0
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002a38:	4622      	mov	r2, r4
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4a:	0150      	lsls	r0, r2, #5
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4621      	mov	r1, r4
 8002a52:	1a51      	subs	r1, r2, r1
 8002a54:	6139      	str	r1, [r7, #16]
 8002a56:	4629      	mov	r1, r5
 8002a58:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a6a:	4659      	mov	r1, fp
 8002a6c:	018b      	lsls	r3, r1, #6
 8002a6e:	4651      	mov	r1, sl
 8002a70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a74:	4651      	mov	r1, sl
 8002a76:	018a      	lsls	r2, r1, #6
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a7e:	4659      	mov	r1, fp
 8002a80:	eb63 0901 	sbc.w	r9, r3, r1
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a98:	4690      	mov	r8, r2
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	eb18 0303 	adds.w	r3, r8, r3
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	eb49 0303 	adc.w	r3, r9, r3
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ab8:	4629      	mov	r1, r5
 8002aba:	028b      	lsls	r3, r1, #10
 8002abc:	4621      	mov	r1, r4
 8002abe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	028a      	lsls	r2, r1, #10
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ace:	2200      	movs	r2, #0
 8002ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad2:	647a      	str	r2, [r7, #68]	; 0x44
 8002ad4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ad8:	f7fd fbea 	bl	80002b0 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	3301      	adds	r3, #1
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b08:	e0a6      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0a:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b16:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d02a      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b22:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	2200      	movs	r2, #0
 8002b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b34:	2100      	movs	r1, #0
 8002b36:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b38:	fb03 f201 	mul.w	r2, r3, r1
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	fb00 f303 	mul.w	r3, r0, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b46:	fba0 1202 	umull	r1, r2, r0, r2
 8002b4a:	677a      	str	r2, [r7, #116]	; 0x74
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	673a      	str	r2, [r7, #112]	; 0x70
 8002b50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b52:	4413      	add	r3, r2
 8002b54:	677b      	str	r3, [r7, #116]	; 0x74
 8002b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5e:	637a      	str	r2, [r7, #52]	; 0x34
 8002b60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002b68:	f7fd fba2 	bl	80002b0 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b76:	e05b      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	2200      	movs	r2, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	f04f 0000 	mov.w	r0, #0
 8002b9c:	f04f 0100 	mov.w	r1, #0
 8002ba0:	0159      	lsls	r1, r3, #5
 8002ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba6:	0150      	lsls	r0, r2, #5
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4641      	mov	r1, r8
 8002bae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bcc:	ebb2 040a 	subs.w	r4, r2, sl
 8002bd0:	eb63 050b 	sbc.w	r5, r3, fp
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	00eb      	lsls	r3, r5, #3
 8002bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be2:	00e2      	lsls	r2, r4, #3
 8002be4:	4614      	mov	r4, r2
 8002be6:	461d      	mov	r5, r3
 8002be8:	4643      	mov	r3, r8
 8002bea:	18e3      	adds	r3, r4, r3
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	464b      	mov	r3, r9
 8002bf0:	eb45 0303 	adc.w	r3, r5, r3
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c02:	4629      	mov	r1, r5
 8002c04:	028b      	lsls	r3, r1, #10
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	028a      	lsls	r2, r1, #10
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	61fa      	str	r2, [r7, #28]
 8002c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c22:	f7fd fb45 	bl	80002b0 <__aeabi_uldivmod>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0f1b      	lsrs	r3, r3, #28
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002c4e:	e003      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3798      	adds	r7, #152	; 0x98
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	017d7840 	.word	0x017d7840

08002c74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e28d      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8083 	beq.w	8002d9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c94:	4b94      	ldr	r3, [pc, #592]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca0:	4b91      	ldr	r3, [pc, #580]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cac:	4b8e      	ldr	r3, [pc, #568]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d112      	bne.n	8002cec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd2:	d10b      	bne.n	8002cec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	4b84      	ldr	r3, [pc, #528]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d05b      	beq.n	8002d98 <HAL_RCC_OscConfig+0x124>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d157      	bne.n	8002d98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e25a      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCC_OscConfig+0x90>
 8002cf6:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7b      	ldr	r2, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e01d      	b.n	8002d40 <HAL_RCC_OscConfig+0xcc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0xb4>
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a72      	ldr	r2, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0xcc>
 8002d28:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b6c      	ldr	r3, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a6b      	ldr	r2, [pc, #428]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fe0a 	bl	8001960 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fe06 	bl	8001960 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e21f      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0xdc>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fdf6 	bl	8001960 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d78:	f7fe fdf2 	bl	8001960 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e20b      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	4b57      	ldr	r3, [pc, #348]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x104>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d06f      	beq.n	8002e86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002da6:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d017      	beq.n	8002de2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db2:	4b4d      	ldr	r3, [pc, #308]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d105      	bne.n	8002dca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x186>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1d3      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4937      	ldr	r1, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x278>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fd9f 	bl	8001960 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe fd9b 	bl	8001960 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1b4      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4925      	ldr	r1, [pc, #148]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x278>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe fd7e 	bl	8001960 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe fd7a 	bl	8001960 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e193      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d036      	beq.n	8002f00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x27c>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fd5e 	bl	8001960 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fd5a 	bl	8001960 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e173      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x234>
 8002ec6:	e01b      	b.n	8002f00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_OscConfig+0x27c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7fe fd47 	bl	8001960 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fd43 	bl	8001960 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d907      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e15c      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ea      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8097 	beq.w	800303c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b83      	ldr	r3, [pc, #524]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a7e      	ldr	r2, [pc, #504]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b79      	ldr	r3, [pc, #484]	; (8003124 <HAL_RCC_OscConfig+0x4b0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b76      	ldr	r3, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0x4b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x4b0>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fd03 	bl	8001960 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe fcff 	bl	8001960 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e118      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <HAL_RCC_OscConfig+0x4b0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x31e>
 8002f84:	4b66      	ldr	r3, [pc, #408]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e01c      	b.n	8002fcc <HAL_RCC_OscConfig+0x358>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x340>
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a60      	ldr	r2, [pc, #384]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a5d      	ldr	r2, [pc, #372]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0x358>
 8002fb4:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a59      	ldr	r2, [pc, #356]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b57      	ldr	r3, [pc, #348]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a56      	ldr	r2, [pc, #344]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002fc6:	f023 0304 	bic.w	r3, r3, #4
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fcc4 	bl	8001960 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fcc0 	bl	8001960 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0d7      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCC_OscConfig+0x368>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fe fcae 	bl	8001960 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe fcaa 	bl	8001960 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0c1      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	4b40      	ldr	r3, [pc, #256]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80ad 	beq.w	80031a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d060      	beq.n	8003114 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d145      	bne.n	80030e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_RCC_OscConfig+0x4b4>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fc7e 	bl	8001960 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fc7a 	bl	8001960 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e093      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	491b      	ldr	r1, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x4b4>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe fc4f 	bl	8001960 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fe fc4b 	bl	8001960 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e064      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x452>
 80030e4:	e05c      	b.n	80031a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_RCC_OscConfig+0x4b4>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fc38 	bl	8001960 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fc34 	bl	8001960 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e04d      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x480>
 8003112:	e045      	b.n	80031a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e040      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
 8003120:	40023800 	.word	0x40023800
 8003124:	40007000 	.word	0x40007000
 8003128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800312c:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <HAL_RCC_OscConfig+0x538>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d030      	beq.n	800319c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d129      	bne.n	800319c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d122      	bne.n	800319c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003164:	4293      	cmp	r3, r2
 8003166:	d119      	bne.n	800319c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	3b01      	subs	r3, #1
 8003176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d10f      	bne.n	800319c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e097      	b.n	80032f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d106      	bne.n	80031de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fe f93b 	bl	8001454 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f4:	f023 0307 	bic.w	r3, r3, #7
 80031f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f000 f991 	bl	800352c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	4313      	orrs	r3, r2
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003250:	f023 030c 	bic.w	r3, r3, #12
 8003254:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800325c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	4313      	orrs	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	011a      	lsls	r2, r3, #4
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	031b      	lsls	r3, r3, #12
 8003280:	4313      	orrs	r3, r2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003296:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4313      	orrs	r3, r2
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0202 	mvn.w	r2, #2
 8003330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8d2 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8c4 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8d5 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d020      	beq.n	80033ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0204 	mvn.w	r2, #4
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8ac 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f89e 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f8af 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0208 	mvn.w	r2, #8
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f886 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f878 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f889 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d020      	beq.n	8003444 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01b      	beq.n	8003444 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0210 	mvn.w	r2, #16
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2208      	movs	r2, #8
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f860 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f852 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f863 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0201 	mvn.w	r2, #1
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd ff38 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f982 	bl	8003790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f834 	bl	8003518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0220 	mvn.w	r2, #32
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f954 	bl	800377c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a46      	ldr	r2, [pc, #280]	; (8003658 <TIM_Base_SetConfig+0x12c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d00f      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a43      	ldr	r2, [pc, #268]	; (800365c <TIM_Base_SetConfig+0x130>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00b      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a42      	ldr	r2, [pc, #264]	; (8003660 <TIM_Base_SetConfig+0x134>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a41      	ldr	r2, [pc, #260]	; (8003664 <TIM_Base_SetConfig+0x138>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <TIM_Base_SetConfig+0x13c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a35      	ldr	r2, [pc, #212]	; (8003658 <TIM_Base_SetConfig+0x12c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02b      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d027      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a32      	ldr	r2, [pc, #200]	; (800365c <TIM_Base_SetConfig+0x130>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d023      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a31      	ldr	r2, [pc, #196]	; (8003660 <TIM_Base_SetConfig+0x134>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a30      	ldr	r2, [pc, #192]	; (8003664 <TIM_Base_SetConfig+0x138>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01b      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <TIM_Base_SetConfig+0x13c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d017      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2e      	ldr	r2, [pc, #184]	; (800366c <TIM_Base_SetConfig+0x140>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <TIM_Base_SetConfig+0x144>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00f      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <TIM_Base_SetConfig+0x148>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <TIM_Base_SetConfig+0x14c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2a      	ldr	r2, [pc, #168]	; (800367c <TIM_Base_SetConfig+0x150>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a29      	ldr	r2, [pc, #164]	; (8003680 <TIM_Base_SetConfig+0x154>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a10      	ldr	r2, [pc, #64]	; (8003658 <TIM_Base_SetConfig+0x12c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_Base_SetConfig+0xf8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <TIM_Base_SetConfig+0x13c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d103      	bne.n	800362c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d105      	bne.n	800364a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f023 0201 	bic.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	611a      	str	r2, [r3, #16]
  }
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40010400 	.word	0x40010400
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800
 8003678:	40001800 	.word	0x40001800
 800367c:	40001c00 	.word	0x40001c00
 8003680:	40002000 	.word	0x40002000

08003684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e05a      	b.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a21      	ldr	r2, [pc, #132]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d01d      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a15      	ldr	r2, [pc, #84]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10c      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4313      	orrs	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e042      	b.n	800383c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fe92 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fd69 	bl	80042c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800381c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b20      	cmp	r3, #32
 8003862:	d175      	bne.n	8003950 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_UART_Transmit+0x2c>
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e06e      	b.n	8003952 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2221      	movs	r2, #33	; 0x21
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003882:	f7fe f86d 	bl	8001960 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389c:	d108      	bne.n	80038b0 <HAL_UART_Transmit+0x6c>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e003      	b.n	80038b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038b8:	e02e      	b.n	8003918 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fb05 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e03a      	b.n	8003952 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10b      	bne.n	80038fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	3302      	adds	r3, #2
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e007      	b.n	800390a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	3301      	adds	r3, #1
 8003908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1cb      	bne.n	80038ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	2140      	movs	r1, #64	; 0x40
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fad1 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e006      	b.n	8003952 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b0ba      	sub	sp, #232	; 0xe8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800399a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_UART_IRQHandler+0x66>
 80039ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fbc2 	bl	8004144 <UART_Receive_IT>
      return;
 80039c0:	e25b      	b.n	8003e7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80de 	beq.w	8003b88 <HAL_UART_IRQHandler+0x22c>
 80039cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80d1 	beq.w	8003b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_UART_IRQHandler+0xae>
 80039f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_UART_IRQHandler+0xd2>
 8003a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f043 0202 	orr.w	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_UART_IRQHandler+0xf6>
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f043 0204 	orr.w	r2, r3, #4
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d011      	beq.n	8003a82 <HAL_UART_IRQHandler+0x126>
 8003a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f043 0208 	orr.w	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 81f2 	beq.w	8003e70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_UART_IRQHandler+0x14e>
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fb4d 	bl	8004144 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d103      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x17a>
 8003ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d04f      	beq.n	8003b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa55 	bl	8003f86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d141      	bne.n	8003b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1d9      	bne.n	8003aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d013      	beq.n	8003b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	4a7e      	ldr	r2, [pc, #504]	; (8003d3c <HAL_UART_IRQHandler+0x3e0>)
 8003b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe f895 	bl	8001c7a <HAL_DMA_Abort_IT>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b60:	4610      	mov	r0, r2
 8003b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	e00e      	b.n	8003b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f99e 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	e00a      	b.n	8003b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f99a 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e006      	b.n	8003b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f996 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b82:	e175      	b.n	8003e70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	bf00      	nop
    return;
 8003b86:	e173      	b.n	8003e70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	f040 814f 	bne.w	8003e30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8148 	beq.w	8003e30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8141 	beq.w	8003e30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	f040 80b6 	bne.w	8003d40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8145 	beq.w	8003e74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	f080 813e 	bcs.w	8003e74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0a:	f000 8088 	beq.w	8003d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1d9      	bne.n	8003c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e1      	bne.n	8003c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e3      	bne.n	8003c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cee:	f023 0310 	bic.w	r3, r3, #16
 8003cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e3      	bne.n	8003cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fd ff3e 	bl	8001b9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f8c1 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d3a:	e09b      	b.n	8003e74 <HAL_UART_IRQHandler+0x518>
 8003d3c:	0800404d 	.word	0x0800404d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 808e 	beq.w	8003e78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8089 	beq.w	8003e78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e3      	bne.n	8003d66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	623b      	str	r3, [r7, #32]
   return(result);
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3314      	adds	r3, #20
 8003dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0310 	bic.w	r3, r3, #16
 8003dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e08:	61fa      	str	r2, [r7, #28]
 8003e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	69b9      	ldr	r1, [r7, #24]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	617b      	str	r3, [r7, #20]
   return(result);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e3      	bne.n	8003de4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f847 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e2e:	e023      	b.n	8003e78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_UART_IRQHandler+0x4f4>
 8003e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f913 	bl	8004074 <UART_Transmit_IT>
    return;
 8003e4e:	e014      	b.n	8003e7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00e      	beq.n	8003e7a <HAL_UART_IRQHandler+0x51e>
 8003e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f953 	bl	8004114 <UART_EndTransmit_IT>
    return;
 8003e6e:	e004      	b.n	8003e7a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e70:	bf00      	nop
 8003e72:	e002      	b.n	8003e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e78:	bf00      	nop
  }
}
 8003e7a:	37e8      	adds	r7, #232	; 0xe8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	e03b      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d037      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fd fd37 	bl	8001960 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e03a      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d023      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b80      	cmp	r3, #128	; 0x80
 8003f1a:	d020      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d01d      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d116      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f81d 	bl	8003f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2208      	movs	r2, #8
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00f      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d0b4      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b095      	sub	sp, #84	; 0x54
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fae:	643a      	str	r2, [r7, #64]	; 0x40
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e5      	bne.n	8003f8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d119      	bne.n	8004032 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	60bb      	str	r3, [r7, #8]
   return(result);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f023 0310 	bic.w	r3, r3, #16
 8004014:	647b      	str	r3, [r7, #68]	; 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800401e:	61ba      	str	r2, [r7, #24]
 8004020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6979      	ldr	r1, [r7, #20]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	613b      	str	r3, [r7, #16]
   return(result);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e5      	bne.n	8003ffe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004040:	bf00      	nop
 8004042:	3754      	adds	r7, #84	; 0x54
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff ff1e 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b21      	cmp	r3, #33	; 0x21
 8004086:	d13e      	bne.n	8004106 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d114      	bne.n	80040bc <UART_Transmit_IT+0x48>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d110      	bne.n	80040bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]
 80040ba:	e008      	b.n	80040ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	1c59      	adds	r1, r3, #1
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6211      	str	r1, [r2, #32]
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4619      	mov	r1, r3
 80040dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004100:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fea3 	bl	8003e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08c      	sub	sp, #48	; 0x30
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b22      	cmp	r3, #34	; 0x22
 8004156:	f040 80ae 	bne.w	80042b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d117      	bne.n	8004194 <UART_Receive_IT+0x50>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d113      	bne.n	8004194 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	b29b      	uxth	r3, r3
 800417e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004182:	b29a      	uxth	r2, r3
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
 8004192:	e026      	b.n	80041e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	d007      	beq.n	80041b8 <UART_Receive_IT+0x74>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <UART_Receive_IT+0x82>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e008      	b.n	80041d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4619      	mov	r1, r3
 80041f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d15d      	bne.n	80042b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0220 	bic.w	r2, r2, #32
 8004204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004214:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	2b01      	cmp	r3, #1
 800423a:	d135      	bne.n	80042a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f023 0310 	bic.w	r3, r3, #16
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	623a      	str	r2, [r7, #32]
 8004264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	69f9      	ldr	r1, [r7, #28]
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b10      	cmp	r3, #16
 8004282:	d10a      	bne.n	800429a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff fe0b 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
 80042a6:	e002      	b.n	80042ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fdf3 	bl	8003e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e002      	b.n	80042b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3730      	adds	r7, #48	; 0x30
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c4:	b0c0      	sub	sp, #256	; 0x100
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	ea40 0301 	orr.w	r3, r0, r1
 80042e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	431a      	orrs	r2, r3
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004318:	f021 010c 	bic.w	r1, r1, #12
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004326:	430b      	orrs	r3, r1
 8004328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	6999      	ldr	r1, [r3, #24]
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	ea40 0301 	orr.w	r3, r0, r1
 8004346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b8f      	ldr	r3, [pc, #572]	; (800458c <UART_SetConfig+0x2cc>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d005      	beq.n	8004360 <UART_SetConfig+0xa0>
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b8d      	ldr	r3, [pc, #564]	; (8004590 <UART_SetConfig+0x2d0>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d104      	bne.n	800436a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004360:	f7fe faca 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8004364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004368:	e003      	b.n	8004372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800436a:	f7fe fab1 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 800436e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	f040 810c 	bne.w	8004598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800438a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800438e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004392:	4622      	mov	r2, r4
 8004394:	462b      	mov	r3, r5
 8004396:	1891      	adds	r1, r2, r2
 8004398:	65b9      	str	r1, [r7, #88]	; 0x58
 800439a:	415b      	adcs	r3, r3
 800439c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043a2:	4621      	mov	r1, r4
 80043a4:	eb12 0801 	adds.w	r8, r2, r1
 80043a8:	4629      	mov	r1, r5
 80043aa:	eb43 0901 	adc.w	r9, r3, r1
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c2:	4690      	mov	r8, r2
 80043c4:	4699      	mov	r9, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	eb18 0303 	adds.w	r3, r8, r3
 80043cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043d0:	462b      	mov	r3, r5
 80043d2:	eb49 0303 	adc.w	r3, r9, r3
 80043d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043ee:	460b      	mov	r3, r1
 80043f0:	18db      	adds	r3, r3, r3
 80043f2:	653b      	str	r3, [r7, #80]	; 0x50
 80043f4:	4613      	mov	r3, r2
 80043f6:	eb42 0303 	adc.w	r3, r2, r3
 80043fa:	657b      	str	r3, [r7, #84]	; 0x54
 80043fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004404:	f7fb ff54 	bl	80002b0 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4b61      	ldr	r3, [pc, #388]	; (8004594 <UART_SetConfig+0x2d4>)
 800440e:	fba3 2302 	umull	r2, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	011c      	lsls	r4, r3, #4
 8004416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	1891      	adds	r1, r2, r2
 800442e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004430:	415b      	adcs	r3, r3
 8004432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004438:	4641      	mov	r1, r8
 800443a:	eb12 0a01 	adds.w	sl, r2, r1
 800443e:	4649      	mov	r1, r9
 8004440:	eb43 0b01 	adc.w	fp, r3, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004458:	4692      	mov	sl, r2
 800445a:	469b      	mov	fp, r3
 800445c:	4643      	mov	r3, r8
 800445e:	eb1a 0303 	adds.w	r3, sl, r3
 8004462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004466:	464b      	mov	r3, r9
 8004468:	eb4b 0303 	adc.w	r3, fp, r3
 800446c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800447c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004484:	460b      	mov	r3, r1
 8004486:	18db      	adds	r3, r3, r3
 8004488:	643b      	str	r3, [r7, #64]	; 0x40
 800448a:	4613      	mov	r3, r2
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
 8004492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800449a:	f7fb ff09 	bl	80002b0 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <UART_SetConfig+0x2d4>)
 80044a6:	fba3 2301 	umull	r2, r3, r3, r1
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2264      	movs	r2, #100	; 0x64
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	1acb      	subs	r3, r1, r3
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ba:	4b36      	ldr	r3, [pc, #216]	; (8004594 <UART_SetConfig+0x2d4>)
 80044bc:	fba3 2302 	umull	r2, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044c8:	441c      	add	r4, r3
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044dc:	4642      	mov	r2, r8
 80044de:	464b      	mov	r3, r9
 80044e0:	1891      	adds	r1, r2, r2
 80044e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044e4:	415b      	adcs	r3, r3
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044ec:	4641      	mov	r1, r8
 80044ee:	1851      	adds	r1, r2, r1
 80044f0:	6339      	str	r1, [r7, #48]	; 0x30
 80044f2:	4649      	mov	r1, r9
 80044f4:	414b      	adcs	r3, r1
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004504:	4659      	mov	r1, fp
 8004506:	00cb      	lsls	r3, r1, #3
 8004508:	4651      	mov	r1, sl
 800450a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450e:	4651      	mov	r1, sl
 8004510:	00ca      	lsls	r2, r1, #3
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	4603      	mov	r3, r0
 8004518:	4642      	mov	r2, r8
 800451a:	189b      	adds	r3, r3, r2
 800451c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004520:	464b      	mov	r3, r9
 8004522:	460a      	mov	r2, r1
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800453c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004540:	460b      	mov	r3, r1
 8004542:	18db      	adds	r3, r3, r3
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
 8004546:	4613      	mov	r3, r2
 8004548:	eb42 0303 	adc.w	r3, r2, r3
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004556:	f7fb feab 	bl	80002b0 <__aeabi_uldivmod>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <UART_SetConfig+0x2d4>)
 8004560:	fba3 1302 	umull	r1, r3, r3, r2
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	2164      	movs	r1, #100	; 0x64
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	3332      	adds	r3, #50	; 0x32
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <UART_SetConfig+0x2d4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	f003 0207 	and.w	r2, r3, #7
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4422      	add	r2, r4
 8004586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004588:	e106      	b.n	8004798 <UART_SetConfig+0x4d8>
 800458a:	bf00      	nop
 800458c:	40011000 	.word	0x40011000
 8004590:	40011400 	.word	0x40011400
 8004594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800459c:	2200      	movs	r2, #0
 800459e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045aa:	4642      	mov	r2, r8
 80045ac:	464b      	mov	r3, r9
 80045ae:	1891      	adds	r1, r2, r2
 80045b0:	6239      	str	r1, [r7, #32]
 80045b2:	415b      	adcs	r3, r3
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ba:	4641      	mov	r1, r8
 80045bc:	1854      	adds	r4, r2, r1
 80045be:	4649      	mov	r1, r9
 80045c0:	eb43 0501 	adc.w	r5, r3, r1
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	00eb      	lsls	r3, r5, #3
 80045ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d2:	00e2      	lsls	r2, r4, #3
 80045d4:	4614      	mov	r4, r2
 80045d6:	461d      	mov	r5, r3
 80045d8:	4643      	mov	r3, r8
 80045da:	18e3      	adds	r3, r4, r3
 80045dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045e0:	464b      	mov	r3, r9
 80045e2:	eb45 0303 	adc.w	r3, r5, r3
 80045e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004606:	4629      	mov	r1, r5
 8004608:	008b      	lsls	r3, r1, #2
 800460a:	4621      	mov	r1, r4
 800460c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004610:	4621      	mov	r1, r4
 8004612:	008a      	lsls	r2, r1, #2
 8004614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004618:	f7fb fe4a 	bl	80002b0 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4b60      	ldr	r3, [pc, #384]	; (80047a4 <UART_SetConfig+0x4e4>)
 8004622:	fba3 2302 	umull	r2, r3, r3, r2
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	011c      	lsls	r4, r3, #4
 800462a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	1891      	adds	r1, r2, r2
 8004642:	61b9      	str	r1, [r7, #24]
 8004644:	415b      	adcs	r3, r3
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800464c:	4641      	mov	r1, r8
 800464e:	1851      	adds	r1, r2, r1
 8004650:	6139      	str	r1, [r7, #16]
 8004652:	4649      	mov	r1, r9
 8004654:	414b      	adcs	r3, r1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004664:	4659      	mov	r1, fp
 8004666:	00cb      	lsls	r3, r1, #3
 8004668:	4651      	mov	r1, sl
 800466a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466e:	4651      	mov	r1, sl
 8004670:	00ca      	lsls	r2, r1, #3
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	4603      	mov	r3, r0
 8004678:	4642      	mov	r2, r8
 800467a:	189b      	adds	r3, r3, r2
 800467c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004680:	464b      	mov	r3, r9
 8004682:	460a      	mov	r2, r1
 8004684:	eb42 0303 	adc.w	r3, r2, r3
 8004688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	67bb      	str	r3, [r7, #120]	; 0x78
 8004696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046a4:	4649      	mov	r1, r9
 80046a6:	008b      	lsls	r3, r1, #2
 80046a8:	4641      	mov	r1, r8
 80046aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ae:	4641      	mov	r1, r8
 80046b0:	008a      	lsls	r2, r1, #2
 80046b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046b6:	f7fb fdfb 	bl	80002b0 <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <UART_SetConfig+0x4e4>)
 80046c2:	fba3 2301 	umull	r2, r3, r3, r1
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2264      	movs	r2, #100	; 0x64
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	1acb      	subs	r3, r1, r3
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	3332      	adds	r3, #50	; 0x32
 80046d4:	4a33      	ldr	r2, [pc, #204]	; (80047a4 <UART_SetConfig+0x4e4>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e0:	441c      	add	r4, r3
 80046e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e6:	2200      	movs	r2, #0
 80046e8:	673b      	str	r3, [r7, #112]	; 0x70
 80046ea:	677a      	str	r2, [r7, #116]	; 0x74
 80046ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046f0:	4642      	mov	r2, r8
 80046f2:	464b      	mov	r3, r9
 80046f4:	1891      	adds	r1, r2, r2
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	415b      	adcs	r3, r3
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004700:	4641      	mov	r1, r8
 8004702:	1851      	adds	r1, r2, r1
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	4649      	mov	r1, r9
 8004708:	414b      	adcs	r3, r1
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004718:	4659      	mov	r1, fp
 800471a:	00cb      	lsls	r3, r1, #3
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004722:	4651      	mov	r1, sl
 8004724:	00ca      	lsls	r2, r1, #3
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	4603      	mov	r3, r0
 800472c:	4642      	mov	r2, r8
 800472e:	189b      	adds	r3, r3, r2
 8004730:	66bb      	str	r3, [r7, #104]	; 0x68
 8004732:	464b      	mov	r3, r9
 8004734:	460a      	mov	r2, r1
 8004736:	eb42 0303 	adc.w	r3, r2, r3
 800473a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	663b      	str	r3, [r7, #96]	; 0x60
 8004746:	667a      	str	r2, [r7, #100]	; 0x64
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004754:	4649      	mov	r1, r9
 8004756:	008b      	lsls	r3, r1, #2
 8004758:	4641      	mov	r1, r8
 800475a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800475e:	4641      	mov	r1, r8
 8004760:	008a      	lsls	r2, r1, #2
 8004762:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004766:	f7fb fda3 	bl	80002b0 <__aeabi_uldivmod>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <UART_SetConfig+0x4e4>)
 8004770:	fba3 1302 	umull	r1, r3, r3, r2
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	2164      	movs	r1, #100	; 0x64
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	3332      	adds	r3, #50	; 0x32
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <UART_SetConfig+0x4e4>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4422      	add	r2, r4
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800479e:	46bd      	mov	sp, r7
 80047a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a4:	51eb851f 	.word	0x51eb851f

080047a8 <std>:
 80047a8:	2300      	movs	r3, #0
 80047aa:	b510      	push	{r4, lr}
 80047ac:	4604      	mov	r4, r0
 80047ae:	e9c0 3300 	strd	r3, r3, [r0]
 80047b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047b6:	6083      	str	r3, [r0, #8]
 80047b8:	8181      	strh	r1, [r0, #12]
 80047ba:	6643      	str	r3, [r0, #100]	; 0x64
 80047bc:	81c2      	strh	r2, [r0, #14]
 80047be:	6183      	str	r3, [r0, #24]
 80047c0:	4619      	mov	r1, r3
 80047c2:	2208      	movs	r2, #8
 80047c4:	305c      	adds	r0, #92	; 0x5c
 80047c6:	f000 f9f7 	bl	8004bb8 <memset>
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <std+0x58>)
 80047cc:	6263      	str	r3, [r4, #36]	; 0x24
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <std+0x5c>)
 80047d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <std+0x60>)
 80047d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <std+0x64>)
 80047d8:	6323      	str	r3, [r4, #48]	; 0x30
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <std+0x68>)
 80047dc:	6224      	str	r4, [r4, #32]
 80047de:	429c      	cmp	r4, r3
 80047e0:	d006      	beq.n	80047f0 <std+0x48>
 80047e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80047e6:	4294      	cmp	r4, r2
 80047e8:	d002      	beq.n	80047f0 <std+0x48>
 80047ea:	33d0      	adds	r3, #208	; 0xd0
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d105      	bne.n	80047fc <std+0x54>
 80047f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f8:	f000 ba56 	b.w	8004ca8 <__retarget_lock_init_recursive>
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	bf00      	nop
 8004800:	08004a09 	.word	0x08004a09
 8004804:	08004a2b 	.word	0x08004a2b
 8004808:	08004a63 	.word	0x08004a63
 800480c:	08004a87 	.word	0x08004a87
 8004810:	200001a0 	.word	0x200001a0

08004814 <stdio_exit_handler>:
 8004814:	4a02      	ldr	r2, [pc, #8]	; (8004820 <stdio_exit_handler+0xc>)
 8004816:	4903      	ldr	r1, [pc, #12]	; (8004824 <stdio_exit_handler+0x10>)
 8004818:	4803      	ldr	r0, [pc, #12]	; (8004828 <stdio_exit_handler+0x14>)
 800481a:	f000 b869 	b.w	80048f0 <_fwalk_sglue>
 800481e:	bf00      	nop
 8004820:	20000014 	.word	0x20000014
 8004824:	08005555 	.word	0x08005555
 8004828:	20000020 	.word	0x20000020

0800482c <cleanup_stdio>:
 800482c:	6841      	ldr	r1, [r0, #4]
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <cleanup_stdio+0x34>)
 8004830:	4299      	cmp	r1, r3
 8004832:	b510      	push	{r4, lr}
 8004834:	4604      	mov	r4, r0
 8004836:	d001      	beq.n	800483c <cleanup_stdio+0x10>
 8004838:	f000 fe8c 	bl	8005554 <_fflush_r>
 800483c:	68a1      	ldr	r1, [r4, #8]
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <cleanup_stdio+0x38>)
 8004840:	4299      	cmp	r1, r3
 8004842:	d002      	beq.n	800484a <cleanup_stdio+0x1e>
 8004844:	4620      	mov	r0, r4
 8004846:	f000 fe85 	bl	8005554 <_fflush_r>
 800484a:	68e1      	ldr	r1, [r4, #12]
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <cleanup_stdio+0x3c>)
 800484e:	4299      	cmp	r1, r3
 8004850:	d004      	beq.n	800485c <cleanup_stdio+0x30>
 8004852:	4620      	mov	r0, r4
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	f000 be7c 	b.w	8005554 <_fflush_r>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	bf00      	nop
 8004860:	200001a0 	.word	0x200001a0
 8004864:	20000208 	.word	0x20000208
 8004868:	20000270 	.word	0x20000270

0800486c <global_stdio_init.part.0>:
 800486c:	b510      	push	{r4, lr}
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <global_stdio_init.part.0+0x30>)
 8004870:	4c0b      	ldr	r4, [pc, #44]	; (80048a0 <global_stdio_init.part.0+0x34>)
 8004872:	4a0c      	ldr	r2, [pc, #48]	; (80048a4 <global_stdio_init.part.0+0x38>)
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	4620      	mov	r0, r4
 8004878:	2200      	movs	r2, #0
 800487a:	2104      	movs	r1, #4
 800487c:	f7ff ff94 	bl	80047a8 <std>
 8004880:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004884:	2201      	movs	r2, #1
 8004886:	2109      	movs	r1, #9
 8004888:	f7ff ff8e 	bl	80047a8 <std>
 800488c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004890:	2202      	movs	r2, #2
 8004892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004896:	2112      	movs	r1, #18
 8004898:	f7ff bf86 	b.w	80047a8 <std>
 800489c:	200002d8 	.word	0x200002d8
 80048a0:	200001a0 	.word	0x200001a0
 80048a4:	08004815 	.word	0x08004815

080048a8 <__sfp_lock_acquire>:
 80048a8:	4801      	ldr	r0, [pc, #4]	; (80048b0 <__sfp_lock_acquire+0x8>)
 80048aa:	f000 b9fe 	b.w	8004caa <__retarget_lock_acquire_recursive>
 80048ae:	bf00      	nop
 80048b0:	200002e1 	.word	0x200002e1

080048b4 <__sfp_lock_release>:
 80048b4:	4801      	ldr	r0, [pc, #4]	; (80048bc <__sfp_lock_release+0x8>)
 80048b6:	f000 b9f9 	b.w	8004cac <__retarget_lock_release_recursive>
 80048ba:	bf00      	nop
 80048bc:	200002e1 	.word	0x200002e1

080048c0 <__sinit>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	f7ff fff0 	bl	80048a8 <__sfp_lock_acquire>
 80048c8:	6a23      	ldr	r3, [r4, #32]
 80048ca:	b11b      	cbz	r3, 80048d4 <__sinit+0x14>
 80048cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d0:	f7ff bff0 	b.w	80048b4 <__sfp_lock_release>
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <__sinit+0x28>)
 80048d6:	6223      	str	r3, [r4, #32]
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <__sinit+0x2c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f5      	bne.n	80048cc <__sinit+0xc>
 80048e0:	f7ff ffc4 	bl	800486c <global_stdio_init.part.0>
 80048e4:	e7f2      	b.n	80048cc <__sinit+0xc>
 80048e6:	bf00      	nop
 80048e8:	0800482d 	.word	0x0800482d
 80048ec:	200002d8 	.word	0x200002d8

080048f0 <_fwalk_sglue>:
 80048f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f4:	4607      	mov	r7, r0
 80048f6:	4688      	mov	r8, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	2600      	movs	r6, #0
 80048fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004900:	f1b9 0901 	subs.w	r9, r9, #1
 8004904:	d505      	bpl.n	8004912 <_fwalk_sglue+0x22>
 8004906:	6824      	ldr	r4, [r4, #0]
 8004908:	2c00      	cmp	r4, #0
 800490a:	d1f7      	bne.n	80048fc <_fwalk_sglue+0xc>
 800490c:	4630      	mov	r0, r6
 800490e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004912:	89ab      	ldrh	r3, [r5, #12]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d907      	bls.n	8004928 <_fwalk_sglue+0x38>
 8004918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800491c:	3301      	adds	r3, #1
 800491e:	d003      	beq.n	8004928 <_fwalk_sglue+0x38>
 8004920:	4629      	mov	r1, r5
 8004922:	4638      	mov	r0, r7
 8004924:	47c0      	blx	r8
 8004926:	4306      	orrs	r6, r0
 8004928:	3568      	adds	r5, #104	; 0x68
 800492a:	e7e9      	b.n	8004900 <_fwalk_sglue+0x10>

0800492c <iprintf>:
 800492c:	b40f      	push	{r0, r1, r2, r3}
 800492e:	b507      	push	{r0, r1, r2, lr}
 8004930:	4906      	ldr	r1, [pc, #24]	; (800494c <iprintf+0x20>)
 8004932:	ab04      	add	r3, sp, #16
 8004934:	6808      	ldr	r0, [r1, #0]
 8004936:	f853 2b04 	ldr.w	r2, [r3], #4
 800493a:	6881      	ldr	r1, [r0, #8]
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	f000 fad9 	bl	8004ef4 <_vfiprintf_r>
 8004942:	b003      	add	sp, #12
 8004944:	f85d eb04 	ldr.w	lr, [sp], #4
 8004948:	b004      	add	sp, #16
 800494a:	4770      	bx	lr
 800494c:	2000006c 	.word	0x2000006c

08004950 <_puts_r>:
 8004950:	6a03      	ldr	r3, [r0, #32]
 8004952:	b570      	push	{r4, r5, r6, lr}
 8004954:	6884      	ldr	r4, [r0, #8]
 8004956:	4605      	mov	r5, r0
 8004958:	460e      	mov	r6, r1
 800495a:	b90b      	cbnz	r3, 8004960 <_puts_r+0x10>
 800495c:	f7ff ffb0 	bl	80048c0 <__sinit>
 8004960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004962:	07db      	lsls	r3, r3, #31
 8004964:	d405      	bmi.n	8004972 <_puts_r+0x22>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	0598      	lsls	r0, r3, #22
 800496a:	d402      	bmi.n	8004972 <_puts_r+0x22>
 800496c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800496e:	f000 f99c 	bl	8004caa <__retarget_lock_acquire_recursive>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	0719      	lsls	r1, r3, #28
 8004976:	d513      	bpl.n	80049a0 <_puts_r+0x50>
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	b18b      	cbz	r3, 80049a0 <_puts_r+0x50>
 800497c:	3e01      	subs	r6, #1
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004984:	3b01      	subs	r3, #1
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	b9e9      	cbnz	r1, 80049c6 <_puts_r+0x76>
 800498a:	2b00      	cmp	r3, #0
 800498c:	da2e      	bge.n	80049ec <_puts_r+0x9c>
 800498e:	4622      	mov	r2, r4
 8004990:	210a      	movs	r1, #10
 8004992:	4628      	mov	r0, r5
 8004994:	f000 f87b 	bl	8004a8e <__swbuf_r>
 8004998:	3001      	adds	r0, #1
 800499a:	d007      	beq.n	80049ac <_puts_r+0x5c>
 800499c:	250a      	movs	r5, #10
 800499e:	e007      	b.n	80049b0 <_puts_r+0x60>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f8b0 	bl	8004b08 <__swsetup_r>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d0e7      	beq.n	800497c <_puts_r+0x2c>
 80049ac:	f04f 35ff 	mov.w	r5, #4294967295
 80049b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049b2:	07da      	lsls	r2, r3, #31
 80049b4:	d405      	bmi.n	80049c2 <_puts_r+0x72>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	059b      	lsls	r3, r3, #22
 80049ba:	d402      	bmi.n	80049c2 <_puts_r+0x72>
 80049bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049be:	f000 f975 	bl	8004cac <__retarget_lock_release_recursive>
 80049c2:	4628      	mov	r0, r5
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da04      	bge.n	80049d4 <_puts_r+0x84>
 80049ca:	69a2      	ldr	r2, [r4, #24]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	dc06      	bgt.n	80049de <_puts_r+0x8e>
 80049d0:	290a      	cmp	r1, #10
 80049d2:	d004      	beq.n	80049de <_puts_r+0x8e>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	6022      	str	r2, [r4, #0]
 80049da:	7019      	strb	r1, [r3, #0]
 80049dc:	e7cf      	b.n	800497e <_puts_r+0x2e>
 80049de:	4622      	mov	r2, r4
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 f854 	bl	8004a8e <__swbuf_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	d1c9      	bne.n	800497e <_puts_r+0x2e>
 80049ea:	e7df      	b.n	80049ac <_puts_r+0x5c>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	250a      	movs	r5, #10
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	6022      	str	r2, [r4, #0]
 80049f4:	701d      	strb	r5, [r3, #0]
 80049f6:	e7db      	b.n	80049b0 <_puts_r+0x60>

080049f8 <puts>:
 80049f8:	4b02      	ldr	r3, [pc, #8]	; (8004a04 <puts+0xc>)
 80049fa:	4601      	mov	r1, r0
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f7ff bfa7 	b.w	8004950 <_puts_r>
 8004a02:	bf00      	nop
 8004a04:	2000006c 	.word	0x2000006c

08004a08 <__sread>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a10:	f000 f8fc 	bl	8004c0c <_read_r>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	bfab      	itete	ge
 8004a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a1c:	181b      	addge	r3, r3, r0
 8004a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a22:	bfac      	ite	ge
 8004a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a26:	81a3      	strhlt	r3, [r4, #12]
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <__swrite>:
 8004a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2e:	461f      	mov	r7, r3
 8004a30:	898b      	ldrh	r3, [r1, #12]
 8004a32:	05db      	lsls	r3, r3, #23
 8004a34:	4605      	mov	r5, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	4616      	mov	r6, r2
 8004a3a:	d505      	bpl.n	8004a48 <__swrite+0x1e>
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	2302      	movs	r3, #2
 8004a42:	2200      	movs	r2, #0
 8004a44:	f000 f8d0 	bl	8004be8 <_lseek_r>
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	4632      	mov	r2, r6
 8004a56:	463b      	mov	r3, r7
 8004a58:	4628      	mov	r0, r5
 8004a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	f000 b8e7 	b.w	8004c30 <_write_r>

08004a62 <__sseek>:
 8004a62:	b510      	push	{r4, lr}
 8004a64:	460c      	mov	r4, r1
 8004a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6a:	f000 f8bd 	bl	8004be8 <_lseek_r>
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	bf15      	itete	ne
 8004a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a7e:	81a3      	strheq	r3, [r4, #12]
 8004a80:	bf18      	it	ne
 8004a82:	81a3      	strhne	r3, [r4, #12]
 8004a84:	bd10      	pop	{r4, pc}

08004a86 <__sclose>:
 8004a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8a:	f000 b89d 	b.w	8004bc8 <_close_r>

08004a8e <__swbuf_r>:
 8004a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a90:	460e      	mov	r6, r1
 8004a92:	4614      	mov	r4, r2
 8004a94:	4605      	mov	r5, r0
 8004a96:	b118      	cbz	r0, 8004aa0 <__swbuf_r+0x12>
 8004a98:	6a03      	ldr	r3, [r0, #32]
 8004a9a:	b90b      	cbnz	r3, 8004aa0 <__swbuf_r+0x12>
 8004a9c:	f7ff ff10 	bl	80048c0 <__sinit>
 8004aa0:	69a3      	ldr	r3, [r4, #24]
 8004aa2:	60a3      	str	r3, [r4, #8]
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	071a      	lsls	r2, r3, #28
 8004aa8:	d525      	bpl.n	8004af6 <__swbuf_r+0x68>
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	b31b      	cbz	r3, 8004af6 <__swbuf_r+0x68>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	6922      	ldr	r2, [r4, #16]
 8004ab2:	1a98      	subs	r0, r3, r2
 8004ab4:	6963      	ldr	r3, [r4, #20]
 8004ab6:	b2f6      	uxtb	r6, r6
 8004ab8:	4283      	cmp	r3, r0
 8004aba:	4637      	mov	r7, r6
 8004abc:	dc04      	bgt.n	8004ac8 <__swbuf_r+0x3a>
 8004abe:	4621      	mov	r1, r4
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 fd47 	bl	8005554 <_fflush_r>
 8004ac6:	b9e0      	cbnz	r0, 8004b02 <__swbuf_r+0x74>
 8004ac8:	68a3      	ldr	r3, [r4, #8]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	60a3      	str	r3, [r4, #8]
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	6022      	str	r2, [r4, #0]
 8004ad4:	701e      	strb	r6, [r3, #0]
 8004ad6:	6962      	ldr	r2, [r4, #20]
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d004      	beq.n	8004ae8 <__swbuf_r+0x5a>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	07db      	lsls	r3, r3, #31
 8004ae2:	d506      	bpl.n	8004af2 <__swbuf_r+0x64>
 8004ae4:	2e0a      	cmp	r6, #10
 8004ae6:	d104      	bne.n	8004af2 <__swbuf_r+0x64>
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 fd32 	bl	8005554 <_fflush_r>
 8004af0:	b938      	cbnz	r0, 8004b02 <__swbuf_r+0x74>
 8004af2:	4638      	mov	r0, r7
 8004af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f805 	bl	8004b08 <__swsetup_r>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d0d5      	beq.n	8004aae <__swbuf_r+0x20>
 8004b02:	f04f 37ff 	mov.w	r7, #4294967295
 8004b06:	e7f4      	b.n	8004af2 <__swbuf_r+0x64>

08004b08 <__swsetup_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <__swsetup_r+0xac>)
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	460c      	mov	r4, r1
 8004b12:	b118      	cbz	r0, 8004b1c <__swsetup_r+0x14>
 8004b14:	6a03      	ldr	r3, [r0, #32]
 8004b16:	b90b      	cbnz	r3, 8004b1c <__swsetup_r+0x14>
 8004b18:	f7ff fed2 	bl	80048c0 <__sinit>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b22:	0718      	lsls	r0, r3, #28
 8004b24:	d422      	bmi.n	8004b6c <__swsetup_r+0x64>
 8004b26:	06d9      	lsls	r1, r3, #27
 8004b28:	d407      	bmi.n	8004b3a <__swsetup_r+0x32>
 8004b2a:	2309      	movs	r3, #9
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e034      	b.n	8004ba4 <__swsetup_r+0x9c>
 8004b3a:	0758      	lsls	r0, r3, #29
 8004b3c:	d512      	bpl.n	8004b64 <__swsetup_r+0x5c>
 8004b3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b40:	b141      	cbz	r1, 8004b54 <__swsetup_r+0x4c>
 8004b42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b46:	4299      	cmp	r1, r3
 8004b48:	d002      	beq.n	8004b50 <__swsetup_r+0x48>
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 f8b0 	bl	8004cb0 <_free_r>
 8004b50:	2300      	movs	r3, #0
 8004b52:	6363      	str	r3, [r4, #52]	; 0x34
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6063      	str	r3, [r4, #4]
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f043 0308 	orr.w	r3, r3, #8
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	b94b      	cbnz	r3, 8004b84 <__swsetup_r+0x7c>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7a:	d003      	beq.n	8004b84 <__swsetup_r+0x7c>
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f000 fd36 	bl	80055f0 <__smakebuf_r>
 8004b84:	89a0      	ldrh	r0, [r4, #12]
 8004b86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b8a:	f010 0301 	ands.w	r3, r0, #1
 8004b8e:	d00a      	beq.n	8004ba6 <__swsetup_r+0x9e>
 8004b90:	2300      	movs	r3, #0
 8004b92:	60a3      	str	r3, [r4, #8]
 8004b94:	6963      	ldr	r3, [r4, #20]
 8004b96:	425b      	negs	r3, r3
 8004b98:	61a3      	str	r3, [r4, #24]
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	b943      	cbnz	r3, 8004bb0 <__swsetup_r+0xa8>
 8004b9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ba2:	d1c4      	bne.n	8004b2e <__swsetup_r+0x26>
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
 8004ba6:	0781      	lsls	r1, r0, #30
 8004ba8:	bf58      	it	pl
 8004baa:	6963      	ldrpl	r3, [r4, #20]
 8004bac:	60a3      	str	r3, [r4, #8]
 8004bae:	e7f4      	b.n	8004b9a <__swsetup_r+0x92>
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e7f7      	b.n	8004ba4 <__swsetup_r+0x9c>
 8004bb4:	2000006c 	.word	0x2000006c

08004bb8 <memset>:
 8004bb8:	4402      	add	r2, r0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <memset+0xa>
 8004bc0:	4770      	bx	lr
 8004bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc6:	e7f9      	b.n	8004bbc <memset+0x4>

08004bc8 <_close_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d06      	ldr	r5, [pc, #24]	; (8004be4 <_close_r+0x1c>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	f7fc fdb7 	bl	8001746 <_close>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_close_r+0x1a>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_close_r+0x1a>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	200002dc 	.word	0x200002dc

08004be8 <_lseek_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4d07      	ldr	r5, [pc, #28]	; (8004c08 <_lseek_r+0x20>)
 8004bec:	4604      	mov	r4, r0
 8004bee:	4608      	mov	r0, r1
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	602a      	str	r2, [r5, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f7fc fdcc 	bl	8001794 <_lseek>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_lseek_r+0x1e>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_lseek_r+0x1e>
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	200002dc 	.word	0x200002dc

08004c0c <_read_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d07      	ldr	r5, [pc, #28]	; (8004c2c <_read_r+0x20>)
 8004c10:	4604      	mov	r4, r0
 8004c12:	4608      	mov	r0, r1
 8004c14:	4611      	mov	r1, r2
 8004c16:	2200      	movs	r2, #0
 8004c18:	602a      	str	r2, [r5, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f7fc fd5a 	bl	80016d4 <_read>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_read_r+0x1e>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_read_r+0x1e>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	200002dc 	.word	0x200002dc

08004c30 <_write_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_write_r+0x20>)
 8004c34:	4604      	mov	r4, r0
 8004c36:	4608      	mov	r0, r1
 8004c38:	4611      	mov	r1, r2
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	602a      	str	r2, [r5, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7fc fd65 	bl	800170e <_write>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_write_r+0x1e>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_write_r+0x1e>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	200002dc 	.word	0x200002dc

08004c54 <__errno>:
 8004c54:	4b01      	ldr	r3, [pc, #4]	; (8004c5c <__errno+0x8>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000006c 	.word	0x2000006c

08004c60 <__libc_init_array>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	4d0d      	ldr	r5, [pc, #52]	; (8004c98 <__libc_init_array+0x38>)
 8004c64:	4c0d      	ldr	r4, [pc, #52]	; (8004c9c <__libc_init_array+0x3c>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	2600      	movs	r6, #0
 8004c6c:	42a6      	cmp	r6, r4
 8004c6e:	d109      	bne.n	8004c84 <__libc_init_array+0x24>
 8004c70:	4d0b      	ldr	r5, [pc, #44]	; (8004ca0 <__libc_init_array+0x40>)
 8004c72:	4c0c      	ldr	r4, [pc, #48]	; (8004ca4 <__libc_init_array+0x44>)
 8004c74:	f000 fd2a 	bl	80056cc <_init>
 8004c78:	1b64      	subs	r4, r4, r5
 8004c7a:	10a4      	asrs	r4, r4, #2
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	42a6      	cmp	r6, r4
 8004c80:	d105      	bne.n	8004c8e <__libc_init_array+0x2e>
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c88:	4798      	blx	r3
 8004c8a:	3601      	adds	r6, #1
 8004c8c:	e7ee      	b.n	8004c6c <__libc_init_array+0xc>
 8004c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c92:	4798      	blx	r3
 8004c94:	3601      	adds	r6, #1
 8004c96:	e7f2      	b.n	8004c7e <__libc_init_array+0x1e>
 8004c98:	080058e4 	.word	0x080058e4
 8004c9c:	080058e4 	.word	0x080058e4
 8004ca0:	080058e4 	.word	0x080058e4
 8004ca4:	080058e8 	.word	0x080058e8

08004ca8 <__retarget_lock_init_recursive>:
 8004ca8:	4770      	bx	lr

08004caa <__retarget_lock_acquire_recursive>:
 8004caa:	4770      	bx	lr

08004cac <__retarget_lock_release_recursive>:
 8004cac:	4770      	bx	lr
	...

08004cb0 <_free_r>:
 8004cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cb2:	2900      	cmp	r1, #0
 8004cb4:	d044      	beq.n	8004d40 <_free_r+0x90>
 8004cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cba:	9001      	str	r0, [sp, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004cc2:	bfb8      	it	lt
 8004cc4:	18e4      	addlt	r4, r4, r3
 8004cc6:	f000 f8df 	bl	8004e88 <__malloc_lock>
 8004cca:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <_free_r+0x94>)
 8004ccc:	9801      	ldr	r0, [sp, #4]
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	b933      	cbnz	r3, 8004ce0 <_free_r+0x30>
 8004cd2:	6063      	str	r3, [r4, #4]
 8004cd4:	6014      	str	r4, [r2, #0]
 8004cd6:	b003      	add	sp, #12
 8004cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cdc:	f000 b8da 	b.w	8004e94 <__malloc_unlock>
 8004ce0:	42a3      	cmp	r3, r4
 8004ce2:	d908      	bls.n	8004cf6 <_free_r+0x46>
 8004ce4:	6825      	ldr	r5, [r4, #0]
 8004ce6:	1961      	adds	r1, r4, r5
 8004ce8:	428b      	cmp	r3, r1
 8004cea:	bf01      	itttt	eq
 8004cec:	6819      	ldreq	r1, [r3, #0]
 8004cee:	685b      	ldreq	r3, [r3, #4]
 8004cf0:	1949      	addeq	r1, r1, r5
 8004cf2:	6021      	streq	r1, [r4, #0]
 8004cf4:	e7ed      	b.n	8004cd2 <_free_r+0x22>
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	b10b      	cbz	r3, 8004d00 <_free_r+0x50>
 8004cfc:	42a3      	cmp	r3, r4
 8004cfe:	d9fa      	bls.n	8004cf6 <_free_r+0x46>
 8004d00:	6811      	ldr	r1, [r2, #0]
 8004d02:	1855      	adds	r5, r2, r1
 8004d04:	42a5      	cmp	r5, r4
 8004d06:	d10b      	bne.n	8004d20 <_free_r+0x70>
 8004d08:	6824      	ldr	r4, [r4, #0]
 8004d0a:	4421      	add	r1, r4
 8004d0c:	1854      	adds	r4, r2, r1
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	6011      	str	r1, [r2, #0]
 8004d12:	d1e0      	bne.n	8004cd6 <_free_r+0x26>
 8004d14:	681c      	ldr	r4, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	6053      	str	r3, [r2, #4]
 8004d1a:	440c      	add	r4, r1
 8004d1c:	6014      	str	r4, [r2, #0]
 8004d1e:	e7da      	b.n	8004cd6 <_free_r+0x26>
 8004d20:	d902      	bls.n	8004d28 <_free_r+0x78>
 8004d22:	230c      	movs	r3, #12
 8004d24:	6003      	str	r3, [r0, #0]
 8004d26:	e7d6      	b.n	8004cd6 <_free_r+0x26>
 8004d28:	6825      	ldr	r5, [r4, #0]
 8004d2a:	1961      	adds	r1, r4, r5
 8004d2c:	428b      	cmp	r3, r1
 8004d2e:	bf04      	itt	eq
 8004d30:	6819      	ldreq	r1, [r3, #0]
 8004d32:	685b      	ldreq	r3, [r3, #4]
 8004d34:	6063      	str	r3, [r4, #4]
 8004d36:	bf04      	itt	eq
 8004d38:	1949      	addeq	r1, r1, r5
 8004d3a:	6021      	streq	r1, [r4, #0]
 8004d3c:	6054      	str	r4, [r2, #4]
 8004d3e:	e7ca      	b.n	8004cd6 <_free_r+0x26>
 8004d40:	b003      	add	sp, #12
 8004d42:	bd30      	pop	{r4, r5, pc}
 8004d44:	200002e4 	.word	0x200002e4

08004d48 <sbrk_aligned>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4e0e      	ldr	r6, [pc, #56]	; (8004d84 <sbrk_aligned+0x3c>)
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	6831      	ldr	r1, [r6, #0]
 8004d50:	4605      	mov	r5, r0
 8004d52:	b911      	cbnz	r1, 8004d5a <sbrk_aligned+0x12>
 8004d54:	f000 fcaa 	bl	80056ac <_sbrk_r>
 8004d58:	6030      	str	r0, [r6, #0]
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f000 fca5 	bl	80056ac <_sbrk_r>
 8004d62:	1c43      	adds	r3, r0, #1
 8004d64:	d00a      	beq.n	8004d7c <sbrk_aligned+0x34>
 8004d66:	1cc4      	adds	r4, r0, #3
 8004d68:	f024 0403 	bic.w	r4, r4, #3
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d007      	beq.n	8004d80 <sbrk_aligned+0x38>
 8004d70:	1a21      	subs	r1, r4, r0
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 fc9a 	bl	80056ac <_sbrk_r>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d101      	bne.n	8004d80 <sbrk_aligned+0x38>
 8004d7c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d80:	4620      	mov	r0, r4
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	200002e8 	.word	0x200002e8

08004d88 <_malloc_r>:
 8004d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	1ccd      	adds	r5, r1, #3
 8004d8e:	f025 0503 	bic.w	r5, r5, #3
 8004d92:	3508      	adds	r5, #8
 8004d94:	2d0c      	cmp	r5, #12
 8004d96:	bf38      	it	cc
 8004d98:	250c      	movcc	r5, #12
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	db01      	blt.n	8004da4 <_malloc_r+0x1c>
 8004da0:	42a9      	cmp	r1, r5
 8004da2:	d905      	bls.n	8004db0 <_malloc_r+0x28>
 8004da4:	230c      	movs	r3, #12
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	2600      	movs	r6, #0
 8004daa:	4630      	mov	r0, r6
 8004dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e84 <_malloc_r+0xfc>
 8004db4:	f000 f868 	bl	8004e88 <__malloc_lock>
 8004db8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dbc:	461c      	mov	r4, r3
 8004dbe:	bb5c      	cbnz	r4, 8004e18 <_malloc_r+0x90>
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7ff ffc0 	bl	8004d48 <sbrk_aligned>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	4604      	mov	r4, r0
 8004dcc:	d155      	bne.n	8004e7a <_malloc_r+0xf2>
 8004dce:	f8d8 4000 	ldr.w	r4, [r8]
 8004dd2:	4626      	mov	r6, r4
 8004dd4:	2e00      	cmp	r6, #0
 8004dd6:	d145      	bne.n	8004e64 <_malloc_r+0xdc>
 8004dd8:	2c00      	cmp	r4, #0
 8004dda:	d048      	beq.n	8004e6e <_malloc_r+0xe6>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	4631      	mov	r1, r6
 8004de0:	4638      	mov	r0, r7
 8004de2:	eb04 0903 	add.w	r9, r4, r3
 8004de6:	f000 fc61 	bl	80056ac <_sbrk_r>
 8004dea:	4581      	cmp	r9, r0
 8004dec:	d13f      	bne.n	8004e6e <_malloc_r+0xe6>
 8004dee:	6821      	ldr	r1, [r4, #0]
 8004df0:	1a6d      	subs	r5, r5, r1
 8004df2:	4629      	mov	r1, r5
 8004df4:	4638      	mov	r0, r7
 8004df6:	f7ff ffa7 	bl	8004d48 <sbrk_aligned>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d037      	beq.n	8004e6e <_malloc_r+0xe6>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	442b      	add	r3, r5
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	f8d8 3000 	ldr.w	r3, [r8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d038      	beq.n	8004e7e <_malloc_r+0xf6>
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	42a2      	cmp	r2, r4
 8004e10:	d12b      	bne.n	8004e6a <_malloc_r+0xe2>
 8004e12:	2200      	movs	r2, #0
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	e00f      	b.n	8004e38 <_malloc_r+0xb0>
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	1b52      	subs	r2, r2, r5
 8004e1c:	d41f      	bmi.n	8004e5e <_malloc_r+0xd6>
 8004e1e:	2a0b      	cmp	r2, #11
 8004e20:	d917      	bls.n	8004e52 <_malloc_r+0xca>
 8004e22:	1961      	adds	r1, r4, r5
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	6025      	str	r5, [r4, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	6059      	strne	r1, [r3, #4]
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	bf08      	it	eq
 8004e30:	f8c8 1000 	streq.w	r1, [r8]
 8004e34:	5162      	str	r2, [r4, r5]
 8004e36:	604b      	str	r3, [r1, #4]
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f104 060b 	add.w	r6, r4, #11
 8004e3e:	f000 f829 	bl	8004e94 <__malloc_unlock>
 8004e42:	f026 0607 	bic.w	r6, r6, #7
 8004e46:	1d23      	adds	r3, r4, #4
 8004e48:	1af2      	subs	r2, r6, r3
 8004e4a:	d0ae      	beq.n	8004daa <_malloc_r+0x22>
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	50a3      	str	r3, [r4, r2]
 8004e50:	e7ab      	b.n	8004daa <_malloc_r+0x22>
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	6862      	ldr	r2, [r4, #4]
 8004e56:	d1dd      	bne.n	8004e14 <_malloc_r+0x8c>
 8004e58:	f8c8 2000 	str.w	r2, [r8]
 8004e5c:	e7ec      	b.n	8004e38 <_malloc_r+0xb0>
 8004e5e:	4623      	mov	r3, r4
 8004e60:	6864      	ldr	r4, [r4, #4]
 8004e62:	e7ac      	b.n	8004dbe <_malloc_r+0x36>
 8004e64:	4634      	mov	r4, r6
 8004e66:	6876      	ldr	r6, [r6, #4]
 8004e68:	e7b4      	b.n	8004dd4 <_malloc_r+0x4c>
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	e7cc      	b.n	8004e08 <_malloc_r+0x80>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4638      	mov	r0, r7
 8004e74:	f000 f80e 	bl	8004e94 <__malloc_unlock>
 8004e78:	e797      	b.n	8004daa <_malloc_r+0x22>
 8004e7a:	6025      	str	r5, [r4, #0]
 8004e7c:	e7dc      	b.n	8004e38 <_malloc_r+0xb0>
 8004e7e:	605b      	str	r3, [r3, #4]
 8004e80:	deff      	udf	#255	; 0xff
 8004e82:	bf00      	nop
 8004e84:	200002e4 	.word	0x200002e4

08004e88 <__malloc_lock>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__malloc_lock+0x8>)
 8004e8a:	f7ff bf0e 	b.w	8004caa <__retarget_lock_acquire_recursive>
 8004e8e:	bf00      	nop
 8004e90:	200002e0 	.word	0x200002e0

08004e94 <__malloc_unlock>:
 8004e94:	4801      	ldr	r0, [pc, #4]	; (8004e9c <__malloc_unlock+0x8>)
 8004e96:	f7ff bf09 	b.w	8004cac <__retarget_lock_release_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200002e0 	.word	0x200002e0

08004ea0 <__sfputc_r>:
 8004ea0:	6893      	ldr	r3, [r2, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	b410      	push	{r4}
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	da08      	bge.n	8004ebe <__sfputc_r+0x1e>
 8004eac:	6994      	ldr	r4, [r2, #24]
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	db01      	blt.n	8004eb6 <__sfputc_r+0x16>
 8004eb2:	290a      	cmp	r1, #10
 8004eb4:	d103      	bne.n	8004ebe <__sfputc_r+0x1e>
 8004eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eba:	f7ff bde8 	b.w	8004a8e <__swbuf_r>
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	1c58      	adds	r0, r3, #1
 8004ec2:	6010      	str	r0, [r2, #0]
 8004ec4:	7019      	strb	r1, [r3, #0]
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <__sfputs_r>:
 8004ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	460f      	mov	r7, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	18d5      	adds	r5, r2, r3
 8004ed8:	42ac      	cmp	r4, r5
 8004eda:	d101      	bne.n	8004ee0 <__sfputs_r+0x12>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e007      	b.n	8004ef0 <__sfputs_r+0x22>
 8004ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff ffda 	bl	8004ea0 <__sfputc_r>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d1f3      	bne.n	8004ed8 <__sfputs_r+0xa>
 8004ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ef4 <_vfiprintf_r>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	460d      	mov	r5, r1
 8004efa:	b09d      	sub	sp, #116	; 0x74
 8004efc:	4614      	mov	r4, r2
 8004efe:	4698      	mov	r8, r3
 8004f00:	4606      	mov	r6, r0
 8004f02:	b118      	cbz	r0, 8004f0c <_vfiprintf_r+0x18>
 8004f04:	6a03      	ldr	r3, [r0, #32]
 8004f06:	b90b      	cbnz	r3, 8004f0c <_vfiprintf_r+0x18>
 8004f08:	f7ff fcda 	bl	80048c0 <__sinit>
 8004f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f0e:	07d9      	lsls	r1, r3, #31
 8004f10:	d405      	bmi.n	8004f1e <_vfiprintf_r+0x2a>
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	059a      	lsls	r2, r3, #22
 8004f16:	d402      	bmi.n	8004f1e <_vfiprintf_r+0x2a>
 8004f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f1a:	f7ff fec6 	bl	8004caa <__retarget_lock_acquire_recursive>
 8004f1e:	89ab      	ldrh	r3, [r5, #12]
 8004f20:	071b      	lsls	r3, r3, #28
 8004f22:	d501      	bpl.n	8004f28 <_vfiprintf_r+0x34>
 8004f24:	692b      	ldr	r3, [r5, #16]
 8004f26:	b99b      	cbnz	r3, 8004f50 <_vfiprintf_r+0x5c>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f7ff fdec 	bl	8004b08 <__swsetup_r>
 8004f30:	b170      	cbz	r0, 8004f50 <_vfiprintf_r+0x5c>
 8004f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f34:	07dc      	lsls	r4, r3, #31
 8004f36:	d504      	bpl.n	8004f42 <_vfiprintf_r+0x4e>
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	b01d      	add	sp, #116	; 0x74
 8004f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	0598      	lsls	r0, r3, #22
 8004f46:	d4f7      	bmi.n	8004f38 <_vfiprintf_r+0x44>
 8004f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4a:	f7ff feaf 	bl	8004cac <__retarget_lock_release_recursive>
 8004f4e:	e7f3      	b.n	8004f38 <_vfiprintf_r+0x44>
 8004f50:	2300      	movs	r3, #0
 8004f52:	9309      	str	r3, [sp, #36]	; 0x24
 8004f54:	2320      	movs	r3, #32
 8004f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f5e:	2330      	movs	r3, #48	; 0x30
 8004f60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005114 <_vfiprintf_r+0x220>
 8004f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f68:	f04f 0901 	mov.w	r9, #1
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	469a      	mov	sl, r3
 8004f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f74:	b10a      	cbz	r2, 8004f7a <_vfiprintf_r+0x86>
 8004f76:	2a25      	cmp	r2, #37	; 0x25
 8004f78:	d1f9      	bne.n	8004f6e <_vfiprintf_r+0x7a>
 8004f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7e:	d00b      	beq.n	8004f98 <_vfiprintf_r+0xa4>
 8004f80:	465b      	mov	r3, fp
 8004f82:	4622      	mov	r2, r4
 8004f84:	4629      	mov	r1, r5
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7ff ffa1 	bl	8004ece <__sfputs_r>
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	f000 80a9 	beq.w	80050e4 <_vfiprintf_r+0x1f0>
 8004f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f94:	445a      	add	r2, fp
 8004f96:	9209      	str	r2, [sp, #36]	; 0x24
 8004f98:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a1 	beq.w	80050e4 <_vfiprintf_r+0x1f0>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fac:	f10a 0a01 	add.w	sl, sl, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	9307      	str	r3, [sp, #28]
 8004fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004fba:	4654      	mov	r4, sl
 8004fbc:	2205      	movs	r2, #5
 8004fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc2:	4854      	ldr	r0, [pc, #336]	; (8005114 <_vfiprintf_r+0x220>)
 8004fc4:	f7fb f924 	bl	8000210 <memchr>
 8004fc8:	9a04      	ldr	r2, [sp, #16]
 8004fca:	b9d8      	cbnz	r0, 8005004 <_vfiprintf_r+0x110>
 8004fcc:	06d1      	lsls	r1, r2, #27
 8004fce:	bf44      	itt	mi
 8004fd0:	2320      	movmi	r3, #32
 8004fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd6:	0713      	lsls	r3, r2, #28
 8004fd8:	bf44      	itt	mi
 8004fda:	232b      	movmi	r3, #43	; 0x2b
 8004fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe6:	d015      	beq.n	8005014 <_vfiprintf_r+0x120>
 8004fe8:	9a07      	ldr	r2, [sp, #28]
 8004fea:	4654      	mov	r4, sl
 8004fec:	2000      	movs	r0, #0
 8004fee:	f04f 0c0a 	mov.w	ip, #10
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff8:	3b30      	subs	r3, #48	; 0x30
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d94d      	bls.n	800509a <_vfiprintf_r+0x1a6>
 8004ffe:	b1b0      	cbz	r0, 800502e <_vfiprintf_r+0x13a>
 8005000:	9207      	str	r2, [sp, #28]
 8005002:	e014      	b.n	800502e <_vfiprintf_r+0x13a>
 8005004:	eba0 0308 	sub.w	r3, r0, r8
 8005008:	fa09 f303 	lsl.w	r3, r9, r3
 800500c:	4313      	orrs	r3, r2
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	46a2      	mov	sl, r4
 8005012:	e7d2      	b.n	8004fba <_vfiprintf_r+0xc6>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	1d19      	adds	r1, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	9103      	str	r1, [sp, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	bfbb      	ittet	lt
 8005020:	425b      	neglt	r3, r3
 8005022:	f042 0202 	orrlt.w	r2, r2, #2
 8005026:	9307      	strge	r3, [sp, #28]
 8005028:	9307      	strlt	r3, [sp, #28]
 800502a:	bfb8      	it	lt
 800502c:	9204      	strlt	r2, [sp, #16]
 800502e:	7823      	ldrb	r3, [r4, #0]
 8005030:	2b2e      	cmp	r3, #46	; 0x2e
 8005032:	d10c      	bne.n	800504e <_vfiprintf_r+0x15a>
 8005034:	7863      	ldrb	r3, [r4, #1]
 8005036:	2b2a      	cmp	r3, #42	; 0x2a
 8005038:	d134      	bne.n	80050a4 <_vfiprintf_r+0x1b0>
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	9203      	str	r2, [sp, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	bfb8      	it	lt
 8005046:	f04f 33ff 	movlt.w	r3, #4294967295
 800504a:	3402      	adds	r4, #2
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005124 <_vfiprintf_r+0x230>
 8005052:	7821      	ldrb	r1, [r4, #0]
 8005054:	2203      	movs	r2, #3
 8005056:	4650      	mov	r0, sl
 8005058:	f7fb f8da 	bl	8000210 <memchr>
 800505c:	b138      	cbz	r0, 800506e <_vfiprintf_r+0x17a>
 800505e:	9b04      	ldr	r3, [sp, #16]
 8005060:	eba0 000a 	sub.w	r0, r0, sl
 8005064:	2240      	movs	r2, #64	; 0x40
 8005066:	4082      	lsls	r2, r0
 8005068:	4313      	orrs	r3, r2
 800506a:	3401      	adds	r4, #1
 800506c:	9304      	str	r3, [sp, #16]
 800506e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005072:	4829      	ldr	r0, [pc, #164]	; (8005118 <_vfiprintf_r+0x224>)
 8005074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005078:	2206      	movs	r2, #6
 800507a:	f7fb f8c9 	bl	8000210 <memchr>
 800507e:	2800      	cmp	r0, #0
 8005080:	d03f      	beq.n	8005102 <_vfiprintf_r+0x20e>
 8005082:	4b26      	ldr	r3, [pc, #152]	; (800511c <_vfiprintf_r+0x228>)
 8005084:	bb1b      	cbnz	r3, 80050ce <_vfiprintf_r+0x1da>
 8005086:	9b03      	ldr	r3, [sp, #12]
 8005088:	3307      	adds	r3, #7
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	3308      	adds	r3, #8
 8005090:	9303      	str	r3, [sp, #12]
 8005092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005094:	443b      	add	r3, r7
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	e768      	b.n	8004f6c <_vfiprintf_r+0x78>
 800509a:	fb0c 3202 	mla	r2, ip, r2, r3
 800509e:	460c      	mov	r4, r1
 80050a0:	2001      	movs	r0, #1
 80050a2:	e7a6      	b.n	8004ff2 <_vfiprintf_r+0xfe>
 80050a4:	2300      	movs	r3, #0
 80050a6:	3401      	adds	r4, #1
 80050a8:	9305      	str	r3, [sp, #20]
 80050aa:	4619      	mov	r1, r3
 80050ac:	f04f 0c0a 	mov.w	ip, #10
 80050b0:	4620      	mov	r0, r4
 80050b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b6:	3a30      	subs	r2, #48	; 0x30
 80050b8:	2a09      	cmp	r2, #9
 80050ba:	d903      	bls.n	80050c4 <_vfiprintf_r+0x1d0>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0c6      	beq.n	800504e <_vfiprintf_r+0x15a>
 80050c0:	9105      	str	r1, [sp, #20]
 80050c2:	e7c4      	b.n	800504e <_vfiprintf_r+0x15a>
 80050c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c8:	4604      	mov	r4, r0
 80050ca:	2301      	movs	r3, #1
 80050cc:	e7f0      	b.n	80050b0 <_vfiprintf_r+0x1bc>
 80050ce:	ab03      	add	r3, sp, #12
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	462a      	mov	r2, r5
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <_vfiprintf_r+0x22c>)
 80050d6:	a904      	add	r1, sp, #16
 80050d8:	4630      	mov	r0, r6
 80050da:	f3af 8000 	nop.w
 80050de:	4607      	mov	r7, r0
 80050e0:	1c78      	adds	r0, r7, #1
 80050e2:	d1d6      	bne.n	8005092 <_vfiprintf_r+0x19e>
 80050e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e6:	07d9      	lsls	r1, r3, #31
 80050e8:	d405      	bmi.n	80050f6 <_vfiprintf_r+0x202>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	059a      	lsls	r2, r3, #22
 80050ee:	d402      	bmi.n	80050f6 <_vfiprintf_r+0x202>
 80050f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f2:	f7ff fddb 	bl	8004cac <__retarget_lock_release_recursive>
 80050f6:	89ab      	ldrh	r3, [r5, #12]
 80050f8:	065b      	lsls	r3, r3, #25
 80050fa:	f53f af1d 	bmi.w	8004f38 <_vfiprintf_r+0x44>
 80050fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005100:	e71c      	b.n	8004f3c <_vfiprintf_r+0x48>
 8005102:	ab03      	add	r3, sp, #12
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	462a      	mov	r2, r5
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <_vfiprintf_r+0x22c>)
 800510a:	a904      	add	r1, sp, #16
 800510c:	4630      	mov	r0, r6
 800510e:	f000 f879 	bl	8005204 <_printf_i>
 8005112:	e7e4      	b.n	80050de <_vfiprintf_r+0x1ea>
 8005114:	080058a8 	.word	0x080058a8
 8005118:	080058b2 	.word	0x080058b2
 800511c:	00000000 	.word	0x00000000
 8005120:	08004ecf 	.word	0x08004ecf
 8005124:	080058ae 	.word	0x080058ae

08005128 <_printf_common>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	4616      	mov	r6, r2
 800512e:	4699      	mov	r9, r3
 8005130:	688a      	ldr	r2, [r1, #8]
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005138:	4293      	cmp	r3, r2
 800513a:	bfb8      	it	lt
 800513c:	4613      	movlt	r3, r2
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005144:	4607      	mov	r7, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b10a      	cbz	r2, 800514e <_printf_common+0x26>
 800514a:	3301      	adds	r3, #1
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	6833      	ldrmi	r3, [r6, #0]
 8005156:	3302      	addmi	r3, #2
 8005158:	6033      	strmi	r3, [r6, #0]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d106      	bne.n	8005170 <_printf_common+0x48>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc26      	bgt.n	80051be <_printf_common+0x96>
 8005170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005174:	1e13      	subs	r3, r2, #0
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d42b      	bmi.n	80051d8 <_printf_common+0xb0>
 8005180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d01e      	beq.n	80051cc <_printf_common+0xa4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	f003 0306 	and.w	r3, r3, #6
 8005196:	2b04      	cmp	r3, #4
 8005198:	bf02      	ittt	eq
 800519a:	68e5      	ldreq	r5, [r4, #12]
 800519c:	6833      	ldreq	r3, [r6, #0]
 800519e:	1aed      	subeq	r5, r5, r3
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	bf0c      	ite	eq
 80051a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a8:	2500      	movne	r5, #0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfc4      	itt	gt
 80051ae:	1a9b      	subgt	r3, r3, r2
 80051b0:	18ed      	addgt	r5, r5, r3
 80051b2:	2600      	movs	r6, #0
 80051b4:	341a      	adds	r4, #26
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d11a      	bne.n	80051f0 <_printf_common+0xc8>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e008      	b.n	80051d0 <_printf_common+0xa8>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4649      	mov	r1, r9
 80051c4:	4638      	mov	r0, r7
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d103      	bne.n	80051d4 <_printf_common+0xac>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7c6      	b.n	8005166 <_printf_common+0x3e>
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	2030      	movs	r0, #48	; 0x30
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e2:	4422      	add	r2, r4
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7c7      	b.n	8005180 <_printf_common+0x58>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4622      	mov	r2, r4
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0e6      	beq.n	80051cc <_printf_common+0xa4>
 80051fe:	3601      	adds	r6, #1
 8005200:	e7d9      	b.n	80051b6 <_printf_common+0x8e>
	...

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	7e0f      	ldrb	r7, [r1, #24]
 800520a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800520c:	2f78      	cmp	r7, #120	; 0x78
 800520e:	4691      	mov	r9, r2
 8005210:	4680      	mov	r8, r0
 8005212:	460c      	mov	r4, r1
 8005214:	469a      	mov	sl, r3
 8005216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	; 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d4 	beq.w	80053ce <_printf_i+0x1ca>
 8005226:	2f58      	cmp	r7, #88	; 0x58
 8005228:	f000 80c0 	beq.w	80053ac <_printf_i+0x1a8>
 800522c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a101      	add	r1, pc, #4	; (adr r1, 8005244 <_printf_i+0x40>)
 8005240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053b5 	.word	0x080053b5
 8005274:	080052dd 	.word	0x080052dd
 8005278:	0800536f 	.word	0x0800536f
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053d7 	.word	0x080053d7
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052dd 	.word	0x080052dd
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	08005377 	.word	0x08005377
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	602a      	str	r2, [r5, #0]
 80052a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e09f      	b.n	80053f0 <_printf_i+0x1ec>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	682b      	ldr	r3, [r5, #0]
 80052b4:	0607      	lsls	r7, r0, #24
 80052b6:	f103 0104 	add.w	r1, r3, #4
 80052ba:	6029      	str	r1, [r5, #0]
 80052bc:	d501      	bpl.n	80052c2 <_printf_i+0xbe>
 80052be:	681e      	ldr	r6, [r3, #0]
 80052c0:	e003      	b.n	80052ca <_printf_i+0xc6>
 80052c2:	0646      	lsls	r6, r0, #25
 80052c4:	d5fb      	bpl.n	80052be <_printf_i+0xba>
 80052c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	da03      	bge.n	80052d6 <_printf_i+0xd2>
 80052ce:	232d      	movs	r3, #45	; 0x2d
 80052d0:	4276      	negs	r6, r6
 80052d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d6:	485a      	ldr	r0, [pc, #360]	; (8005440 <_printf_i+0x23c>)
 80052d8:	230a      	movs	r3, #10
 80052da:	e012      	b.n	8005302 <_printf_i+0xfe>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	1d19      	adds	r1, r3, #4
 80052e2:	6029      	str	r1, [r5, #0]
 80052e4:	0605      	lsls	r5, r0, #24
 80052e6:	d501      	bpl.n	80052ec <_printf_i+0xe8>
 80052e8:	681e      	ldr	r6, [r3, #0]
 80052ea:	e002      	b.n	80052f2 <_printf_i+0xee>
 80052ec:	0641      	lsls	r1, r0, #25
 80052ee:	d5fb      	bpl.n	80052e8 <_printf_i+0xe4>
 80052f0:	881e      	ldrh	r6, [r3, #0]
 80052f2:	4853      	ldr	r0, [pc, #332]	; (8005440 <_printf_i+0x23c>)
 80052f4:	2f6f      	cmp	r7, #111	; 0x6f
 80052f6:	bf0c      	ite	eq
 80052f8:	2308      	moveq	r3, #8
 80052fa:	230a      	movne	r3, #10
 80052fc:	2100      	movs	r1, #0
 80052fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005302:	6865      	ldr	r5, [r4, #4]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	2d00      	cmp	r5, #0
 8005308:	bfa2      	ittt	ge
 800530a:	6821      	ldrge	r1, [r4, #0]
 800530c:	f021 0104 	bicge.w	r1, r1, #4
 8005310:	6021      	strge	r1, [r4, #0]
 8005312:	b90e      	cbnz	r6, 8005318 <_printf_i+0x114>
 8005314:	2d00      	cmp	r5, #0
 8005316:	d04b      	beq.n	80053b0 <_printf_i+0x1ac>
 8005318:	4615      	mov	r5, r2
 800531a:	fbb6 f1f3 	udiv	r1, r6, r3
 800531e:	fb03 6711 	mls	r7, r3, r1, r6
 8005322:	5dc7      	ldrb	r7, [r0, r7]
 8005324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005328:	4637      	mov	r7, r6
 800532a:	42bb      	cmp	r3, r7
 800532c:	460e      	mov	r6, r1
 800532e:	d9f4      	bls.n	800531a <_printf_i+0x116>
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10b      	bne.n	800534c <_printf_i+0x148>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	07de      	lsls	r6, r3, #31
 8005338:	d508      	bpl.n	800534c <_printf_i+0x148>
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	6861      	ldr	r1, [r4, #4]
 800533e:	4299      	cmp	r1, r3
 8005340:	bfde      	ittt	le
 8005342:	2330      	movle	r3, #48	; 0x30
 8005344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005348:	f105 35ff 	addle.w	r5, r5, #4294967295
 800534c:	1b52      	subs	r2, r2, r5
 800534e:	6122      	str	r2, [r4, #16]
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	464b      	mov	r3, r9
 8005356:	aa03      	add	r2, sp, #12
 8005358:	4621      	mov	r1, r4
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fee4 	bl	8005128 <_printf_common>
 8005360:	3001      	adds	r0, #1
 8005362:	d14a      	bne.n	80053fa <_printf_i+0x1f6>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	b004      	add	sp, #16
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	4833      	ldr	r0, [pc, #204]	; (8005444 <_printf_i+0x240>)
 8005378:	2778      	movs	r7, #120	; 0x78
 800537a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6829      	ldr	r1, [r5, #0]
 8005382:	061f      	lsls	r7, r3, #24
 8005384:	f851 6b04 	ldr.w	r6, [r1], #4
 8005388:	d402      	bmi.n	8005390 <_printf_i+0x18c>
 800538a:	065f      	lsls	r7, r3, #25
 800538c:	bf48      	it	mi
 800538e:	b2b6      	uxthmi	r6, r6
 8005390:	07df      	lsls	r7, r3, #31
 8005392:	bf48      	it	mi
 8005394:	f043 0320 	orrmi.w	r3, r3, #32
 8005398:	6029      	str	r1, [r5, #0]
 800539a:	bf48      	it	mi
 800539c:	6023      	strmi	r3, [r4, #0]
 800539e:	b91e      	cbnz	r6, 80053a8 <_printf_i+0x1a4>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	2310      	movs	r3, #16
 80053aa:	e7a7      	b.n	80052fc <_printf_i+0xf8>
 80053ac:	4824      	ldr	r0, [pc, #144]	; (8005440 <_printf_i+0x23c>)
 80053ae:	e7e4      	b.n	800537a <_printf_i+0x176>
 80053b0:	4615      	mov	r5, r2
 80053b2:	e7bd      	b.n	8005330 <_printf_i+0x12c>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	6826      	ldr	r6, [r4, #0]
 80053b8:	6961      	ldr	r1, [r4, #20]
 80053ba:	1d18      	adds	r0, r3, #4
 80053bc:	6028      	str	r0, [r5, #0]
 80053be:	0635      	lsls	r5, r6, #24
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	d501      	bpl.n	80053c8 <_printf_i+0x1c4>
 80053c4:	6019      	str	r1, [r3, #0]
 80053c6:	e002      	b.n	80053ce <_printf_i+0x1ca>
 80053c8:	0670      	lsls	r0, r6, #25
 80053ca:	d5fb      	bpl.n	80053c4 <_printf_i+0x1c0>
 80053cc:	8019      	strh	r1, [r3, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	4615      	mov	r5, r2
 80053d4:	e7bc      	b.n	8005350 <_printf_i+0x14c>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	1d1a      	adds	r2, r3, #4
 80053da:	602a      	str	r2, [r5, #0]
 80053dc:	681d      	ldr	r5, [r3, #0]
 80053de:	6862      	ldr	r2, [r4, #4]
 80053e0:	2100      	movs	r1, #0
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fa ff14 	bl	8000210 <memchr>
 80053e8:	b108      	cbz	r0, 80053ee <_printf_i+0x1ea>
 80053ea:	1b40      	subs	r0, r0, r5
 80053ec:	6060      	str	r0, [r4, #4]
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f8:	e7aa      	b.n	8005350 <_printf_i+0x14c>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	462a      	mov	r2, r5
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	47d0      	blx	sl
 8005404:	3001      	adds	r0, #1
 8005406:	d0ad      	beq.n	8005364 <_printf_i+0x160>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	079b      	lsls	r3, r3, #30
 800540c:	d413      	bmi.n	8005436 <_printf_i+0x232>
 800540e:	68e0      	ldr	r0, [r4, #12]
 8005410:	9b03      	ldr	r3, [sp, #12]
 8005412:	4298      	cmp	r0, r3
 8005414:	bfb8      	it	lt
 8005416:	4618      	movlt	r0, r3
 8005418:	e7a6      	b.n	8005368 <_printf_i+0x164>
 800541a:	2301      	movs	r3, #1
 800541c:	4632      	mov	r2, r6
 800541e:	4649      	mov	r1, r9
 8005420:	4640      	mov	r0, r8
 8005422:	47d0      	blx	sl
 8005424:	3001      	adds	r0, #1
 8005426:	d09d      	beq.n	8005364 <_printf_i+0x160>
 8005428:	3501      	adds	r5, #1
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	9903      	ldr	r1, [sp, #12]
 800542e:	1a5b      	subs	r3, r3, r1
 8005430:	42ab      	cmp	r3, r5
 8005432:	dcf2      	bgt.n	800541a <_printf_i+0x216>
 8005434:	e7eb      	b.n	800540e <_printf_i+0x20a>
 8005436:	2500      	movs	r5, #0
 8005438:	f104 0619 	add.w	r6, r4, #25
 800543c:	e7f5      	b.n	800542a <_printf_i+0x226>
 800543e:	bf00      	nop
 8005440:	080058b9 	.word	0x080058b9
 8005444:	080058ca 	.word	0x080058ca

08005448 <__sflush_r>:
 8005448:	898a      	ldrh	r2, [r1, #12]
 800544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	4605      	mov	r5, r0
 8005450:	0710      	lsls	r0, r2, #28
 8005452:	460c      	mov	r4, r1
 8005454:	d458      	bmi.n	8005508 <__sflush_r+0xc0>
 8005456:	684b      	ldr	r3, [r1, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dc05      	bgt.n	8005468 <__sflush_r+0x20>
 800545c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	dc02      	bgt.n	8005468 <__sflush_r+0x20>
 8005462:	2000      	movs	r0, #0
 8005464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800546a:	2e00      	cmp	r6, #0
 800546c:	d0f9      	beq.n	8005462 <__sflush_r+0x1a>
 800546e:	2300      	movs	r3, #0
 8005470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005474:	682f      	ldr	r7, [r5, #0]
 8005476:	6a21      	ldr	r1, [r4, #32]
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	d032      	beq.n	80054e2 <__sflush_r+0x9a>
 800547c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	075a      	lsls	r2, r3, #29
 8005482:	d505      	bpl.n	8005490 <__sflush_r+0x48>
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	1ac0      	subs	r0, r0, r3
 8005488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800548a:	b10b      	cbz	r3, 8005490 <__sflush_r+0x48>
 800548c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800548e:	1ac0      	subs	r0, r0, r3
 8005490:	2300      	movs	r3, #0
 8005492:	4602      	mov	r2, r0
 8005494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005496:	6a21      	ldr	r1, [r4, #32]
 8005498:	4628      	mov	r0, r5
 800549a:	47b0      	blx	r6
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	d106      	bne.n	80054b0 <__sflush_r+0x68>
 80054a2:	6829      	ldr	r1, [r5, #0]
 80054a4:	291d      	cmp	r1, #29
 80054a6:	d82b      	bhi.n	8005500 <__sflush_r+0xb8>
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <__sflush_r+0x108>)
 80054aa:	410a      	asrs	r2, r1
 80054ac:	07d6      	lsls	r6, r2, #31
 80054ae:	d427      	bmi.n	8005500 <__sflush_r+0xb8>
 80054b0:	2200      	movs	r2, #0
 80054b2:	6062      	str	r2, [r4, #4]
 80054b4:	04d9      	lsls	r1, r3, #19
 80054b6:	6922      	ldr	r2, [r4, #16]
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	d504      	bpl.n	80054c6 <__sflush_r+0x7e>
 80054bc:	1c42      	adds	r2, r0, #1
 80054be:	d101      	bne.n	80054c4 <__sflush_r+0x7c>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b903      	cbnz	r3, 80054c6 <__sflush_r+0x7e>
 80054c4:	6560      	str	r0, [r4, #84]	; 0x54
 80054c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054c8:	602f      	str	r7, [r5, #0]
 80054ca:	2900      	cmp	r1, #0
 80054cc:	d0c9      	beq.n	8005462 <__sflush_r+0x1a>
 80054ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054d2:	4299      	cmp	r1, r3
 80054d4:	d002      	beq.n	80054dc <__sflush_r+0x94>
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7ff fbea 	bl	8004cb0 <_free_r>
 80054dc:	2000      	movs	r0, #0
 80054de:	6360      	str	r0, [r4, #52]	; 0x34
 80054e0:	e7c0      	b.n	8005464 <__sflush_r+0x1c>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b0      	blx	r6
 80054e8:	1c41      	adds	r1, r0, #1
 80054ea:	d1c8      	bne.n	800547e <__sflush_r+0x36>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0c5      	beq.n	800547e <__sflush_r+0x36>
 80054f2:	2b1d      	cmp	r3, #29
 80054f4:	d001      	beq.n	80054fa <__sflush_r+0xb2>
 80054f6:	2b16      	cmp	r3, #22
 80054f8:	d101      	bne.n	80054fe <__sflush_r+0xb6>
 80054fa:	602f      	str	r7, [r5, #0]
 80054fc:	e7b1      	b.n	8005462 <__sflush_r+0x1a>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	e7ad      	b.n	8005464 <__sflush_r+0x1c>
 8005508:	690f      	ldr	r7, [r1, #16]
 800550a:	2f00      	cmp	r7, #0
 800550c:	d0a9      	beq.n	8005462 <__sflush_r+0x1a>
 800550e:	0793      	lsls	r3, r2, #30
 8005510:	680e      	ldr	r6, [r1, #0]
 8005512:	bf08      	it	eq
 8005514:	694b      	ldreq	r3, [r1, #20]
 8005516:	600f      	str	r7, [r1, #0]
 8005518:	bf18      	it	ne
 800551a:	2300      	movne	r3, #0
 800551c:	eba6 0807 	sub.w	r8, r6, r7
 8005520:	608b      	str	r3, [r1, #8]
 8005522:	f1b8 0f00 	cmp.w	r8, #0
 8005526:	dd9c      	ble.n	8005462 <__sflush_r+0x1a>
 8005528:	6a21      	ldr	r1, [r4, #32]
 800552a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800552c:	4643      	mov	r3, r8
 800552e:	463a      	mov	r2, r7
 8005530:	4628      	mov	r0, r5
 8005532:	47b0      	blx	r6
 8005534:	2800      	cmp	r0, #0
 8005536:	dc06      	bgt.n	8005546 <__sflush_r+0xfe>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e78e      	b.n	8005464 <__sflush_r+0x1c>
 8005546:	4407      	add	r7, r0
 8005548:	eba8 0800 	sub.w	r8, r8, r0
 800554c:	e7e9      	b.n	8005522 <__sflush_r+0xda>
 800554e:	bf00      	nop
 8005550:	dfbffffe 	.word	0xdfbffffe

08005554 <_fflush_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	4605      	mov	r5, r0
 800555a:	460c      	mov	r4, r1
 800555c:	b913      	cbnz	r3, 8005564 <_fflush_r+0x10>
 800555e:	2500      	movs	r5, #0
 8005560:	4628      	mov	r0, r5
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	b118      	cbz	r0, 800556e <_fflush_r+0x1a>
 8005566:	6a03      	ldr	r3, [r0, #32]
 8005568:	b90b      	cbnz	r3, 800556e <_fflush_r+0x1a>
 800556a:	f7ff f9a9 	bl	80048c0 <__sinit>
 800556e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f3      	beq.n	800555e <_fflush_r+0xa>
 8005576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005578:	07d0      	lsls	r0, r2, #31
 800557a:	d404      	bmi.n	8005586 <_fflush_r+0x32>
 800557c:	0599      	lsls	r1, r3, #22
 800557e:	d402      	bmi.n	8005586 <_fflush_r+0x32>
 8005580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005582:	f7ff fb92 	bl	8004caa <__retarget_lock_acquire_recursive>
 8005586:	4628      	mov	r0, r5
 8005588:	4621      	mov	r1, r4
 800558a:	f7ff ff5d 	bl	8005448 <__sflush_r>
 800558e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005590:	07da      	lsls	r2, r3, #31
 8005592:	4605      	mov	r5, r0
 8005594:	d4e4      	bmi.n	8005560 <_fflush_r+0xc>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	059b      	lsls	r3, r3, #22
 800559a:	d4e1      	bmi.n	8005560 <_fflush_r+0xc>
 800559c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800559e:	f7ff fb85 	bl	8004cac <__retarget_lock_release_recursive>
 80055a2:	e7dd      	b.n	8005560 <_fflush_r+0xc>

080055a4 <__swhatbuf_r>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	460c      	mov	r4, r1
 80055a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ac:	2900      	cmp	r1, #0
 80055ae:	b096      	sub	sp, #88	; 0x58
 80055b0:	4615      	mov	r5, r2
 80055b2:	461e      	mov	r6, r3
 80055b4:	da0d      	bge.n	80055d2 <__swhatbuf_r+0x2e>
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	bf0c      	ite	eq
 80055c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80055c6:	2340      	movne	r3, #64	; 0x40
 80055c8:	2000      	movs	r0, #0
 80055ca:	6031      	str	r1, [r6, #0]
 80055cc:	602b      	str	r3, [r5, #0]
 80055ce:	b016      	add	sp, #88	; 0x58
 80055d0:	bd70      	pop	{r4, r5, r6, pc}
 80055d2:	466a      	mov	r2, sp
 80055d4:	f000 f848 	bl	8005668 <_fstat_r>
 80055d8:	2800      	cmp	r0, #0
 80055da:	dbec      	blt.n	80055b6 <__swhatbuf_r+0x12>
 80055dc:	9901      	ldr	r1, [sp, #4]
 80055de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80055e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055e6:	4259      	negs	r1, r3
 80055e8:	4159      	adcs	r1, r3
 80055ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ee:	e7eb      	b.n	80055c8 <__swhatbuf_r+0x24>

080055f0 <__smakebuf_r>:
 80055f0:	898b      	ldrh	r3, [r1, #12]
 80055f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055f4:	079d      	lsls	r5, r3, #30
 80055f6:	4606      	mov	r6, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	d507      	bpl.n	800560c <__smakebuf_r+0x1c>
 80055fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	2301      	movs	r3, #1
 8005606:	6163      	str	r3, [r4, #20]
 8005608:	b002      	add	sp, #8
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	ab01      	add	r3, sp, #4
 800560e:	466a      	mov	r2, sp
 8005610:	f7ff ffc8 	bl	80055a4 <__swhatbuf_r>
 8005614:	9900      	ldr	r1, [sp, #0]
 8005616:	4605      	mov	r5, r0
 8005618:	4630      	mov	r0, r6
 800561a:	f7ff fbb5 	bl	8004d88 <_malloc_r>
 800561e:	b948      	cbnz	r0, 8005634 <__smakebuf_r+0x44>
 8005620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005624:	059a      	lsls	r2, r3, #22
 8005626:	d4ef      	bmi.n	8005608 <__smakebuf_r+0x18>
 8005628:	f023 0303 	bic.w	r3, r3, #3
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	e7e3      	b.n	80055fc <__smakebuf_r+0xc>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	6020      	str	r0, [r4, #0]
 8005638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563c:	81a3      	strh	r3, [r4, #12]
 800563e:	9b00      	ldr	r3, [sp, #0]
 8005640:	6163      	str	r3, [r4, #20]
 8005642:	9b01      	ldr	r3, [sp, #4]
 8005644:	6120      	str	r0, [r4, #16]
 8005646:	b15b      	cbz	r3, 8005660 <__smakebuf_r+0x70>
 8005648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800564c:	4630      	mov	r0, r6
 800564e:	f000 f81d 	bl	800568c <_isatty_r>
 8005652:	b128      	cbz	r0, 8005660 <__smakebuf_r+0x70>
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	431d      	orrs	r5, r3
 8005664:	81a5      	strh	r5, [r4, #12]
 8005666:	e7cf      	b.n	8005608 <__smakebuf_r+0x18>

08005668 <_fstat_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d07      	ldr	r5, [pc, #28]	; (8005688 <_fstat_r+0x20>)
 800566c:	2300      	movs	r3, #0
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	602b      	str	r3, [r5, #0]
 8005676:	f7fc f872 	bl	800175e <_fstat>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	d102      	bne.n	8005684 <_fstat_r+0x1c>
 800567e:	682b      	ldr	r3, [r5, #0]
 8005680:	b103      	cbz	r3, 8005684 <_fstat_r+0x1c>
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	bd38      	pop	{r3, r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	200002dc 	.word	0x200002dc

0800568c <_isatty_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d06      	ldr	r5, [pc, #24]	; (80056a8 <_isatty_r+0x1c>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fc f871 	bl	800177e <_isatty>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_isatty_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_isatty_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	200002dc 	.word	0x200002dc

080056ac <_sbrk_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4d06      	ldr	r5, [pc, #24]	; (80056c8 <_sbrk_r+0x1c>)
 80056b0:	2300      	movs	r3, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	602b      	str	r3, [r5, #0]
 80056b8:	f7fc f87a 	bl	80017b0 <_sbrk>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_sbrk_r+0x1a>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_sbrk_r+0x1a>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	200002dc 	.word	0x200002dc

080056cc <_init>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

080056d8 <_fini>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr
