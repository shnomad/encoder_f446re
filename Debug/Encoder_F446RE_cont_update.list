
Encoder_F446RE_cont_update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004104  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d8  080044d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e0  080044e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080044e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08004550  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004550  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e015  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002062  00000000  00000000  0002e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00030158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7b  00000000  00000000  00030ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000336a  00000000  00000000  00031943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc4f  00000000  00000000  00034cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ec6  00000000  00000000  000448fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fc4  00000000  00000000  001177c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011b788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042bc 	.word	0x080042bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080042bc 	.word	0x080042bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fd5a 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f814 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f932 	bl	8000820 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005bc:	f000 f884 	bl	80006c8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f8da 	bl	8000778 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f902 	bl	80007cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Encoder Started!!\r\n");
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <main+0x2c>)
 80005ca:	f003 f80d 	bl	80035e8 <puts>

//save_100mm_encoder_counter(34567);
//read_100mm_encoder_counter();
/*printf("EEPROM Emulation W/R Test : %d\r\n",read_100mm_encoder_counter());*/

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005ce:	213c      	movs	r1, #60	; 0x3c
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <main+0x30>)
 80005d2:	f001 ff35 	bl	8002440 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x2a>
 80005d8:	080042d4 	.word	0x080042d4
 80005dc:	20000084 	.word	0x20000084

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f8da 	bl	80037a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <SystemClock_Config+0xe0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a2c      	ldr	r2, [pc, #176]	; (80006c0 <SystemClock_Config+0xe0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <SystemClock_Config+0xe0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <SystemClock_Config+0xe4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <SystemClock_Config+0xe4>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <SystemClock_Config+0xe4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000654:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fba4 	bl	8001db8 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 fabb 	bl	8000bf0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067a:	f001 f889 	bl	8001790 <HAL_PWREx_EnableOverDrive>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000684:	f000 fab4 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f8c2 	bl	8001830 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006b2:	f000 fa9d 	bl	8000bf0 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2224      	movs	r2, #36	; 0x24
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f866 	bl	80037a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_TIM1_Init+0xa8>)
 80006e6:	4a23      	ldr	r2, [pc, #140]	; (8000774 <MX_TIM1_Init+0xac>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_TIM1_Init+0xa8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_TIM1_Init+0xa8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_TIM1_Init+0xa8>)
 80006f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_TIM1_Init+0xa8>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_TIM1_Init+0xa8>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_TIM1_Init+0xa8>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000710:	2303      	movs	r3, #3
 8000712:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000718:	2301      	movs	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000728:	2301      	movs	r3, #1
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_TIM1_Init+0xa8>)
 800073c:	f001 fdda 	bl	80022f4 <HAL_TIM_Encoder_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000746:	f000 fa53 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_TIM1_Init+0xa8>)
 8000758:	f002 f982 	bl	8002a60 <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000762:	f000 fa45 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3730      	adds	r7, #48	; 0x30
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000084 	.word	0x20000084
 8000774:	40010000 	.word	0x40010000

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART1_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f002 f9e6 	bl	8002b80 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 fa19 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000cc 	.word	0x200000cc
 80007c8:	40011000 	.word	0x40011000

080007cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART2_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 8000804:	f002 f9bc 	bl	8002b80 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f9ef 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000114 	.word	0x20000114
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b40      	ldr	r3, [pc, #256]	; (800093c <MX_GPIO_Init+0x11c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a3f      	ldr	r2, [pc, #252]	; (800093c <MX_GPIO_Init+0x11c>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <MX_GPIO_Init+0x11c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <MX_GPIO_Init+0x11c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a38      	ldr	r2, [pc, #224]	; (800093c <MX_GPIO_Init+0x11c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b36      	ldr	r3, [pc, #216]	; (800093c <MX_GPIO_Init+0x11c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <MX_GPIO_Init+0x11c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a31      	ldr	r2, [pc, #196]	; (800093c <MX_GPIO_Init+0x11c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b2f      	ldr	r3, [pc, #188]	; (800093c <MX_GPIO_Init+0x11c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRG_OUT_GPIO_Port, TRG_OUT_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2101      	movs	r1, #1
 800088e:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_GPIO_Init+0x120>)
 8000890:	f000 ff4c 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC_MODE2_Pin ENC_MODE1_Pin */
  GPIO_InitStruct.Pin = ENC_MODE2_Pin|ENC_MODE1_Pin;
 8000894:	2303      	movs	r3, #3
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4827      	ldr	r0, [pc, #156]	; (8000944 <MX_GPIO_Init+0x124>)
 80008a8:	f000 fd94 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_MODE_INT_Pin */
  GPIO_InitStruct.Pin = ENC_MODE_INT_Pin;
 80008ac:	2301      	movs	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_MODE_INT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4821      	ldr	r0, [pc, #132]	; (8000948 <MX_GPIO_Init+0x128>)
 80008c2:	f000 fd87 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_MODE0_Pin */
  GPIO_InitStruct.Pin = ENC_MODE0_Pin;
 80008c6:	2302      	movs	r3, #2
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_MODE0_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <MX_GPIO_Init+0x128>)
 80008da:	f000 fd7b 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRG_OUT_Pin */
  GPIO_InitStruct.Pin = TRG_OUT_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e6:	2302      	movs	r3, #2
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRG_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	4812      	ldr	r0, [pc, #72]	; (8000940 <MX_GPIO_Init+0x120>)
 80008f6:	f000 fd6d 	bl	80013d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_INT_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_INT_Pin;
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_INDEX_INT_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_GPIO_Init+0x124>)
 8000910:	f000 fd60 	bl	80013d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2006      	movs	r0, #6
 800091a:	f000 fd16 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800091e:	2006      	movs	r0, #6
 8000920:	f000 fd2f 	bl	8001382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2017      	movs	r0, #23
 800092a:	f000 fd0e 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800092e:	2017      	movs	r0, #23
 8000930:	f000 fd27 	bl	8001382 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENC_INDEX_INT_Pin)
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	2b80      	cmp	r3, #128	; 0x80
 800095a:	d105      	bne.n	8000968 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		printf("Encoder Z\r\n");
 800095c:	4840      	ldr	r0, [pc, #256]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x114>)
 800095e:	f002 fe43 	bl	80035e8 <puts>
		count_encoder_value_diff();
 8000962:	f000 f8bd 	bl	8000ae0 <count_encoder_value_diff>
			break;
		}

	}

}
 8000966:	e076      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
	else if(GPIO_Pin == ENC_MODE_INT_Pin)
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d173      	bne.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
		mode  = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800096e:	2102      	movs	r1, #2
 8000970:	483c      	ldr	r0, [pc, #240]	; (8000a64 <HAL_GPIO_EXTI_Callback+0x118>)
 8000972:	f000 fec3 	bl	80016fc <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 800097c:	701a      	strb	r2, [r3, #0]
		mode |= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)<<1;
 800097e:	2102      	movs	r1, #2
 8000980:	483a      	ldr	r0, [pc, #232]	; (8000a6c <HAL_GPIO_EXTI_Callback+0x120>)
 8000982:	f000 febb 	bl	80016fc <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b25a      	sxtb	r2, r3
 800098c:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b25b      	sxtb	r3, r3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 800099a:	701a      	strb	r2, [r3, #0]
		mode |= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)<<2;
 800099c:	2101      	movs	r1, #1
 800099e:	4833      	ldr	r0, [pc, #204]	; (8000a6c <HAL_GPIO_EXTI_Callback+0x120>)
 80009a0:	f000 feac 	bl	80016fc <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	b25a      	sxtb	r2, r3
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009b8:	701a      	strb	r2, [r3, #0]
		printf("check Encoder working mode: %d\r\n", mode);
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	482b      	ldr	r0, [pc, #172]	; (8000a70 <HAL_GPIO_EXTI_Callback+0x124>)
 80009c2:	f002 fdab 	bl	800351c <iprintf>
		switch(mode)
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b07      	cmp	r3, #7
 80009cc:	d83e      	bhi.n	8000a4c <HAL_GPIO_EXTI_Callback+0x100>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <HAL_GPIO_EXTI_Callback+0x88>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009f5 	.word	0x080009f5
 80009d8:	080009fd 	.word	0x080009fd
 80009dc:	08000a05 	.word	0x08000a05
 80009e0:	08000a0d 	.word	0x08000a0d
 80009e4:	08000a15 	.word	0x08000a15
 80009e8:	08000a2b 	.word	0x08000a2b
 80009ec:	08000a55 	.word	0x08000a55
 80009f0:	08000a45 	.word	0x08000a45
				printf("dmi-mode : START_ENCODER_MEASURE_DISTANCE\r\n");
 80009f4:	481f      	ldr	r0, [pc, #124]	; (8000a74 <HAL_GPIO_EXTI_Callback+0x128>)
 80009f6:	f002 fdf7 	bl	80035e8 <puts>
			break;
 80009fa:	e02c      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
				printf("dmi-mode : STOP_ENCODER_MEASURE_DISTANCE\r\n");
 80009fc:	481e      	ldr	r0, [pc, #120]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x12c>)
 80009fe:	f002 fdf3 	bl	80035e8 <puts>
			break;
 8000a02:	e028      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
				printf("dmi-mode : START_ENCODER_CALIBRATION\r\n");
 8000a04:	481d      	ldr	r0, [pc, #116]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x130>)
 8000a06:	f002 fdef 	bl	80035e8 <puts>
			break;
 8000a0a:	e024      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
				printf("dmi-mode : STOP_ENCODER_CALIBRATION\r\n");
 8000a0c:	481c      	ldr	r0, [pc, #112]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x134>)
 8000a0e:	f002 fdeb 	bl	80035e8 <puts>
			break;
 8000a12:	e020      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
				printf("dmi-mode : START_DISTANCE_CALIBRATION\r\n");
 8000a14:	481b      	ldr	r0, [pc, #108]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x138>)
 8000a16:	f002 fde7 	bl	80035e8 <puts>
 				HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a1a:	2017      	movs	r0, #23
 8000a1c:	f000 fcb1 	bl	8001382 <HAL_NVIC_EnableIRQ>
 				HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000a20:	213c      	movs	r1, #60	; 0x3c
 8000a22:	4819      	ldr	r0, [pc, #100]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a24:	f001 fd0c 	bl	8002440 <HAL_TIM_Encoder_Start>
			break;
 8000a28:	e015      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
				printf("dmi-mode : STOP_DISTANCE_CALIBRATION\r\n");
 8000a2a:	4818      	ldr	r0, [pc, #96]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x140>)
 8000a2c:	f002 fddc 	bl	80035e8 <puts>
				HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000a30:	2017      	movs	r0, #23
 8000a32:	f000 fcb4 	bl	800139e <HAL_NVIC_DisableIRQ>
				HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8000a36:	213c      	movs	r1, #60	; 0x3c
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000a3a:	f001 fd8f 	bl	800255c <HAL_TIM_Encoder_Stop>
				count_encoder_value_diff();
 8000a3e:	f000 f84f 	bl	8000ae0 <count_encoder_value_diff>
			break;
 8000a42:	e008      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
				printf("dmi-mode : ENCODER_IDLE\r\n");
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a46:	f002 fdcf 	bl	80035e8 <puts>
			break;
 8000a4a:	e004      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
				printf("dmi-mode : ENCODER_IDLE\r\n");
 8000a4c:	4810      	ldr	r0, [pc, #64]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x144>)
 8000a4e:	f002 fdcb 	bl	80035e8 <puts>
			break;
 8000a52:	e000      	b.n	8000a56 <HAL_GPIO_EXTI_Callback+0x10a>
			break;
 8000a54:	bf00      	nop
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	080042e8 	.word	0x080042e8
 8000a64:	40020000 	.word	0x40020000
 8000a68:	20000170 	.word	0x20000170
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	080042f4 	.word	0x080042f4
 8000a74:	08004318 	.word	0x08004318
 8000a78:	08004344 	.word	0x08004344
 8000a7c:	08004370 	.word	0x08004370
 8000a80:	08004398 	.word	0x08004398
 8000a84:	080043c0 	.word	0x080043c0
 8000a88:	20000084 	.word	0x20000084
 8000a8c:	080043e8 	.word	0x080043e8
 8000a90:	08004410 	.word	0x08004410

08000a94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
   if(htim == &htim1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d102      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x16>
   {
    /*Encoder Overflow Handler here*/
	  printf("TIM1 Counter update\r\n");
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000aa6:	f002 fd9f 	bl	80035e8 <puts>
   }
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	0800442c 	.word	0x0800442c

08000abc <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ac4:	1d39      	adds	r1, r7, #4
 8000ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aca:	2201      	movs	r2, #1
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <__io_putchar+0x20>)
 8000ace:	f002 f8a7 	bl	8002c20 <HAL_UART_Transmit>

  return ch;
 8000ad2:	687b      	ldr	r3, [r7, #4]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000114 	.word	0x20000114

08000ae0 <count_encoder_value_diff>:
	currentCount =  __HAL_TIM_GET_COUNTER(&htim1);
	printf("currentCount : %ld\r\n", currentCount);
}

void count_encoder_value_diff(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	currentCount =  __HAL_TIM_GET_COUNTER(&htim1);
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <count_encoder_value_diff+0xa0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <count_encoder_value_diff+0xa4>)
 8000aee:	601a      	str	r2, [r3, #0]
	printf("currentCount : %ld\r\n", currentCount);
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <count_encoder_value_diff+0xa4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4824      	ldr	r0, [pc, #144]	; (8000b88 <count_encoder_value_diff+0xa8>)
 8000af8:	f002 fd10 	bl	800351c <iprintf>

	if(currentCount - prevCount<0)
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <count_encoder_value_diff+0xa4>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <count_encoder_value_diff+0xac>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da09      	bge.n	8000b1e <count_encoder_value_diff+0x3e>
	{
		count_diff = currentCount - prevCount + 65536;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <count_encoder_value_diff+0xa4>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <count_encoder_value_diff+0xac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <count_encoder_value_diff+0xb0>)
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e006      	b.n	8000b2c <count_encoder_value_diff+0x4c>
	}
	else
	{
		count_diff = currentCount - prevCount;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <count_encoder_value_diff+0xa4>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <count_encoder_value_diff+0xac>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <count_encoder_value_diff+0xb0>)
 8000b2a:	6013      	str	r3, [r2, #0]
	}

	encoder_cnt_total+=count_diff;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <count_encoder_value_diff+0xb0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <count_encoder_value_diff+0xb4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <count_encoder_value_diff+0xb4>)
 8000b3a:	6013      	str	r3, [r2, #0]

 	printf("count_diff : %ld\r\n", count_diff);
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <count_encoder_value_diff+0xb0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	4815      	ldr	r0, [pc, #84]	; (8000b98 <count_encoder_value_diff+0xb8>)
 8000b44:	f002 fcea 	bl	800351c <iprintf>
 	printf("encoder_cnt_total : %ld\r\n", encoder_cnt_total);
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <count_encoder_value_diff+0xb4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <count_encoder_value_diff+0xbc>)
 8000b50:	f002 fce4 	bl	800351c <iprintf>

	sent_data_to_dmi(count_diff);
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <count_encoder_value_diff+0xb0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f822 	bl	8000ba4 <sent_data_to_dmi>

	tempCount = currentCount;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <count_encoder_value_diff+0xa4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <count_encoder_value_diff+0xc0>)
 8000b66:	6013      	str	r3, [r2, #0]
	prevCount = tempCount;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <count_encoder_value_diff+0xc0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <count_encoder_value_diff+0xac>)
 8000b6e:	6013      	str	r3, [r2, #0]
	currentCount = 0;
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <count_encoder_value_diff+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
	count_diff = 0;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <count_encoder_value_diff+0xb0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000084 	.word	0x20000084
 8000b84:	2000015c 	.word	0x2000015c
 8000b88:	08004444 	.word	0x08004444
 8000b8c:	20000160 	.word	0x20000160
 8000b90:	20000168 	.word	0x20000168
 8000b94:	2000016c 	.word	0x2000016c
 8000b98:	0800445c 	.word	0x0800445c
 8000b9c:	08004470 	.word	0x08004470
 8000ba0:	20000164 	.word	0x20000164

08000ba4 <sent_data_to_dmi>:
	return VarDataTab[0];
}


void sent_data_to_dmi(uint16_t data)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
	if(data>0)
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d015      	beq.n	8000be0 <sent_data_to_dmi+0x3c>
	{
		aTxBuffer[0] = data>>8;
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <sent_data_to_dmi+0x44>)
 8000bbe:	701a      	strb	r2, [r3, #0]
		aTxBuffer[1] = data;
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <sent_data_to_dmi+0x44>)
 8000bc6:	705a      	strb	r2, [r3, #1]

//		if(HAL_UART_Transmit_IT(&huart1, (uint8_t*)aTxBuffer, sizeof(aTxBuffer))!= HAL_OK)
		if(HAL_UART_Transmit(&huart1, (uint8_t*)aTxBuffer, sizeof(aTxBuffer),0xFFFF)!= HAL_OK)
 8000bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bcc:	2202      	movs	r2, #2
 8000bce:	4906      	ldr	r1, [pc, #24]	; (8000be8 <sent_data_to_dmi+0x44>)
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <sent_data_to_dmi+0x48>)
 8000bd2:	f002 f825 	bl	8002c20 <HAL_UART_Transmit>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <sent_data_to_dmi+0x3c>
		{
			Error_Handler();
 8000bdc:	f000 f808 	bl	8000bf0 <Error_Handler>
		}

	}
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000174 	.word	0x20000174
 8000bec:	200000cc 	.word	0x200000cc

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_TIM_Encoder_MspInit+0x94>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d134      	bne.n	8000cd8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000cc4:	f000 fb86 	bl	80013d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2019      	movs	r0, #25
 8000cce:	f000 fb3c 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cd2:	2019      	movs	r0, #25
 8000cd4:	f000 fb55 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a41      	ldr	r2, [pc, #260]	; (8000e10 <HAL_UART_MspInit+0x124>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d14b      	bne.n	8000da6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a3f      	ldr	r2, [pc, #252]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a38      	ldr	r2, [pc, #224]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d74:	2307      	movs	r3, #7
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4826      	ldr	r0, [pc, #152]	; (8000e18 <HAL_UART_MspInit+0x12c>)
 8000d80:	f000 fb28 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d84:	2340      	movs	r3, #64	; 0x40
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d94:	2307      	movs	r3, #7
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481f      	ldr	r0, [pc, #124]	; (8000e1c <HAL_UART_MspInit+0x130>)
 8000da0:	f000 fb18 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da4:	e030      	b.n	8000e08 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_UART_MspInit+0x134>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d12b      	bne.n	8000e08 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_UART_MspInit+0x128>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de8:	230c      	movs	r3, #12
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_UART_MspInit+0x12c>)
 8000e04:	f000 fae6 	bl	80013d4 <HAL_GPIO_Init>
}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	; 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40004400 	.word	0x40004400

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f94c 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_MODE_INT_Pin);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 fc6f 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_INDEX_INT_Pin);
 8000e8a:	2080      	movs	r0, #128	; 0x80
 8000e8c:	f000 fc68 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e9a:	f001 fbf6 	bl	800268a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000084 	.word	0x20000084

08000ea8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00a      	b.n	8000ed0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eba:	f3af 8000 	nop.w
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	b2ca      	uxtb	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf0      	blt.n	8000eba <_read+0x12>
  }

  return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e009      	b.n	8000f08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fddd 	bl	8000abc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf1      	blt.n	8000ef4 <_write+0x12>
  }
  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f002 fc46 	bl	8003844 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000178 	.word	0x20000178
 8000fec:	200002d0 	.word	0x200002d0

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001042:	f002 fc05 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fab1 	bl	80005ac <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001058:	080044e8 	.word	0x080044e8
  ldr r2, =_sbss
 800105c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001060:	200002cc 	.word	0x200002cc

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f94f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fdae 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f975 	bl	80013ba <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	2000017c 	.word	0x2000017c

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000017c 	.word	0x2000017c

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db12      	blt.n	8001224 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	490a      	ldr	r1, [pc, #40]	; (8001230 <__NVIC_DisableIRQ+0x44>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	3320      	adds	r3, #32
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
}
 800121c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800121e:	f3bf 8f6f 	isb	sy
}
 8001222:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff05 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff1a 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff0d 	bl	80011b0 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff1d 	bl	80011ec <__NVIC_DisableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff94 	bl	80012f0 <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e165      	b.n	80016bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 8154 	bne.w	80016b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d005      	beq.n	8001426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	2b02      	cmp	r3, #2
 8001424:	d130      	bne.n	8001488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b03      	cmp	r3, #3
 8001492:	d017      	beq.n	80014c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d123      	bne.n	8001518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0203 	and.w	r2, r3, #3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80ae 	beq.w	80016b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_GPIO_Init+0x300>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a5c      	ldr	r2, [pc, #368]	; (80016d4 <HAL_GPIO_Init+0x300>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_GPIO_Init+0x300>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_GPIO_Init+0x304>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <HAL_GPIO_Init+0x308>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d025      	beq.n	80015ee <HAL_GPIO_Init+0x21a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4e      	ldr	r2, [pc, #312]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01f      	beq.n	80015ea <HAL_GPIO_Init+0x216>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4d      	ldr	r2, [pc, #308]	; (80016e4 <HAL_GPIO_Init+0x310>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d019      	beq.n	80015e6 <HAL_GPIO_Init+0x212>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4c      	ldr	r2, [pc, #304]	; (80016e8 <HAL_GPIO_Init+0x314>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x20e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4b      	ldr	r2, [pc, #300]	; (80016ec <HAL_GPIO_Init+0x318>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x20a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <HAL_GPIO_Init+0x31c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x206>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a49      	ldr	r2, [pc, #292]	; (80016f4 <HAL_GPIO_Init+0x320>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x202>
 80015d2:	2306      	movs	r3, #6
 80015d4:	e00c      	b.n	80015f0 <HAL_GPIO_Init+0x21c>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e00a      	b.n	80015f0 <HAL_GPIO_Init+0x21c>
 80015da:	2305      	movs	r3, #5
 80015dc:	e008      	b.n	80015f0 <HAL_GPIO_Init+0x21c>
 80015de:	2304      	movs	r3, #4
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x21c>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e004      	b.n	80015f0 <HAL_GPIO_Init+0x21c>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_Init+0x21c>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x21c>
 80015ee:	2300      	movs	r3, #0
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	4093      	lsls	r3, r2
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001600:	4935      	ldr	r1, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x304>)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <HAL_GPIO_Init+0x324>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a31      	ldr	r2, [pc, #196]	; (80016f8 <HAL_GPIO_Init+0x324>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_GPIO_Init+0x324>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a26      	ldr	r2, [pc, #152]	; (80016f8 <HAL_GPIO_Init+0x324>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_GPIO_Init+0x324>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <HAL_GPIO_Init+0x324>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_GPIO_Init+0x324>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b0:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <HAL_GPIO_Init+0x324>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	f67f ae96 	bls.w	80013f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40021400 	.word	0x40021400
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40013c00 	.word	0x40013c00

080016fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e001      	b.n	800171e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f8e4 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40013c00 	.word	0x40013c00

08001790 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_PWREx_EnableOverDrive+0x90>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_PWREx_EnableOverDrive+0x90>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_PWREx_EnableOverDrive+0x90>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_PWREx_EnableOverDrive+0x94>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017bc:	f7ff fcba 	bl	8001134 <HAL_GetTick>
 80017c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017c2:	e009      	b.n	80017d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017c4:	f7ff fcb6 	bl	8001134 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d2:	d901      	bls.n	80017d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e01f      	b.n	8001818 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_PWREx_EnableOverDrive+0x98>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d1ee      	bne.n	80017c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ec:	f7ff fca2 	bl	8001134 <HAL_GetTick>
 80017f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017f2:	e009      	b.n	8001808 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f4:	f7ff fc9e 	bl	8001134 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001802:	d901      	bls.n	8001808 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e007      	b.n	8001818 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_PWREx_EnableOverDrive+0x98>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001814:	d1ee      	bne.n	80017f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	420e0040 	.word	0x420e0040
 8001828:	40007000 	.word	0x40007000
 800182c:	420e0044 	.word	0x420e0044

08001830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0cc      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d90c      	bls.n	800186c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d044      	beq.n	8001950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d119      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e067      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4934      	ldr	r1, [pc, #208]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff fc08 	bl	8001134 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff fc04 	bl	8001134 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e04f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d20c      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f855 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	490a      	ldr	r1, [pc, #40]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb68 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00
 80019ec:	40023800 	.word	0x40023800
 80019f0:	0800448c 	.word	0x0800448c
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a18:	f7ff fff0 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0a9b      	lsrs	r3, r3, #10
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	0800449c 	.word	0x0800449c

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a40:	f7ff ffdc 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	0b5b      	lsrs	r3, r3, #13
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	0800449c 	.word	0x0800449c

08001a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b0a6      	sub	sp, #152	; 0x98
 8001a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a8a:	4bc8      	ldr	r3, [pc, #800]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	f200 817e 	bhi.w	8001d94 <HAL_RCC_GetSysClockFreq+0x330>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001ad5 	.word	0x08001ad5
 8001aa4:	08001d95 	.word	0x08001d95
 8001aa8:	08001d95 	.word	0x08001d95
 8001aac:	08001d95 	.word	0x08001d95
 8001ab0:	08001add 	.word	0x08001add
 8001ab4:	08001d95 	.word	0x08001d95
 8001ab8:	08001d95 	.word	0x08001d95
 8001abc:	08001d95 	.word	0x08001d95
 8001ac0:	08001ae5 	.word	0x08001ae5
 8001ac4:	08001d95 	.word	0x08001d95
 8001ac8:	08001d95 	.word	0x08001d95
 8001acc:	08001d95 	.word	0x08001d95
 8001ad0:	08001c4f 	.word	0x08001c4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4bb6      	ldr	r3, [pc, #728]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001ada:	e15f      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001adc:	4bb5      	ldr	r3, [pc, #724]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001ae2:	e15b      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae4:	4bb1      	ldr	r3, [pc, #708]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af0:	4bae      	ldr	r3, [pc, #696]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d031      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	4bab      	ldr	r3, [pc, #684]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	2200      	movs	r2, #0
 8001b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0e:	663b      	str	r3, [r7, #96]	; 0x60
 8001b10:	2300      	movs	r3, #0
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
 8001b14:	4ba7      	ldr	r3, [pc, #668]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b16:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b1a:	462a      	mov	r2, r5
 8001b1c:	fb03 f202 	mul.w	r2, r3, r2
 8001b20:	2300      	movs	r3, #0
 8001b22:	4621      	mov	r1, r4
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	4aa2      	ldr	r2, [pc, #648]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	fba1 1202 	umull	r1, r2, r1, r2
 8001b32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001b34:	460a      	mov	r2, r1
 8001b36:	67ba      	str	r2, [r7, #120]	; 0x78
 8001b38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b3a:	4413      	add	r3, r2
 8001b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b42:	2200      	movs	r2, #0
 8001b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b4c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b50:	f7fe fbae 	bl	80002b0 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b5e:	e064      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	2200      	movs	r2, #0
 8001b68:	653b      	str	r3, [r7, #80]	; 0x50
 8001b6a:	657a      	str	r2, [r7, #84]	; 0x54
 8001b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b78:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	462b      	mov	r3, r5
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	0159      	lsls	r1, r3, #5
 8001b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8e:	0150      	lsls	r0, r2, #5
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4621      	mov	r1, r4
 8001b96:	1a51      	subs	r1, r2, r1
 8001b98:	6139      	str	r1, [r7, #16]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bae:	4659      	mov	r1, fp
 8001bb0:	018b      	lsls	r3, r1, #6
 8001bb2:	4651      	mov	r1, sl
 8001bb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bb8:	4651      	mov	r1, sl
 8001bba:	018a      	lsls	r2, r1, #6
 8001bbc:	4651      	mov	r1, sl
 8001bbe:	ebb2 0801 	subs.w	r8, r2, r1
 8001bc2:	4659      	mov	r1, fp
 8001bc4:	eb63 0901 	sbc.w	r9, r3, r1
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bdc:	4690      	mov	r8, r2
 8001bde:	4699      	mov	r9, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	eb18 0303 	adds.w	r3, r8, r3
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	462b      	mov	r3, r5
 8001bea:	eb49 0303 	adc.w	r3, r9, r3
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	028b      	lsls	r3, r1, #10
 8001c00:	4621      	mov	r1, r4
 8001c02:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c06:	4621      	mov	r1, r4
 8001c08:	028a      	lsls	r2, r1, #10
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c12:	2200      	movs	r2, #0
 8001c14:	643b      	str	r3, [r7, #64]	; 0x40
 8001c16:	647a      	str	r2, [r7, #68]	; 0x44
 8001c18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c1c:	f7fe fb48 	bl	80002b0 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	3301      	adds	r3, #1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001c3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c4c:	e0a6      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d02a      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c66:	4b51      	ldr	r3, [pc, #324]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c7c:	fb03 f201 	mul.w	r2, r3, r1
 8001c80:	2300      	movs	r3, #0
 8001c82:	fb00 f303 	mul.w	r3, r0, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	4a4a      	ldr	r2, [pc, #296]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c8e:	677a      	str	r2, [r7, #116]	; 0x74
 8001c90:	460a      	mov	r2, r1
 8001c92:	673a      	str	r2, [r7, #112]	; 0x70
 8001c94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c96:	4413      	add	r3, r2
 8001c98:	677b      	str	r3, [r7, #116]	; 0x74
 8001c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca2:	637a      	str	r2, [r7, #52]	; 0x34
 8001ca4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ca8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001cac:	f7fe fb00 	bl	80002b0 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cba:	e05b      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cd8:	4642      	mov	r2, r8
 8001cda:	464b      	mov	r3, r9
 8001cdc:	f04f 0000 	mov.w	r0, #0
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	0159      	lsls	r1, r3, #5
 8001ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cea:	0150      	lsls	r0, r2, #5
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cf6:	4649      	mov	r1, r9
 8001cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d10:	ebb2 040a 	subs.w	r4, r2, sl
 8001d14:	eb63 050b 	sbc.w	r5, r3, fp
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	00eb      	lsls	r3, r5, #3
 8001d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d26:	00e2      	lsls	r2, r4, #3
 8001d28:	4614      	mov	r4, r2
 8001d2a:	461d      	mov	r5, r3
 8001d2c:	4643      	mov	r3, r8
 8001d2e:	18e3      	adds	r3, r4, r3
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	464b      	mov	r3, r9
 8001d34:	eb45 0303 	adc.w	r3, r5, r3
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d46:	4629      	mov	r1, r5
 8001d48:	028b      	lsls	r3, r1, #10
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d50:	4621      	mov	r1, r4
 8001d52:	028a      	lsls	r2, r1, #10
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	61fa      	str	r2, [r7, #28]
 8001d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d66:	f7fe faa3 	bl	80002b0 <__aeabi_uldivmod>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4613      	mov	r3, r2
 8001d70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_GetSysClockFreq+0x348>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0f1b      	lsrs	r3, r3, #28
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d92:	e003      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3798      	adds	r7, #152	; 0x98
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	017d7840 	.word	0x017d7840

08001db8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e28d      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8083 	beq.w	8001ede <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dd8:	4b94      	ldr	r3, [pc, #592]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d019      	beq.n	8001e18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de4:	4b91      	ldr	r3, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001df0:	4b8e      	ldr	r3, [pc, #568]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dfc:	d00c      	beq.n	8001e18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d112      	bne.n	8001e30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0a:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	4b84      	ldr	r3, [pc, #528]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d05b      	beq.n	8001edc <HAL_RCC_OscConfig+0x124>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d157      	bne.n	8001edc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e25a      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d106      	bne.n	8001e48 <HAL_RCC_OscConfig+0x90>
 8001e3a:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7b      	ldr	r2, [pc, #492]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e01d      	b.n	8001e84 <HAL_RCC_OscConfig+0xcc>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0xb4>
 8001e52:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a75      	ldr	r2, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0xcc>
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6e      	ldr	r2, [pc, #440]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b6c      	ldr	r3, [pc, #432]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6b      	ldr	r2, [pc, #428]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f952 	bl	8001134 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff f94e 	bl	8001134 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e21f      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b61      	ldr	r3, [pc, #388]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0xdc>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f93e 	bl	8001134 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f93a 	bl	8001134 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e20b      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x104>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d06f      	beq.n	8001fca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d017      	beq.n	8001f26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef6:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f02:	4b4a      	ldr	r3, [pc, #296]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x186>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1d3      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4937      	ldr	r1, [pc, #220]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	e03a      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_OscConfig+0x278>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff f8e7 	bl	8001134 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f8e3 	bl	8001134 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1b4      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4925      	ldr	r1, [pc, #148]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x278>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f8c6 	bl	8001134 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff f8c2 	bl	8001134 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e193      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d036      	beq.n	8002044 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_RCC_OscConfig+0x27c>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f8a6 	bl	8001134 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff f8a2 	bl	8001134 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e173      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x274>)
 8002000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x234>
 800200a:	e01b      	b.n	8002044 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_OscConfig+0x27c>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7ff f88f 	bl	8001134 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	e00e      	b.n	8002038 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201a:	f7ff f88b 	bl	8001134 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d907      	bls.n	8002038 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e15c      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
 800202c:	40023800 	.word	0x40023800
 8002030:	42470000 	.word	0x42470000
 8002034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ea      	bne.n	800201a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8097 	beq.w	8002180 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a7e      	ldr	r2, [pc, #504]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b79      	ldr	r3, [pc, #484]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7ff f84b 	bl	8001134 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a2:	f7ff f847 	bl	8001134 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e118      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x4b0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x31e>
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	e01c      	b.n	8002110 <HAL_RCC_OscConfig+0x358>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x340>
 80020de:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a60      	ldr	r2, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0x358>
 80020f8:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a59      	ldr	r2, [pc, #356]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	4b57      	ldr	r3, [pc, #348]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a56      	ldr	r2, [pc, #344]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7ff f80c 	bl	8001134 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7ff f808 	bl	8001134 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0d7      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ee      	beq.n	8002120 <HAL_RCC_OscConfig+0x368>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe fff6 	bl	8001134 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe fff2 	bl	8001134 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0c1      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002162:	4b40      	ldr	r3, [pc, #256]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ee      	bne.n	800214c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a3a      	ldr	r2, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80ad 	beq.w	80022e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800218a:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	d060      	beq.n	8002258 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d145      	bne.n	800222a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_RCC_OscConfig+0x4b4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe ffc6 	bl	8001134 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe ffc2 	bl	8001134 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e093      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	3b01      	subs	r3, #1
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	071b      	lsls	r3, r3, #28
 80021f6:	491b      	ldr	r1, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x4b4>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe ff97 	bl	8001134 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe ff93 	bl	8001134 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e064      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x452>
 8002228:	e05c      	b.n	80022e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x4b4>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe ff80 	bl	8001134 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe ff7c 	bl	8001134 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04d      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x480>
 8002256:	e045      	b.n	80022e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e040      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000
 800226c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_RCC_OscConfig+0x538>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d030      	beq.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d129      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d122      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d119      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	085b      	lsrs	r3, r3, #1
 80022b8:	3b01      	subs	r3, #1
 80022ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10f      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e097      	b.n	8002438 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fc95 	bl	8000c4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002338:	f023 0307 	bic.w	r3, r3, #7
 800233c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f000 fab7 	bl	80028bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	4313      	orrs	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002394:	f023 030c 	bic.w	r3, r3, #12
 8002398:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	4313      	orrs	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	011a      	lsls	r2, r3, #4
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	031b      	lsls	r3, r3, #12
 80023c4:	4313      	orrs	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80023da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	4313      	orrs	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002450:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002458:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002460:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002468:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d110      	bne.n	8002492 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002476:	7b7b      	ldrb	r3, [r7, #13]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e069      	b.n	8002554 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002490:	e031      	b.n	80024f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d110      	bne.n	80024ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800249e:	7b3b      	ldrb	r3, [r7, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e055      	b.n	8002554 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b8:	e01d      	b.n	80024f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80024c0:	7bbb      	ldrb	r3, [r7, #14]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80024c6:	7b7b      	ldrb	r3, [r7, #13]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d102      	bne.n	80024d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80024cc:	7b3b      	ldrb	r3, [r7, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e03e      	b.n	8002554 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_TIM_Encoder_Start+0xc4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d008      	beq.n	8002514 <HAL_TIM_Encoder_Start+0xd4>
 8002502:	e00f      	b.n	8002524 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fa81 	bl	8002a14 <TIM_CCxChannelCmd>
      break;
 8002512:	e016      	b.n	8002542 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	2104      	movs	r1, #4
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fa79 	bl	8002a14 <TIM_CCxChannelCmd>
      break;
 8002522:	e00e      	b.n	8002542 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2201      	movs	r2, #1
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa71 	bl	8002a14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	2104      	movs	r1, #4
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fa6a 	bl	8002a14 <TIM_CCxChannelCmd>
      break;
 8002540:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_TIM_Encoder_Stop+0x18>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d008      	beq.n	8002584 <HAL_TIM_Encoder_Stop+0x28>
 8002572:	e00f      	b.n	8002594 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fa49 	bl	8002a14 <TIM_CCxChannelCmd>
      break;
 8002582:	e016      	b.n	80025b2 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	2104      	movs	r1, #4
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fa41 	bl	8002a14 <TIM_CCxChannelCmd>
      break;
 8002592:	e00e      	b.n	80025b2 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fa39 	bl	8002a14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	2104      	movs	r1, #4
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fa32 	bl	8002a14 <TIM_CCxChannelCmd>
      break;
 80025b0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1a      	ldr	r2, [r3, #32]
 80025b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <HAL_TIM_Encoder_Stop+0x86>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	f240 4344 	movw	r3, #1092	; 0x444
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_Encoder_Stop+0x86>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_TIM_Encoder_Stop+0x92>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d138      	bne.n	8002660 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_Encoder_Stop+0xa2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025fc:	e013      	b.n	8002626 <HAL_TIM_Encoder_Stop+0xca>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d104      	bne.n	800260e <HAL_TIM_Encoder_Stop+0xb2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800260c:	e00b      	b.n	8002626 <HAL_TIM_Encoder_Stop+0xca>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d104      	bne.n	800261e <HAL_TIM_Encoder_Stop+0xc2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	e003      	b.n	8002626 <HAL_TIM_Encoder_Stop+0xca>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d104      	bne.n	8002636 <HAL_TIM_Encoder_Stop+0xda>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002634:	e024      	b.n	8002680 <HAL_TIM_Encoder_Stop+0x124>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b04      	cmp	r3, #4
 800263a:	d104      	bne.n	8002646 <HAL_TIM_Encoder_Stop+0xea>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002644:	e01c      	b.n	8002680 <HAL_TIM_Encoder_Stop+0x124>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d104      	bne.n	8002656 <HAL_TIM_Encoder_Stop+0xfa>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002654:	e014      	b.n	8002680 <HAL_TIM_Encoder_Stop+0x124>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800265e:	e00f      	b.n	8002680 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01b      	beq.n	80026ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0202 	mvn.w	r2, #2
 80026be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8d2 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 80026da:	e005      	b.n	80026e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8c4 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8d5 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01b      	beq.n	800273a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f06f 0204 	mvn.w	r2, #4
 800270a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8ac 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002726:	e005      	b.n	8002734 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f89e 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8af 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01b      	beq.n	8002786 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f06f 0208 	mvn.w	r2, #8
 8002756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2204      	movs	r2, #4
 800275c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f886 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002772:	e005      	b.n	8002780 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f878 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f889 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01b      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f06f 0210 	mvn.w	r2, #16
 80027a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2208      	movs	r2, #8
 80027a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f860 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 80027be:	e005      	b.n	80027cc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f852 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f863 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00c      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f06f 0201 	mvn.w	r2, #1
 80027ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe f94f 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00c      	beq.n	800281a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f9a9 	bl	8002b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00c      	beq.n	800283e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f834 	bl	80028a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f06f 0220 	mvn.w	r2, #32
 800285a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f97b 	bl	8002b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a46      	ldr	r2, [pc, #280]	; (80029e8 <TIM_Base_SetConfig+0x12c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d013      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d00f      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a43      	ldr	r2, [pc, #268]	; (80029ec <TIM_Base_SetConfig+0x130>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00b      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <TIM_Base_SetConfig+0x134>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a41      	ldr	r2, [pc, #260]	; (80029f4 <TIM_Base_SetConfig+0x138>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a40      	ldr	r2, [pc, #256]	; (80029f8 <TIM_Base_SetConfig+0x13c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d108      	bne.n	800290e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a35      	ldr	r2, [pc, #212]	; (80029e8 <TIM_Base_SetConfig+0x12c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d027      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a32      	ldr	r2, [pc, #200]	; (80029ec <TIM_Base_SetConfig+0x130>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d023      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <TIM_Base_SetConfig+0x134>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <TIM_Base_SetConfig+0x138>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2f      	ldr	r2, [pc, #188]	; (80029f8 <TIM_Base_SetConfig+0x13c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d017      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2e      	ldr	r2, [pc, #184]	; (80029fc <TIM_Base_SetConfig+0x140>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a2d      	ldr	r2, [pc, #180]	; (8002a00 <TIM_Base_SetConfig+0x144>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00f      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2c      	ldr	r2, [pc, #176]	; (8002a04 <TIM_Base_SetConfig+0x148>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a2b      	ldr	r2, [pc, #172]	; (8002a08 <TIM_Base_SetConfig+0x14c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a2a      	ldr	r2, [pc, #168]	; (8002a0c <TIM_Base_SetConfig+0x150>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <TIM_Base_SetConfig+0x154>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <TIM_Base_SetConfig+0x12c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0xf8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <TIM_Base_SetConfig+0x13c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d103      	bne.n	80029bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f023 0201 	bic.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]
  }
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40010400 	.word	0x40010400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800
 8002a08:	40001800 	.word	0x40001800
 8002a0c:	40001c00 	.word	0x40001c00
 8002a10:	40002000 	.word	0x40002000

08002a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2201      	movs	r2, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	401a      	ands	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e05a      	b.n	8002b2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d022      	beq.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d01d      	beq.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d018      	beq.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	; (8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10c      	bne.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40000c00 	.word	0x40000c00
 8002b4c:	40010400 	.word	0x40010400
 8002b50:	40014000 	.word	0x40014000
 8002b54:	40001800 	.word	0x40001800

08002b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e042      	b.n	8002c18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe f8a0 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	; 0x24
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f973 	bl	8002eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d175      	bne.n	8002d2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_UART_Transmit+0x2c>
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e06e      	b.n	8002d2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c5e:	f7fe fa69 	bl	8001134 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	d108      	bne.n	8002c8c <HAL_UART_Transmit+0x6c>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	e003      	b.n	8002c94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c94:	e02e      	b.n	8002cf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f848 	bl	8002d36 <UART_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e03a      	b.n	8002d2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e007      	b.n	8002ce6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1cb      	bne.n	8002c96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2140      	movs	r1, #64	; 0x40
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f814 	bl	8002d36 <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e006      	b.n	8002d2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	4613      	mov	r3, r2
 8002d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d46:	e03b      	b.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d037      	beq.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d50:	f7fe f9f0 	bl	8001134 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d302      	bcc.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e03a      	b.n	8002de0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d020      	beq.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d01d      	beq.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d116      	bne.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f81d 	bl	8002de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2208      	movs	r2, #8
 8002db2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e00f      	b.n	8002de0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d0b4      	beq.n	8002d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b095      	sub	sp, #84	; 0x54
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e10:	643a      	str	r2, [r7, #64]	; 0x40
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e5      	bne.n	8002df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3314      	adds	r3, #20
 8002e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e5      	bne.n	8002e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d119      	bne.n	8002e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	330c      	adds	r3, #12
 8002e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f023 0310 	bic.w	r3, r3, #16
 8002e76:	647b      	str	r3, [r7, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e80:	61ba      	str	r2, [r7, #24]
 8002e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6979      	ldr	r1, [r7, #20]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	e841 2300 	strex	r3, r2, [r1]
 8002e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e5      	bne.n	8002e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ea2:	bf00      	nop
 8002ea4:	3754      	adds	r7, #84	; 0x54
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0c0      	sub	sp, #256	; 0x100
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	ea40 0301 	orr.w	r3, r0, r1
 8002ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f08:	f021 010c 	bic.w	r1, r1, #12
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f16:	430b      	orrs	r3, r1
 8002f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	6999      	ldr	r1, [r3, #24]
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	ea40 0301 	orr.w	r3, r0, r1
 8002f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b8f      	ldr	r3, [pc, #572]	; (800317c <UART_SetConfig+0x2cc>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d005      	beq.n	8002f50 <UART_SetConfig+0xa0>
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <UART_SetConfig+0x2d0>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d104      	bne.n	8002f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f50:	f7fe fd74 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8002f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f58:	e003      	b.n	8002f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5a:	f7fe fd5b 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8002f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6c:	f040 810c 	bne.w	8003188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f82:	4622      	mov	r2, r4
 8002f84:	462b      	mov	r3, r5
 8002f86:	1891      	adds	r1, r2, r2
 8002f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f8a:	415b      	adcs	r3, r3
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f92:	4621      	mov	r1, r4
 8002f94:	eb12 0801 	adds.w	r8, r2, r1
 8002f98:	4629      	mov	r1, r5
 8002f9a:	eb43 0901 	adc.w	r9, r3, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	eb18 0303 	adds.w	r3, r8, r3
 8002fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	eb49 0303 	adc.w	r3, r9, r3
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fde:	460b      	mov	r3, r1
 8002fe0:	18db      	adds	r3, r3, r3
 8002fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	eb42 0303 	adc.w	r3, r2, r3
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
 8002fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ff4:	f7fd f95c 	bl	80002b0 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <UART_SetConfig+0x2d4>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011c      	lsls	r4, r3, #4
 8003006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003020:	415b      	adcs	r3, r3
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003028:	4641      	mov	r1, r8
 800302a:	eb12 0a01 	adds.w	sl, r2, r1
 800302e:	4649      	mov	r1, r9
 8003030:	eb43 0b01 	adc.w	fp, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003048:	4692      	mov	sl, r2
 800304a:	469b      	mov	fp, r3
 800304c:	4643      	mov	r3, r8
 800304e:	eb1a 0303 	adds.w	r3, sl, r3
 8003052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003056:	464b      	mov	r3, r9
 8003058:	eb4b 0303 	adc.w	r3, fp, r3
 800305c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800306c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003074:	460b      	mov	r3, r1
 8003076:	18db      	adds	r3, r3, r3
 8003078:	643b      	str	r3, [r7, #64]	; 0x40
 800307a:	4613      	mov	r3, r2
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
 8003082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800308a:	f7fd f911 	bl	80002b0 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4611      	mov	r1, r2
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <UART_SetConfig+0x2d4>)
 8003096:	fba3 2301 	umull	r2, r3, r3, r1
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2264      	movs	r2, #100	; 0x64
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030aa:	4b36      	ldr	r3, [pc, #216]	; (8003184 <UART_SetConfig+0x2d4>)
 80030ac:	fba3 2302 	umull	r2, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b8:	441c      	add	r4, r3
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d4:	415b      	adcs	r3, r3
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030dc:	4641      	mov	r1, r8
 80030de:	1851      	adds	r1, r2, r1
 80030e0:	6339      	str	r1, [r7, #48]	; 0x30
 80030e2:	4649      	mov	r1, r9
 80030e4:	414b      	adcs	r3, r1
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030f4:	4659      	mov	r1, fp
 80030f6:	00cb      	lsls	r3, r1, #3
 80030f8:	4651      	mov	r1, sl
 80030fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fe:	4651      	mov	r1, sl
 8003100:	00ca      	lsls	r2, r1, #3
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	4603      	mov	r3, r0
 8003108:	4642      	mov	r2, r8
 800310a:	189b      	adds	r3, r3, r2
 800310c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003110:	464b      	mov	r3, r9
 8003112:	460a      	mov	r2, r1
 8003114:	eb42 0303 	adc.w	r3, r2, r3
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800312c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003130:	460b      	mov	r3, r1
 8003132:	18db      	adds	r3, r3, r3
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
 8003136:	4613      	mov	r3, r2
 8003138:	eb42 0303 	adc.w	r3, r2, r3
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003146:	f7fd f8b3 	bl	80002b0 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <UART_SetConfig+0x2d4>)
 8003150:	fba3 1302 	umull	r1, r3, r3, r2
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2164      	movs	r1, #100	; 0x64
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	3332      	adds	r3, #50	; 0x32
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <UART_SetConfig+0x2d4>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	f003 0207 	and.w	r2, r3, #7
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4422      	add	r2, r4
 8003176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003178:	e106      	b.n	8003388 <UART_SetConfig+0x4d8>
 800317a:	bf00      	nop
 800317c:	40011000 	.word	0x40011000
 8003180:	40011400 	.word	0x40011400
 8003184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800319a:	4642      	mov	r2, r8
 800319c:	464b      	mov	r3, r9
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6239      	str	r1, [r7, #32]
 80031a2:	415b      	adcs	r3, r3
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031aa:	4641      	mov	r1, r8
 80031ac:	1854      	adds	r4, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb43 0501 	adc.w	r5, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	00eb      	lsls	r3, r5, #3
 80031be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c2:	00e2      	lsls	r2, r4, #3
 80031c4:	4614      	mov	r4, r2
 80031c6:	461d      	mov	r5, r3
 80031c8:	4643      	mov	r3, r8
 80031ca:	18e3      	adds	r3, r4, r3
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d0:	464b      	mov	r3, r9
 80031d2:	eb45 0303 	adc.w	r3, r5, r3
 80031d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031f6:	4629      	mov	r1, r5
 80031f8:	008b      	lsls	r3, r1, #2
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003200:	4621      	mov	r1, r4
 8003202:	008a      	lsls	r2, r1, #2
 8003204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003208:	f7fd f852 	bl	80002b0 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4b60      	ldr	r3, [pc, #384]	; (8003394 <UART_SetConfig+0x4e4>)
 8003212:	fba3 2302 	umull	r2, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	011c      	lsls	r4, r3, #4
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	1891      	adds	r1, r2, r2
 8003232:	61b9      	str	r1, [r7, #24]
 8003234:	415b      	adcs	r3, r3
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	4641      	mov	r1, r8
 800323e:	1851      	adds	r1, r2, r1
 8003240:	6139      	str	r1, [r7, #16]
 8003242:	4649      	mov	r1, r9
 8003244:	414b      	adcs	r3, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003254:	4659      	mov	r1, fp
 8003256:	00cb      	lsls	r3, r1, #3
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325e:	4651      	mov	r1, sl
 8003260:	00ca      	lsls	r2, r1, #3
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	4603      	mov	r3, r0
 8003268:	4642      	mov	r2, r8
 800326a:	189b      	adds	r3, r3, r2
 800326c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003270:	464b      	mov	r3, r9
 8003272:	460a      	mov	r2, r1
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	67bb      	str	r3, [r7, #120]	; 0x78
 8003286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003294:	4649      	mov	r1, r9
 8003296:	008b      	lsls	r3, r1, #2
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329e:	4641      	mov	r1, r8
 80032a0:	008a      	lsls	r2, r1, #2
 80032a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032a6:	f7fd f803 	bl	80002b0 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <UART_SetConfig+0x4e4>)
 80032b2:	fba3 2301 	umull	r2, r3, r3, r1
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2264      	movs	r2, #100	; 0x64
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	1acb      	subs	r3, r1, r3
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	3332      	adds	r3, #50	; 0x32
 80032c4:	4a33      	ldr	r2, [pc, #204]	; (8003394 <UART_SetConfig+0x4e4>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d0:	441c      	add	r4, r3
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	673b      	str	r3, [r7, #112]	; 0x70
 80032da:	677a      	str	r2, [r7, #116]	; 0x74
 80032dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	415b      	adcs	r3, r3
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f0:	4641      	mov	r1, r8
 80032f2:	1851      	adds	r1, r2, r1
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	4649      	mov	r1, r9
 80032f8:	414b      	adcs	r3, r1
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003308:	4659      	mov	r1, fp
 800330a:	00cb      	lsls	r3, r1, #3
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003312:	4651      	mov	r1, sl
 8003314:	00ca      	lsls	r2, r1, #3
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	4603      	mov	r3, r0
 800331c:	4642      	mov	r2, r8
 800331e:	189b      	adds	r3, r3, r2
 8003320:	66bb      	str	r3, [r7, #104]	; 0x68
 8003322:	464b      	mov	r3, r9
 8003324:	460a      	mov	r2, r1
 8003326:	eb42 0303 	adc.w	r3, r2, r3
 800332a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	663b      	str	r3, [r7, #96]	; 0x60
 8003336:	667a      	str	r2, [r7, #100]	; 0x64
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003344:	4649      	mov	r1, r9
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	4641      	mov	r1, r8
 800334a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334e:	4641      	mov	r1, r8
 8003350:	008a      	lsls	r2, r1, #2
 8003352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003356:	f7fc ffab 	bl	80002b0 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <UART_SetConfig+0x4e4>)
 8003360:	fba3 1302 	umull	r1, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2164      	movs	r1, #100	; 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <UART_SetConfig+0x4e4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4422      	add	r2, r4
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003394:	51eb851f 	.word	0x51eb851f

08003398 <std>:
 8003398:	2300      	movs	r3, #0
 800339a:	b510      	push	{r4, lr}
 800339c:	4604      	mov	r4, r0
 800339e:	e9c0 3300 	strd	r3, r3, [r0]
 80033a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033a6:	6083      	str	r3, [r0, #8]
 80033a8:	8181      	strh	r1, [r0, #12]
 80033aa:	6643      	str	r3, [r0, #100]	; 0x64
 80033ac:	81c2      	strh	r2, [r0, #14]
 80033ae:	6183      	str	r3, [r0, #24]
 80033b0:	4619      	mov	r1, r3
 80033b2:	2208      	movs	r2, #8
 80033b4:	305c      	adds	r0, #92	; 0x5c
 80033b6:	f000 f9f7 	bl	80037a8 <memset>
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <std+0x58>)
 80033bc:	6263      	str	r3, [r4, #36]	; 0x24
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <std+0x5c>)
 80033c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <std+0x60>)
 80033c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <std+0x64>)
 80033c8:	6323      	str	r3, [r4, #48]	; 0x30
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <std+0x68>)
 80033cc:	6224      	str	r4, [r4, #32]
 80033ce:	429c      	cmp	r4, r3
 80033d0:	d006      	beq.n	80033e0 <std+0x48>
 80033d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80033d6:	4294      	cmp	r4, r2
 80033d8:	d002      	beq.n	80033e0 <std+0x48>
 80033da:	33d0      	adds	r3, #208	; 0xd0
 80033dc:	429c      	cmp	r4, r3
 80033de:	d105      	bne.n	80033ec <std+0x54>
 80033e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e8:	f000 ba56 	b.w	8003898 <__retarget_lock_init_recursive>
 80033ec:	bd10      	pop	{r4, pc}
 80033ee:	bf00      	nop
 80033f0:	080035f9 	.word	0x080035f9
 80033f4:	0800361b 	.word	0x0800361b
 80033f8:	08003653 	.word	0x08003653
 80033fc:	08003677 	.word	0x08003677
 8003400:	20000180 	.word	0x20000180

08003404 <stdio_exit_handler>:
 8003404:	4a02      	ldr	r2, [pc, #8]	; (8003410 <stdio_exit_handler+0xc>)
 8003406:	4903      	ldr	r1, [pc, #12]	; (8003414 <stdio_exit_handler+0x10>)
 8003408:	4803      	ldr	r0, [pc, #12]	; (8003418 <stdio_exit_handler+0x14>)
 800340a:	f000 b869 	b.w	80034e0 <_fwalk_sglue>
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c
 8003414:	08004145 	.word	0x08004145
 8003418:	20000018 	.word	0x20000018

0800341c <cleanup_stdio>:
 800341c:	6841      	ldr	r1, [r0, #4]
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <cleanup_stdio+0x34>)
 8003420:	4299      	cmp	r1, r3
 8003422:	b510      	push	{r4, lr}
 8003424:	4604      	mov	r4, r0
 8003426:	d001      	beq.n	800342c <cleanup_stdio+0x10>
 8003428:	f000 fe8c 	bl	8004144 <_fflush_r>
 800342c:	68a1      	ldr	r1, [r4, #8]
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <cleanup_stdio+0x38>)
 8003430:	4299      	cmp	r1, r3
 8003432:	d002      	beq.n	800343a <cleanup_stdio+0x1e>
 8003434:	4620      	mov	r0, r4
 8003436:	f000 fe85 	bl	8004144 <_fflush_r>
 800343a:	68e1      	ldr	r1, [r4, #12]
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <cleanup_stdio+0x3c>)
 800343e:	4299      	cmp	r1, r3
 8003440:	d004      	beq.n	800344c <cleanup_stdio+0x30>
 8003442:	4620      	mov	r0, r4
 8003444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003448:	f000 be7c 	b.w	8004144 <_fflush_r>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	bf00      	nop
 8003450:	20000180 	.word	0x20000180
 8003454:	200001e8 	.word	0x200001e8
 8003458:	20000250 	.word	0x20000250

0800345c <global_stdio_init.part.0>:
 800345c:	b510      	push	{r4, lr}
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <global_stdio_init.part.0+0x30>)
 8003460:	4c0b      	ldr	r4, [pc, #44]	; (8003490 <global_stdio_init.part.0+0x34>)
 8003462:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <global_stdio_init.part.0+0x38>)
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	4620      	mov	r0, r4
 8003468:	2200      	movs	r2, #0
 800346a:	2104      	movs	r1, #4
 800346c:	f7ff ff94 	bl	8003398 <std>
 8003470:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003474:	2201      	movs	r2, #1
 8003476:	2109      	movs	r1, #9
 8003478:	f7ff ff8e 	bl	8003398 <std>
 800347c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003480:	2202      	movs	r2, #2
 8003482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003486:	2112      	movs	r1, #18
 8003488:	f7ff bf86 	b.w	8003398 <std>
 800348c:	200002b8 	.word	0x200002b8
 8003490:	20000180 	.word	0x20000180
 8003494:	08003405 	.word	0x08003405

08003498 <__sfp_lock_acquire>:
 8003498:	4801      	ldr	r0, [pc, #4]	; (80034a0 <__sfp_lock_acquire+0x8>)
 800349a:	f000 b9fe 	b.w	800389a <__retarget_lock_acquire_recursive>
 800349e:	bf00      	nop
 80034a0:	200002c1 	.word	0x200002c1

080034a4 <__sfp_lock_release>:
 80034a4:	4801      	ldr	r0, [pc, #4]	; (80034ac <__sfp_lock_release+0x8>)
 80034a6:	f000 b9f9 	b.w	800389c <__retarget_lock_release_recursive>
 80034aa:	bf00      	nop
 80034ac:	200002c1 	.word	0x200002c1

080034b0 <__sinit>:
 80034b0:	b510      	push	{r4, lr}
 80034b2:	4604      	mov	r4, r0
 80034b4:	f7ff fff0 	bl	8003498 <__sfp_lock_acquire>
 80034b8:	6a23      	ldr	r3, [r4, #32]
 80034ba:	b11b      	cbz	r3, 80034c4 <__sinit+0x14>
 80034bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034c0:	f7ff bff0 	b.w	80034a4 <__sfp_lock_release>
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__sinit+0x28>)
 80034c6:	6223      	str	r3, [r4, #32]
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <__sinit+0x2c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f5      	bne.n	80034bc <__sinit+0xc>
 80034d0:	f7ff ffc4 	bl	800345c <global_stdio_init.part.0>
 80034d4:	e7f2      	b.n	80034bc <__sinit+0xc>
 80034d6:	bf00      	nop
 80034d8:	0800341d 	.word	0x0800341d
 80034dc:	200002b8 	.word	0x200002b8

080034e0 <_fwalk_sglue>:
 80034e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e4:	4607      	mov	r7, r0
 80034e6:	4688      	mov	r8, r1
 80034e8:	4614      	mov	r4, r2
 80034ea:	2600      	movs	r6, #0
 80034ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034f0:	f1b9 0901 	subs.w	r9, r9, #1
 80034f4:	d505      	bpl.n	8003502 <_fwalk_sglue+0x22>
 80034f6:	6824      	ldr	r4, [r4, #0]
 80034f8:	2c00      	cmp	r4, #0
 80034fa:	d1f7      	bne.n	80034ec <_fwalk_sglue+0xc>
 80034fc:	4630      	mov	r0, r6
 80034fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003502:	89ab      	ldrh	r3, [r5, #12]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d907      	bls.n	8003518 <_fwalk_sglue+0x38>
 8003508:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800350c:	3301      	adds	r3, #1
 800350e:	d003      	beq.n	8003518 <_fwalk_sglue+0x38>
 8003510:	4629      	mov	r1, r5
 8003512:	4638      	mov	r0, r7
 8003514:	47c0      	blx	r8
 8003516:	4306      	orrs	r6, r0
 8003518:	3568      	adds	r5, #104	; 0x68
 800351a:	e7e9      	b.n	80034f0 <_fwalk_sglue+0x10>

0800351c <iprintf>:
 800351c:	b40f      	push	{r0, r1, r2, r3}
 800351e:	b507      	push	{r0, r1, r2, lr}
 8003520:	4906      	ldr	r1, [pc, #24]	; (800353c <iprintf+0x20>)
 8003522:	ab04      	add	r3, sp, #16
 8003524:	6808      	ldr	r0, [r1, #0]
 8003526:	f853 2b04 	ldr.w	r2, [r3], #4
 800352a:	6881      	ldr	r1, [r0, #8]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	f000 fad9 	bl	8003ae4 <_vfiprintf_r>
 8003532:	b003      	add	sp, #12
 8003534:	f85d eb04 	ldr.w	lr, [sp], #4
 8003538:	b004      	add	sp, #16
 800353a:	4770      	bx	lr
 800353c:	20000064 	.word	0x20000064

08003540 <_puts_r>:
 8003540:	6a03      	ldr	r3, [r0, #32]
 8003542:	b570      	push	{r4, r5, r6, lr}
 8003544:	6884      	ldr	r4, [r0, #8]
 8003546:	4605      	mov	r5, r0
 8003548:	460e      	mov	r6, r1
 800354a:	b90b      	cbnz	r3, 8003550 <_puts_r+0x10>
 800354c:	f7ff ffb0 	bl	80034b0 <__sinit>
 8003550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003552:	07db      	lsls	r3, r3, #31
 8003554:	d405      	bmi.n	8003562 <_puts_r+0x22>
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	0598      	lsls	r0, r3, #22
 800355a:	d402      	bmi.n	8003562 <_puts_r+0x22>
 800355c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800355e:	f000 f99c 	bl	800389a <__retarget_lock_acquire_recursive>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	0719      	lsls	r1, r3, #28
 8003566:	d513      	bpl.n	8003590 <_puts_r+0x50>
 8003568:	6923      	ldr	r3, [r4, #16]
 800356a:	b18b      	cbz	r3, 8003590 <_puts_r+0x50>
 800356c:	3e01      	subs	r6, #1
 800356e:	68a3      	ldr	r3, [r4, #8]
 8003570:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003574:	3b01      	subs	r3, #1
 8003576:	60a3      	str	r3, [r4, #8]
 8003578:	b9e9      	cbnz	r1, 80035b6 <_puts_r+0x76>
 800357a:	2b00      	cmp	r3, #0
 800357c:	da2e      	bge.n	80035dc <_puts_r+0x9c>
 800357e:	4622      	mov	r2, r4
 8003580:	210a      	movs	r1, #10
 8003582:	4628      	mov	r0, r5
 8003584:	f000 f87b 	bl	800367e <__swbuf_r>
 8003588:	3001      	adds	r0, #1
 800358a:	d007      	beq.n	800359c <_puts_r+0x5c>
 800358c:	250a      	movs	r5, #10
 800358e:	e007      	b.n	80035a0 <_puts_r+0x60>
 8003590:	4621      	mov	r1, r4
 8003592:	4628      	mov	r0, r5
 8003594:	f000 f8b0 	bl	80036f8 <__swsetup_r>
 8003598:	2800      	cmp	r0, #0
 800359a:	d0e7      	beq.n	800356c <_puts_r+0x2c>
 800359c:	f04f 35ff 	mov.w	r5, #4294967295
 80035a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a2:	07da      	lsls	r2, r3, #31
 80035a4:	d405      	bmi.n	80035b2 <_puts_r+0x72>
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	059b      	lsls	r3, r3, #22
 80035aa:	d402      	bmi.n	80035b2 <_puts_r+0x72>
 80035ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ae:	f000 f975 	bl	800389c <__retarget_lock_release_recursive>
 80035b2:	4628      	mov	r0, r5
 80035b4:	bd70      	pop	{r4, r5, r6, pc}
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da04      	bge.n	80035c4 <_puts_r+0x84>
 80035ba:	69a2      	ldr	r2, [r4, #24]
 80035bc:	429a      	cmp	r2, r3
 80035be:	dc06      	bgt.n	80035ce <_puts_r+0x8e>
 80035c0:	290a      	cmp	r1, #10
 80035c2:	d004      	beq.n	80035ce <_puts_r+0x8e>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	6022      	str	r2, [r4, #0]
 80035ca:	7019      	strb	r1, [r3, #0]
 80035cc:	e7cf      	b.n	800356e <_puts_r+0x2e>
 80035ce:	4622      	mov	r2, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 f854 	bl	800367e <__swbuf_r>
 80035d6:	3001      	adds	r0, #1
 80035d8:	d1c9      	bne.n	800356e <_puts_r+0x2e>
 80035da:	e7df      	b.n	800359c <_puts_r+0x5c>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	250a      	movs	r5, #10
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	6022      	str	r2, [r4, #0]
 80035e4:	701d      	strb	r5, [r3, #0]
 80035e6:	e7db      	b.n	80035a0 <_puts_r+0x60>

080035e8 <puts>:
 80035e8:	4b02      	ldr	r3, [pc, #8]	; (80035f4 <puts+0xc>)
 80035ea:	4601      	mov	r1, r0
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	f7ff bfa7 	b.w	8003540 <_puts_r>
 80035f2:	bf00      	nop
 80035f4:	20000064 	.word	0x20000064

080035f8 <__sread>:
 80035f8:	b510      	push	{r4, lr}
 80035fa:	460c      	mov	r4, r1
 80035fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003600:	f000 f8fc 	bl	80037fc <_read_r>
 8003604:	2800      	cmp	r0, #0
 8003606:	bfab      	itete	ge
 8003608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800360a:	89a3      	ldrhlt	r3, [r4, #12]
 800360c:	181b      	addge	r3, r3, r0
 800360e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003612:	bfac      	ite	ge
 8003614:	6563      	strge	r3, [r4, #84]	; 0x54
 8003616:	81a3      	strhlt	r3, [r4, #12]
 8003618:	bd10      	pop	{r4, pc}

0800361a <__swrite>:
 800361a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800361e:	461f      	mov	r7, r3
 8003620:	898b      	ldrh	r3, [r1, #12]
 8003622:	05db      	lsls	r3, r3, #23
 8003624:	4605      	mov	r5, r0
 8003626:	460c      	mov	r4, r1
 8003628:	4616      	mov	r6, r2
 800362a:	d505      	bpl.n	8003638 <__swrite+0x1e>
 800362c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003630:	2302      	movs	r3, #2
 8003632:	2200      	movs	r2, #0
 8003634:	f000 f8d0 	bl	80037d8 <_lseek_r>
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800363e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003642:	81a3      	strh	r3, [r4, #12]
 8003644:	4632      	mov	r2, r6
 8003646:	463b      	mov	r3, r7
 8003648:	4628      	mov	r0, r5
 800364a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800364e:	f000 b8e7 	b.w	8003820 <_write_r>

08003652 <__sseek>:
 8003652:	b510      	push	{r4, lr}
 8003654:	460c      	mov	r4, r1
 8003656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800365a:	f000 f8bd 	bl	80037d8 <_lseek_r>
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	bf15      	itete	ne
 8003664:	6560      	strne	r0, [r4, #84]	; 0x54
 8003666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800366a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800366e:	81a3      	strheq	r3, [r4, #12]
 8003670:	bf18      	it	ne
 8003672:	81a3      	strhne	r3, [r4, #12]
 8003674:	bd10      	pop	{r4, pc}

08003676 <__sclose>:
 8003676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367a:	f000 b89d 	b.w	80037b8 <_close_r>

0800367e <__swbuf_r>:
 800367e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003680:	460e      	mov	r6, r1
 8003682:	4614      	mov	r4, r2
 8003684:	4605      	mov	r5, r0
 8003686:	b118      	cbz	r0, 8003690 <__swbuf_r+0x12>
 8003688:	6a03      	ldr	r3, [r0, #32]
 800368a:	b90b      	cbnz	r3, 8003690 <__swbuf_r+0x12>
 800368c:	f7ff ff10 	bl	80034b0 <__sinit>
 8003690:	69a3      	ldr	r3, [r4, #24]
 8003692:	60a3      	str	r3, [r4, #8]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	071a      	lsls	r2, r3, #28
 8003698:	d525      	bpl.n	80036e6 <__swbuf_r+0x68>
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	b31b      	cbz	r3, 80036e6 <__swbuf_r+0x68>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	6922      	ldr	r2, [r4, #16]
 80036a2:	1a98      	subs	r0, r3, r2
 80036a4:	6963      	ldr	r3, [r4, #20]
 80036a6:	b2f6      	uxtb	r6, r6
 80036a8:	4283      	cmp	r3, r0
 80036aa:	4637      	mov	r7, r6
 80036ac:	dc04      	bgt.n	80036b8 <__swbuf_r+0x3a>
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 fd47 	bl	8004144 <_fflush_r>
 80036b6:	b9e0      	cbnz	r0, 80036f2 <__swbuf_r+0x74>
 80036b8:	68a3      	ldr	r3, [r4, #8]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	60a3      	str	r3, [r4, #8]
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	6022      	str	r2, [r4, #0]
 80036c4:	701e      	strb	r6, [r3, #0]
 80036c6:	6962      	ldr	r2, [r4, #20]
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d004      	beq.n	80036d8 <__swbuf_r+0x5a>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	07db      	lsls	r3, r3, #31
 80036d2:	d506      	bpl.n	80036e2 <__swbuf_r+0x64>
 80036d4:	2e0a      	cmp	r6, #10
 80036d6:	d104      	bne.n	80036e2 <__swbuf_r+0x64>
 80036d8:	4621      	mov	r1, r4
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 fd32 	bl	8004144 <_fflush_r>
 80036e0:	b938      	cbnz	r0, 80036f2 <__swbuf_r+0x74>
 80036e2:	4638      	mov	r0, r7
 80036e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e6:	4621      	mov	r1, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	f000 f805 	bl	80036f8 <__swsetup_r>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d0d5      	beq.n	800369e <__swbuf_r+0x20>
 80036f2:	f04f 37ff 	mov.w	r7, #4294967295
 80036f6:	e7f4      	b.n	80036e2 <__swbuf_r+0x64>

080036f8 <__swsetup_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <__swsetup_r+0xac>)
 80036fc:	4605      	mov	r5, r0
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	460c      	mov	r4, r1
 8003702:	b118      	cbz	r0, 800370c <__swsetup_r+0x14>
 8003704:	6a03      	ldr	r3, [r0, #32]
 8003706:	b90b      	cbnz	r3, 800370c <__swsetup_r+0x14>
 8003708:	f7ff fed2 	bl	80034b0 <__sinit>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003712:	0718      	lsls	r0, r3, #28
 8003714:	d422      	bmi.n	800375c <__swsetup_r+0x64>
 8003716:	06d9      	lsls	r1, r3, #27
 8003718:	d407      	bmi.n	800372a <__swsetup_r+0x32>
 800371a:	2309      	movs	r3, #9
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	e034      	b.n	8003794 <__swsetup_r+0x9c>
 800372a:	0758      	lsls	r0, r3, #29
 800372c:	d512      	bpl.n	8003754 <__swsetup_r+0x5c>
 800372e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003730:	b141      	cbz	r1, 8003744 <__swsetup_r+0x4c>
 8003732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003736:	4299      	cmp	r1, r3
 8003738:	d002      	beq.n	8003740 <__swsetup_r+0x48>
 800373a:	4628      	mov	r0, r5
 800373c:	f000 f8b0 	bl	80038a0 <_free_r>
 8003740:	2300      	movs	r3, #0
 8003742:	6363      	str	r3, [r4, #52]	; 0x34
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	2300      	movs	r3, #0
 800374e:	6063      	str	r3, [r4, #4]
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	f043 0308 	orr.w	r3, r3, #8
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	6923      	ldr	r3, [r4, #16]
 800375e:	b94b      	cbnz	r3, 8003774 <__swsetup_r+0x7c>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376a:	d003      	beq.n	8003774 <__swsetup_r+0x7c>
 800376c:	4621      	mov	r1, r4
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fd36 	bl	80041e0 <__smakebuf_r>
 8003774:	89a0      	ldrh	r0, [r4, #12]
 8003776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800377a:	f010 0301 	ands.w	r3, r0, #1
 800377e:	d00a      	beq.n	8003796 <__swsetup_r+0x9e>
 8003780:	2300      	movs	r3, #0
 8003782:	60a3      	str	r3, [r4, #8]
 8003784:	6963      	ldr	r3, [r4, #20]
 8003786:	425b      	negs	r3, r3
 8003788:	61a3      	str	r3, [r4, #24]
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	b943      	cbnz	r3, 80037a0 <__swsetup_r+0xa8>
 800378e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003792:	d1c4      	bne.n	800371e <__swsetup_r+0x26>
 8003794:	bd38      	pop	{r3, r4, r5, pc}
 8003796:	0781      	lsls	r1, r0, #30
 8003798:	bf58      	it	pl
 800379a:	6963      	ldrpl	r3, [r4, #20]
 800379c:	60a3      	str	r3, [r4, #8]
 800379e:	e7f4      	b.n	800378a <__swsetup_r+0x92>
 80037a0:	2000      	movs	r0, #0
 80037a2:	e7f7      	b.n	8003794 <__swsetup_r+0x9c>
 80037a4:	20000064 	.word	0x20000064

080037a8 <memset>:
 80037a8:	4402      	add	r2, r0
 80037aa:	4603      	mov	r3, r0
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d100      	bne.n	80037b2 <memset+0xa>
 80037b0:	4770      	bx	lr
 80037b2:	f803 1b01 	strb.w	r1, [r3], #1
 80037b6:	e7f9      	b.n	80037ac <memset+0x4>

080037b8 <_close_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d06      	ldr	r5, [pc, #24]	; (80037d4 <_close_r+0x1c>)
 80037bc:	2300      	movs	r3, #0
 80037be:	4604      	mov	r4, r0
 80037c0:	4608      	mov	r0, r1
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	f7fd fba9 	bl	8000f1a <_close>
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d102      	bne.n	80037d2 <_close_r+0x1a>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <_close_r+0x1a>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	200002bc 	.word	0x200002bc

080037d8 <_lseek_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4d07      	ldr	r5, [pc, #28]	; (80037f8 <_lseek_r+0x20>)
 80037dc:	4604      	mov	r4, r0
 80037de:	4608      	mov	r0, r1
 80037e0:	4611      	mov	r1, r2
 80037e2:	2200      	movs	r2, #0
 80037e4:	602a      	str	r2, [r5, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f7fd fbbe 	bl	8000f68 <_lseek>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_lseek_r+0x1e>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_lseek_r+0x1e>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	200002bc 	.word	0x200002bc

080037fc <_read_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4d07      	ldr	r5, [pc, #28]	; (800381c <_read_r+0x20>)
 8003800:	4604      	mov	r4, r0
 8003802:	4608      	mov	r0, r1
 8003804:	4611      	mov	r1, r2
 8003806:	2200      	movs	r2, #0
 8003808:	602a      	str	r2, [r5, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	f7fd fb4c 	bl	8000ea8 <_read>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_read_r+0x1e>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_read_r+0x1e>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	200002bc 	.word	0x200002bc

08003820 <_write_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4d07      	ldr	r5, [pc, #28]	; (8003840 <_write_r+0x20>)
 8003824:	4604      	mov	r4, r0
 8003826:	4608      	mov	r0, r1
 8003828:	4611      	mov	r1, r2
 800382a:	2200      	movs	r2, #0
 800382c:	602a      	str	r2, [r5, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f7fd fb57 	bl	8000ee2 <_write>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_write_r+0x1e>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_write_r+0x1e>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	200002bc 	.word	0x200002bc

08003844 <__errno>:
 8003844:	4b01      	ldr	r3, [pc, #4]	; (800384c <__errno+0x8>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000064 	.word	0x20000064

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4d0d      	ldr	r5, [pc, #52]	; (8003888 <__libc_init_array+0x38>)
 8003854:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003856:	1b64      	subs	r4, r4, r5
 8003858:	10a4      	asrs	r4, r4, #2
 800385a:	2600      	movs	r6, #0
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	4d0b      	ldr	r5, [pc, #44]	; (8003890 <__libc_init_array+0x40>)
 8003862:	4c0c      	ldr	r4, [pc, #48]	; (8003894 <__libc_init_array+0x44>)
 8003864:	f000 fd2a 	bl	80042bc <_init>
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	2600      	movs	r6, #0
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	080044e0 	.word	0x080044e0
 800388c:	080044e0 	.word	0x080044e0
 8003890:	080044e0 	.word	0x080044e0
 8003894:	080044e4 	.word	0x080044e4

08003898 <__retarget_lock_init_recursive>:
 8003898:	4770      	bx	lr

0800389a <__retarget_lock_acquire_recursive>:
 800389a:	4770      	bx	lr

0800389c <__retarget_lock_release_recursive>:
 800389c:	4770      	bx	lr
	...

080038a0 <_free_r>:
 80038a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d044      	beq.n	8003930 <_free_r+0x90>
 80038a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038aa:	9001      	str	r0, [sp, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f1a1 0404 	sub.w	r4, r1, #4
 80038b2:	bfb8      	it	lt
 80038b4:	18e4      	addlt	r4, r4, r3
 80038b6:	f000 f8df 	bl	8003a78 <__malloc_lock>
 80038ba:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <_free_r+0x94>)
 80038bc:	9801      	ldr	r0, [sp, #4]
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	b933      	cbnz	r3, 80038d0 <_free_r+0x30>
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6014      	str	r4, [r2, #0]
 80038c6:	b003      	add	sp, #12
 80038c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038cc:	f000 b8da 	b.w	8003a84 <__malloc_unlock>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d908      	bls.n	80038e6 <_free_r+0x46>
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1949      	addeq	r1, r1, r5
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	e7ed      	b.n	80038c2 <_free_r+0x22>
 80038e6:	461a      	mov	r2, r3
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b10b      	cbz	r3, 80038f0 <_free_r+0x50>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d9fa      	bls.n	80038e6 <_free_r+0x46>
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	1855      	adds	r5, r2, r1
 80038f4:	42a5      	cmp	r5, r4
 80038f6:	d10b      	bne.n	8003910 <_free_r+0x70>
 80038f8:	6824      	ldr	r4, [r4, #0]
 80038fa:	4421      	add	r1, r4
 80038fc:	1854      	adds	r4, r2, r1
 80038fe:	42a3      	cmp	r3, r4
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	d1e0      	bne.n	80038c6 <_free_r+0x26>
 8003904:	681c      	ldr	r4, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	6053      	str	r3, [r2, #4]
 800390a:	440c      	add	r4, r1
 800390c:	6014      	str	r4, [r2, #0]
 800390e:	e7da      	b.n	80038c6 <_free_r+0x26>
 8003910:	d902      	bls.n	8003918 <_free_r+0x78>
 8003912:	230c      	movs	r3, #12
 8003914:	6003      	str	r3, [r0, #0]
 8003916:	e7d6      	b.n	80038c6 <_free_r+0x26>
 8003918:	6825      	ldr	r5, [r4, #0]
 800391a:	1961      	adds	r1, r4, r5
 800391c:	428b      	cmp	r3, r1
 800391e:	bf04      	itt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	6063      	str	r3, [r4, #4]
 8003926:	bf04      	itt	eq
 8003928:	1949      	addeq	r1, r1, r5
 800392a:	6021      	streq	r1, [r4, #0]
 800392c:	6054      	str	r4, [r2, #4]
 800392e:	e7ca      	b.n	80038c6 <_free_r+0x26>
 8003930:	b003      	add	sp, #12
 8003932:	bd30      	pop	{r4, r5, pc}
 8003934:	200002c4 	.word	0x200002c4

08003938 <sbrk_aligned>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4e0e      	ldr	r6, [pc, #56]	; (8003974 <sbrk_aligned+0x3c>)
 800393c:	460c      	mov	r4, r1
 800393e:	6831      	ldr	r1, [r6, #0]
 8003940:	4605      	mov	r5, r0
 8003942:	b911      	cbnz	r1, 800394a <sbrk_aligned+0x12>
 8003944:	f000 fcaa 	bl	800429c <_sbrk_r>
 8003948:	6030      	str	r0, [r6, #0]
 800394a:	4621      	mov	r1, r4
 800394c:	4628      	mov	r0, r5
 800394e:	f000 fca5 	bl	800429c <_sbrk_r>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	d00a      	beq.n	800396c <sbrk_aligned+0x34>
 8003956:	1cc4      	adds	r4, r0, #3
 8003958:	f024 0403 	bic.w	r4, r4, #3
 800395c:	42a0      	cmp	r0, r4
 800395e:	d007      	beq.n	8003970 <sbrk_aligned+0x38>
 8003960:	1a21      	subs	r1, r4, r0
 8003962:	4628      	mov	r0, r5
 8003964:	f000 fc9a 	bl	800429c <_sbrk_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d101      	bne.n	8003970 <sbrk_aligned+0x38>
 800396c:	f04f 34ff 	mov.w	r4, #4294967295
 8003970:	4620      	mov	r0, r4
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	200002c8 	.word	0x200002c8

08003978 <_malloc_r>:
 8003978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800397c:	1ccd      	adds	r5, r1, #3
 800397e:	f025 0503 	bic.w	r5, r5, #3
 8003982:	3508      	adds	r5, #8
 8003984:	2d0c      	cmp	r5, #12
 8003986:	bf38      	it	cc
 8003988:	250c      	movcc	r5, #12
 800398a:	2d00      	cmp	r5, #0
 800398c:	4607      	mov	r7, r0
 800398e:	db01      	blt.n	8003994 <_malloc_r+0x1c>
 8003990:	42a9      	cmp	r1, r5
 8003992:	d905      	bls.n	80039a0 <_malloc_r+0x28>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	2600      	movs	r6, #0
 800399a:	4630      	mov	r0, r6
 800399c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a74 <_malloc_r+0xfc>
 80039a4:	f000 f868 	bl	8003a78 <__malloc_lock>
 80039a8:	f8d8 3000 	ldr.w	r3, [r8]
 80039ac:	461c      	mov	r4, r3
 80039ae:	bb5c      	cbnz	r4, 8003a08 <_malloc_r+0x90>
 80039b0:	4629      	mov	r1, r5
 80039b2:	4638      	mov	r0, r7
 80039b4:	f7ff ffc0 	bl	8003938 <sbrk_aligned>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	4604      	mov	r4, r0
 80039bc:	d155      	bne.n	8003a6a <_malloc_r+0xf2>
 80039be:	f8d8 4000 	ldr.w	r4, [r8]
 80039c2:	4626      	mov	r6, r4
 80039c4:	2e00      	cmp	r6, #0
 80039c6:	d145      	bne.n	8003a54 <_malloc_r+0xdc>
 80039c8:	2c00      	cmp	r4, #0
 80039ca:	d048      	beq.n	8003a5e <_malloc_r+0xe6>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	4631      	mov	r1, r6
 80039d0:	4638      	mov	r0, r7
 80039d2:	eb04 0903 	add.w	r9, r4, r3
 80039d6:	f000 fc61 	bl	800429c <_sbrk_r>
 80039da:	4581      	cmp	r9, r0
 80039dc:	d13f      	bne.n	8003a5e <_malloc_r+0xe6>
 80039de:	6821      	ldr	r1, [r4, #0]
 80039e0:	1a6d      	subs	r5, r5, r1
 80039e2:	4629      	mov	r1, r5
 80039e4:	4638      	mov	r0, r7
 80039e6:	f7ff ffa7 	bl	8003938 <sbrk_aligned>
 80039ea:	3001      	adds	r0, #1
 80039ec:	d037      	beq.n	8003a5e <_malloc_r+0xe6>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	442b      	add	r3, r5
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	f8d8 3000 	ldr.w	r3, [r8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d038      	beq.n	8003a6e <_malloc_r+0xf6>
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	42a2      	cmp	r2, r4
 8003a00:	d12b      	bne.n	8003a5a <_malloc_r+0xe2>
 8003a02:	2200      	movs	r2, #0
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	e00f      	b.n	8003a28 <_malloc_r+0xb0>
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	1b52      	subs	r2, r2, r5
 8003a0c:	d41f      	bmi.n	8003a4e <_malloc_r+0xd6>
 8003a0e:	2a0b      	cmp	r2, #11
 8003a10:	d917      	bls.n	8003a42 <_malloc_r+0xca>
 8003a12:	1961      	adds	r1, r4, r5
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	6025      	str	r5, [r4, #0]
 8003a18:	bf18      	it	ne
 8003a1a:	6059      	strne	r1, [r3, #4]
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	bf08      	it	eq
 8003a20:	f8c8 1000 	streq.w	r1, [r8]
 8003a24:	5162      	str	r2, [r4, r5]
 8003a26:	604b      	str	r3, [r1, #4]
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f104 060b 	add.w	r6, r4, #11
 8003a2e:	f000 f829 	bl	8003a84 <__malloc_unlock>
 8003a32:	f026 0607 	bic.w	r6, r6, #7
 8003a36:	1d23      	adds	r3, r4, #4
 8003a38:	1af2      	subs	r2, r6, r3
 8003a3a:	d0ae      	beq.n	800399a <_malloc_r+0x22>
 8003a3c:	1b9b      	subs	r3, r3, r6
 8003a3e:	50a3      	str	r3, [r4, r2]
 8003a40:	e7ab      	b.n	800399a <_malloc_r+0x22>
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	6862      	ldr	r2, [r4, #4]
 8003a46:	d1dd      	bne.n	8003a04 <_malloc_r+0x8c>
 8003a48:	f8c8 2000 	str.w	r2, [r8]
 8003a4c:	e7ec      	b.n	8003a28 <_malloc_r+0xb0>
 8003a4e:	4623      	mov	r3, r4
 8003a50:	6864      	ldr	r4, [r4, #4]
 8003a52:	e7ac      	b.n	80039ae <_malloc_r+0x36>
 8003a54:	4634      	mov	r4, r6
 8003a56:	6876      	ldr	r6, [r6, #4]
 8003a58:	e7b4      	b.n	80039c4 <_malloc_r+0x4c>
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	e7cc      	b.n	80039f8 <_malloc_r+0x80>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4638      	mov	r0, r7
 8003a64:	f000 f80e 	bl	8003a84 <__malloc_unlock>
 8003a68:	e797      	b.n	800399a <_malloc_r+0x22>
 8003a6a:	6025      	str	r5, [r4, #0]
 8003a6c:	e7dc      	b.n	8003a28 <_malloc_r+0xb0>
 8003a6e:	605b      	str	r3, [r3, #4]
 8003a70:	deff      	udf	#255	; 0xff
 8003a72:	bf00      	nop
 8003a74:	200002c4 	.word	0x200002c4

08003a78 <__malloc_lock>:
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <__malloc_lock+0x8>)
 8003a7a:	f7ff bf0e 	b.w	800389a <__retarget_lock_acquire_recursive>
 8003a7e:	bf00      	nop
 8003a80:	200002c0 	.word	0x200002c0

08003a84 <__malloc_unlock>:
 8003a84:	4801      	ldr	r0, [pc, #4]	; (8003a8c <__malloc_unlock+0x8>)
 8003a86:	f7ff bf09 	b.w	800389c <__retarget_lock_release_recursive>
 8003a8a:	bf00      	nop
 8003a8c:	200002c0 	.word	0x200002c0

08003a90 <__sfputc_r>:
 8003a90:	6893      	ldr	r3, [r2, #8]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	b410      	push	{r4}
 8003a98:	6093      	str	r3, [r2, #8]
 8003a9a:	da08      	bge.n	8003aae <__sfputc_r+0x1e>
 8003a9c:	6994      	ldr	r4, [r2, #24]
 8003a9e:	42a3      	cmp	r3, r4
 8003aa0:	db01      	blt.n	8003aa6 <__sfputc_r+0x16>
 8003aa2:	290a      	cmp	r1, #10
 8003aa4:	d103      	bne.n	8003aae <__sfputc_r+0x1e>
 8003aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aaa:	f7ff bde8 	b.w	800367e <__swbuf_r>
 8003aae:	6813      	ldr	r3, [r2, #0]
 8003ab0:	1c58      	adds	r0, r3, #1
 8003ab2:	6010      	str	r0, [r2, #0]
 8003ab4:	7019      	strb	r1, [r3, #0]
 8003ab6:	4608      	mov	r0, r1
 8003ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <__sfputs_r>:
 8003abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	460f      	mov	r7, r1
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	18d5      	adds	r5, r2, r3
 8003ac8:	42ac      	cmp	r4, r5
 8003aca:	d101      	bne.n	8003ad0 <__sfputs_r+0x12>
 8003acc:	2000      	movs	r0, #0
 8003ace:	e007      	b.n	8003ae0 <__sfputs_r+0x22>
 8003ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad4:	463a      	mov	r2, r7
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f7ff ffda 	bl	8003a90 <__sfputc_r>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d1f3      	bne.n	8003ac8 <__sfputs_r+0xa>
 8003ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ae4 <_vfiprintf_r>:
 8003ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae8:	460d      	mov	r5, r1
 8003aea:	b09d      	sub	sp, #116	; 0x74
 8003aec:	4614      	mov	r4, r2
 8003aee:	4698      	mov	r8, r3
 8003af0:	4606      	mov	r6, r0
 8003af2:	b118      	cbz	r0, 8003afc <_vfiprintf_r+0x18>
 8003af4:	6a03      	ldr	r3, [r0, #32]
 8003af6:	b90b      	cbnz	r3, 8003afc <_vfiprintf_r+0x18>
 8003af8:	f7ff fcda 	bl	80034b0 <__sinit>
 8003afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003afe:	07d9      	lsls	r1, r3, #31
 8003b00:	d405      	bmi.n	8003b0e <_vfiprintf_r+0x2a>
 8003b02:	89ab      	ldrh	r3, [r5, #12]
 8003b04:	059a      	lsls	r2, r3, #22
 8003b06:	d402      	bmi.n	8003b0e <_vfiprintf_r+0x2a>
 8003b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b0a:	f7ff fec6 	bl	800389a <__retarget_lock_acquire_recursive>
 8003b0e:	89ab      	ldrh	r3, [r5, #12]
 8003b10:	071b      	lsls	r3, r3, #28
 8003b12:	d501      	bpl.n	8003b18 <_vfiprintf_r+0x34>
 8003b14:	692b      	ldr	r3, [r5, #16]
 8003b16:	b99b      	cbnz	r3, 8003b40 <_vfiprintf_r+0x5c>
 8003b18:	4629      	mov	r1, r5
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f7ff fdec 	bl	80036f8 <__swsetup_r>
 8003b20:	b170      	cbz	r0, 8003b40 <_vfiprintf_r+0x5c>
 8003b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b24:	07dc      	lsls	r4, r3, #31
 8003b26:	d504      	bpl.n	8003b32 <_vfiprintf_r+0x4e>
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	b01d      	add	sp, #116	; 0x74
 8003b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b32:	89ab      	ldrh	r3, [r5, #12]
 8003b34:	0598      	lsls	r0, r3, #22
 8003b36:	d4f7      	bmi.n	8003b28 <_vfiprintf_r+0x44>
 8003b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b3a:	f7ff feaf 	bl	800389c <__retarget_lock_release_recursive>
 8003b3e:	e7f3      	b.n	8003b28 <_vfiprintf_r+0x44>
 8003b40:	2300      	movs	r3, #0
 8003b42:	9309      	str	r3, [sp, #36]	; 0x24
 8003b44:	2320      	movs	r3, #32
 8003b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b4e:	2330      	movs	r3, #48	; 0x30
 8003b50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003d04 <_vfiprintf_r+0x220>
 8003b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b58:	f04f 0901 	mov.w	r9, #1
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	469a      	mov	sl, r3
 8003b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b64:	b10a      	cbz	r2, 8003b6a <_vfiprintf_r+0x86>
 8003b66:	2a25      	cmp	r2, #37	; 0x25
 8003b68:	d1f9      	bne.n	8003b5e <_vfiprintf_r+0x7a>
 8003b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8003b6e:	d00b      	beq.n	8003b88 <_vfiprintf_r+0xa4>
 8003b70:	465b      	mov	r3, fp
 8003b72:	4622      	mov	r2, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	4630      	mov	r0, r6
 8003b78:	f7ff ffa1 	bl	8003abe <__sfputs_r>
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	f000 80a9 	beq.w	8003cd4 <_vfiprintf_r+0x1f0>
 8003b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b84:	445a      	add	r2, fp
 8003b86:	9209      	str	r2, [sp, #36]	; 0x24
 8003b88:	f89a 3000 	ldrb.w	r3, [sl]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80a1 	beq.w	8003cd4 <_vfiprintf_r+0x1f0>
 8003b92:	2300      	movs	r3, #0
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b9c:	f10a 0a01 	add.w	sl, sl, #1
 8003ba0:	9304      	str	r3, [sp, #16]
 8003ba2:	9307      	str	r3, [sp, #28]
 8003ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8003baa:	4654      	mov	r4, sl
 8003bac:	2205      	movs	r2, #5
 8003bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb2:	4854      	ldr	r0, [pc, #336]	; (8003d04 <_vfiprintf_r+0x220>)
 8003bb4:	f7fc fb2c 	bl	8000210 <memchr>
 8003bb8:	9a04      	ldr	r2, [sp, #16]
 8003bba:	b9d8      	cbnz	r0, 8003bf4 <_vfiprintf_r+0x110>
 8003bbc:	06d1      	lsls	r1, r2, #27
 8003bbe:	bf44      	itt	mi
 8003bc0:	2320      	movmi	r3, #32
 8003bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc6:	0713      	lsls	r3, r2, #28
 8003bc8:	bf44      	itt	mi
 8003bca:	232b      	movmi	r3, #43	; 0x2b
 8003bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd6:	d015      	beq.n	8003c04 <_vfiprintf_r+0x120>
 8003bd8:	9a07      	ldr	r2, [sp, #28]
 8003bda:	4654      	mov	r4, sl
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f04f 0c0a 	mov.w	ip, #10
 8003be2:	4621      	mov	r1, r4
 8003be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003be8:	3b30      	subs	r3, #48	; 0x30
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	d94d      	bls.n	8003c8a <_vfiprintf_r+0x1a6>
 8003bee:	b1b0      	cbz	r0, 8003c1e <_vfiprintf_r+0x13a>
 8003bf0:	9207      	str	r2, [sp, #28]
 8003bf2:	e014      	b.n	8003c1e <_vfiprintf_r+0x13a>
 8003bf4:	eba0 0308 	sub.w	r3, r0, r8
 8003bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	46a2      	mov	sl, r4
 8003c02:	e7d2      	b.n	8003baa <_vfiprintf_r+0xc6>
 8003c04:	9b03      	ldr	r3, [sp, #12]
 8003c06:	1d19      	adds	r1, r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	9103      	str	r1, [sp, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bfbb      	ittet	lt
 8003c10:	425b      	neglt	r3, r3
 8003c12:	f042 0202 	orrlt.w	r2, r2, #2
 8003c16:	9307      	strge	r3, [sp, #28]
 8003c18:	9307      	strlt	r3, [sp, #28]
 8003c1a:	bfb8      	it	lt
 8003c1c:	9204      	strlt	r2, [sp, #16]
 8003c1e:	7823      	ldrb	r3, [r4, #0]
 8003c20:	2b2e      	cmp	r3, #46	; 0x2e
 8003c22:	d10c      	bne.n	8003c3e <_vfiprintf_r+0x15a>
 8003c24:	7863      	ldrb	r3, [r4, #1]
 8003c26:	2b2a      	cmp	r3, #42	; 0x2a
 8003c28:	d134      	bne.n	8003c94 <_vfiprintf_r+0x1b0>
 8003c2a:	9b03      	ldr	r3, [sp, #12]
 8003c2c:	1d1a      	adds	r2, r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	9203      	str	r2, [sp, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bfb8      	it	lt
 8003c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c3a:	3402      	adds	r4, #2
 8003c3c:	9305      	str	r3, [sp, #20]
 8003c3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003d14 <_vfiprintf_r+0x230>
 8003c42:	7821      	ldrb	r1, [r4, #0]
 8003c44:	2203      	movs	r2, #3
 8003c46:	4650      	mov	r0, sl
 8003c48:	f7fc fae2 	bl	8000210 <memchr>
 8003c4c:	b138      	cbz	r0, 8003c5e <_vfiprintf_r+0x17a>
 8003c4e:	9b04      	ldr	r3, [sp, #16]
 8003c50:	eba0 000a 	sub.w	r0, r0, sl
 8003c54:	2240      	movs	r2, #64	; 0x40
 8003c56:	4082      	lsls	r2, r0
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	3401      	adds	r4, #1
 8003c5c:	9304      	str	r3, [sp, #16]
 8003c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c62:	4829      	ldr	r0, [pc, #164]	; (8003d08 <_vfiprintf_r+0x224>)
 8003c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c68:	2206      	movs	r2, #6
 8003c6a:	f7fc fad1 	bl	8000210 <memchr>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d03f      	beq.n	8003cf2 <_vfiprintf_r+0x20e>
 8003c72:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <_vfiprintf_r+0x228>)
 8003c74:	bb1b      	cbnz	r3, 8003cbe <_vfiprintf_r+0x1da>
 8003c76:	9b03      	ldr	r3, [sp, #12]
 8003c78:	3307      	adds	r3, #7
 8003c7a:	f023 0307 	bic.w	r3, r3, #7
 8003c7e:	3308      	adds	r3, #8
 8003c80:	9303      	str	r3, [sp, #12]
 8003c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c84:	443b      	add	r3, r7
 8003c86:	9309      	str	r3, [sp, #36]	; 0x24
 8003c88:	e768      	b.n	8003b5c <_vfiprintf_r+0x78>
 8003c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c8e:	460c      	mov	r4, r1
 8003c90:	2001      	movs	r0, #1
 8003c92:	e7a6      	b.n	8003be2 <_vfiprintf_r+0xfe>
 8003c94:	2300      	movs	r3, #0
 8003c96:	3401      	adds	r4, #1
 8003c98:	9305      	str	r3, [sp, #20]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f04f 0c0a 	mov.w	ip, #10
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ca6:	3a30      	subs	r2, #48	; 0x30
 8003ca8:	2a09      	cmp	r2, #9
 8003caa:	d903      	bls.n	8003cb4 <_vfiprintf_r+0x1d0>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0c6      	beq.n	8003c3e <_vfiprintf_r+0x15a>
 8003cb0:	9105      	str	r1, [sp, #20]
 8003cb2:	e7c4      	b.n	8003c3e <_vfiprintf_r+0x15a>
 8003cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cb8:	4604      	mov	r4, r0
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e7f0      	b.n	8003ca0 <_vfiprintf_r+0x1bc>
 8003cbe:	ab03      	add	r3, sp, #12
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <_vfiprintf_r+0x22c>)
 8003cc6:	a904      	add	r1, sp, #16
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f3af 8000 	nop.w
 8003cce:	4607      	mov	r7, r0
 8003cd0:	1c78      	adds	r0, r7, #1
 8003cd2:	d1d6      	bne.n	8003c82 <_vfiprintf_r+0x19e>
 8003cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd6:	07d9      	lsls	r1, r3, #31
 8003cd8:	d405      	bmi.n	8003ce6 <_vfiprintf_r+0x202>
 8003cda:	89ab      	ldrh	r3, [r5, #12]
 8003cdc:	059a      	lsls	r2, r3, #22
 8003cde:	d402      	bmi.n	8003ce6 <_vfiprintf_r+0x202>
 8003ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ce2:	f7ff fddb 	bl	800389c <__retarget_lock_release_recursive>
 8003ce6:	89ab      	ldrh	r3, [r5, #12]
 8003ce8:	065b      	lsls	r3, r3, #25
 8003cea:	f53f af1d 	bmi.w	8003b28 <_vfiprintf_r+0x44>
 8003cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cf0:	e71c      	b.n	8003b2c <_vfiprintf_r+0x48>
 8003cf2:	ab03      	add	r3, sp, #12
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <_vfiprintf_r+0x22c>)
 8003cfa:	a904      	add	r1, sp, #16
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 f879 	bl	8003df4 <_printf_i>
 8003d02:	e7e4      	b.n	8003cce <_vfiprintf_r+0x1ea>
 8003d04:	080044a4 	.word	0x080044a4
 8003d08:	080044ae 	.word	0x080044ae
 8003d0c:	00000000 	.word	0x00000000
 8003d10:	08003abf 	.word	0x08003abf
 8003d14:	080044aa 	.word	0x080044aa

08003d18 <_printf_common>:
 8003d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1c:	4616      	mov	r6, r2
 8003d1e:	4699      	mov	r9, r3
 8003d20:	688a      	ldr	r2, [r1, #8]
 8003d22:	690b      	ldr	r3, [r1, #16]
 8003d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	bfb8      	it	lt
 8003d2c:	4613      	movlt	r3, r2
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d34:	4607      	mov	r7, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	b10a      	cbz	r2, 8003d3e <_printf_common+0x26>
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	6033      	str	r3, [r6, #0]
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	0699      	lsls	r1, r3, #26
 8003d42:	bf42      	ittt	mi
 8003d44:	6833      	ldrmi	r3, [r6, #0]
 8003d46:	3302      	addmi	r3, #2
 8003d48:	6033      	strmi	r3, [r6, #0]
 8003d4a:	6825      	ldr	r5, [r4, #0]
 8003d4c:	f015 0506 	ands.w	r5, r5, #6
 8003d50:	d106      	bne.n	8003d60 <_printf_common+0x48>
 8003d52:	f104 0a19 	add.w	sl, r4, #25
 8003d56:	68e3      	ldr	r3, [r4, #12]
 8003d58:	6832      	ldr	r2, [r6, #0]
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	dc26      	bgt.n	8003dae <_printf_common+0x96>
 8003d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d64:	1e13      	subs	r3, r2, #0
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	bf18      	it	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	0692      	lsls	r2, r2, #26
 8003d6e:	d42b      	bmi.n	8003dc8 <_printf_common+0xb0>
 8003d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d74:	4649      	mov	r1, r9
 8003d76:	4638      	mov	r0, r7
 8003d78:	47c0      	blx	r8
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d01e      	beq.n	8003dbc <_printf_common+0xa4>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	6922      	ldr	r2, [r4, #16]
 8003d82:	f003 0306 	and.w	r3, r3, #6
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	bf02      	ittt	eq
 8003d8a:	68e5      	ldreq	r5, [r4, #12]
 8003d8c:	6833      	ldreq	r3, [r6, #0]
 8003d8e:	1aed      	subeq	r5, r5, r3
 8003d90:	68a3      	ldr	r3, [r4, #8]
 8003d92:	bf0c      	ite	eq
 8003d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d98:	2500      	movne	r5, #0
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	bfc4      	itt	gt
 8003d9e:	1a9b      	subgt	r3, r3, r2
 8003da0:	18ed      	addgt	r5, r5, r3
 8003da2:	2600      	movs	r6, #0
 8003da4:	341a      	adds	r4, #26
 8003da6:	42b5      	cmp	r5, r6
 8003da8:	d11a      	bne.n	8003de0 <_printf_common+0xc8>
 8003daa:	2000      	movs	r0, #0
 8003dac:	e008      	b.n	8003dc0 <_printf_common+0xa8>
 8003dae:	2301      	movs	r3, #1
 8003db0:	4652      	mov	r2, sl
 8003db2:	4649      	mov	r1, r9
 8003db4:	4638      	mov	r0, r7
 8003db6:	47c0      	blx	r8
 8003db8:	3001      	adds	r0, #1
 8003dba:	d103      	bne.n	8003dc4 <_printf_common+0xac>
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	e7c6      	b.n	8003d56 <_printf_common+0x3e>
 8003dc8:	18e1      	adds	r1, r4, r3
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	2030      	movs	r0, #48	; 0x30
 8003dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dd2:	4422      	add	r2, r4
 8003dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ddc:	3302      	adds	r3, #2
 8003dde:	e7c7      	b.n	8003d70 <_printf_common+0x58>
 8003de0:	2301      	movs	r3, #1
 8003de2:	4622      	mov	r2, r4
 8003de4:	4649      	mov	r1, r9
 8003de6:	4638      	mov	r0, r7
 8003de8:	47c0      	blx	r8
 8003dea:	3001      	adds	r0, #1
 8003dec:	d0e6      	beq.n	8003dbc <_printf_common+0xa4>
 8003dee:	3601      	adds	r6, #1
 8003df0:	e7d9      	b.n	8003da6 <_printf_common+0x8e>
	...

08003df4 <_printf_i>:
 8003df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	7e0f      	ldrb	r7, [r1, #24]
 8003dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dfc:	2f78      	cmp	r7, #120	; 0x78
 8003dfe:	4691      	mov	r9, r2
 8003e00:	4680      	mov	r8, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	469a      	mov	sl, r3
 8003e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e0a:	d807      	bhi.n	8003e1c <_printf_i+0x28>
 8003e0c:	2f62      	cmp	r7, #98	; 0x62
 8003e0e:	d80a      	bhi.n	8003e26 <_printf_i+0x32>
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	f000 80d4 	beq.w	8003fbe <_printf_i+0x1ca>
 8003e16:	2f58      	cmp	r7, #88	; 0x58
 8003e18:	f000 80c0 	beq.w	8003f9c <_printf_i+0x1a8>
 8003e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e24:	e03a      	b.n	8003e9c <_printf_i+0xa8>
 8003e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e2a:	2b15      	cmp	r3, #21
 8003e2c:	d8f6      	bhi.n	8003e1c <_printf_i+0x28>
 8003e2e:	a101      	add	r1, pc, #4	; (adr r1, 8003e34 <_printf_i+0x40>)
 8003e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003e1d 	.word	0x08003e1d
 8003e40:	08003e1d 	.word	0x08003e1d
 8003e44:	08003e1d 	.word	0x08003e1d
 8003e48:	08003e1d 	.word	0x08003e1d
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003e1d 	.word	0x08003e1d
 8003e54:	08003e1d 	.word	0x08003e1d
 8003e58:	08003e1d 	.word	0x08003e1d
 8003e5c:	08003e1d 	.word	0x08003e1d
 8003e60:	08003fa5 	.word	0x08003fa5
 8003e64:	08003ecd 	.word	0x08003ecd
 8003e68:	08003f5f 	.word	0x08003f5f
 8003e6c:	08003e1d 	.word	0x08003e1d
 8003e70:	08003e1d 	.word	0x08003e1d
 8003e74:	08003fc7 	.word	0x08003fc7
 8003e78:	08003e1d 	.word	0x08003e1d
 8003e7c:	08003ecd 	.word	0x08003ecd
 8003e80:	08003e1d 	.word	0x08003e1d
 8003e84:	08003e1d 	.word	0x08003e1d
 8003e88:	08003f67 	.word	0x08003f67
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	602a      	str	r2, [r5, #0]
 8003e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e09f      	b.n	8003fe0 <_printf_i+0x1ec>
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	0607      	lsls	r7, r0, #24
 8003ea6:	f103 0104 	add.w	r1, r3, #4
 8003eaa:	6029      	str	r1, [r5, #0]
 8003eac:	d501      	bpl.n	8003eb2 <_printf_i+0xbe>
 8003eae:	681e      	ldr	r6, [r3, #0]
 8003eb0:	e003      	b.n	8003eba <_printf_i+0xc6>
 8003eb2:	0646      	lsls	r6, r0, #25
 8003eb4:	d5fb      	bpl.n	8003eae <_printf_i+0xba>
 8003eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003eba:	2e00      	cmp	r6, #0
 8003ebc:	da03      	bge.n	8003ec6 <_printf_i+0xd2>
 8003ebe:	232d      	movs	r3, #45	; 0x2d
 8003ec0:	4276      	negs	r6, r6
 8003ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ec6:	485a      	ldr	r0, [pc, #360]	; (8004030 <_printf_i+0x23c>)
 8003ec8:	230a      	movs	r3, #10
 8003eca:	e012      	b.n	8003ef2 <_printf_i+0xfe>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	1d19      	adds	r1, r3, #4
 8003ed2:	6029      	str	r1, [r5, #0]
 8003ed4:	0605      	lsls	r5, r0, #24
 8003ed6:	d501      	bpl.n	8003edc <_printf_i+0xe8>
 8003ed8:	681e      	ldr	r6, [r3, #0]
 8003eda:	e002      	b.n	8003ee2 <_printf_i+0xee>
 8003edc:	0641      	lsls	r1, r0, #25
 8003ede:	d5fb      	bpl.n	8003ed8 <_printf_i+0xe4>
 8003ee0:	881e      	ldrh	r6, [r3, #0]
 8003ee2:	4853      	ldr	r0, [pc, #332]	; (8004030 <_printf_i+0x23c>)
 8003ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2308      	moveq	r3, #8
 8003eea:	230a      	movne	r3, #10
 8003eec:	2100      	movs	r1, #0
 8003eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ef2:	6865      	ldr	r5, [r4, #4]
 8003ef4:	60a5      	str	r5, [r4, #8]
 8003ef6:	2d00      	cmp	r5, #0
 8003ef8:	bfa2      	ittt	ge
 8003efa:	6821      	ldrge	r1, [r4, #0]
 8003efc:	f021 0104 	bicge.w	r1, r1, #4
 8003f00:	6021      	strge	r1, [r4, #0]
 8003f02:	b90e      	cbnz	r6, 8003f08 <_printf_i+0x114>
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	d04b      	beq.n	8003fa0 <_printf_i+0x1ac>
 8003f08:	4615      	mov	r5, r2
 8003f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8003f12:	5dc7      	ldrb	r7, [r0, r7]
 8003f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f18:	4637      	mov	r7, r6
 8003f1a:	42bb      	cmp	r3, r7
 8003f1c:	460e      	mov	r6, r1
 8003f1e:	d9f4      	bls.n	8003f0a <_printf_i+0x116>
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d10b      	bne.n	8003f3c <_printf_i+0x148>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	07de      	lsls	r6, r3, #31
 8003f28:	d508      	bpl.n	8003f3c <_printf_i+0x148>
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	6861      	ldr	r1, [r4, #4]
 8003f2e:	4299      	cmp	r1, r3
 8003f30:	bfde      	ittt	le
 8003f32:	2330      	movle	r3, #48	; 0x30
 8003f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f3c:	1b52      	subs	r2, r2, r5
 8003f3e:	6122      	str	r2, [r4, #16]
 8003f40:	f8cd a000 	str.w	sl, [sp]
 8003f44:	464b      	mov	r3, r9
 8003f46:	aa03      	add	r2, sp, #12
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	f7ff fee4 	bl	8003d18 <_printf_common>
 8003f50:	3001      	adds	r0, #1
 8003f52:	d14a      	bne.n	8003fea <_printf_i+0x1f6>
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	b004      	add	sp, #16
 8003f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	f043 0320 	orr.w	r3, r3, #32
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	4833      	ldr	r0, [pc, #204]	; (8004034 <_printf_i+0x240>)
 8003f68:	2778      	movs	r7, #120	; 0x78
 8003f6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	6829      	ldr	r1, [r5, #0]
 8003f72:	061f      	lsls	r7, r3, #24
 8003f74:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f78:	d402      	bmi.n	8003f80 <_printf_i+0x18c>
 8003f7a:	065f      	lsls	r7, r3, #25
 8003f7c:	bf48      	it	mi
 8003f7e:	b2b6      	uxthmi	r6, r6
 8003f80:	07df      	lsls	r7, r3, #31
 8003f82:	bf48      	it	mi
 8003f84:	f043 0320 	orrmi.w	r3, r3, #32
 8003f88:	6029      	str	r1, [r5, #0]
 8003f8a:	bf48      	it	mi
 8003f8c:	6023      	strmi	r3, [r4, #0]
 8003f8e:	b91e      	cbnz	r6, 8003f98 <_printf_i+0x1a4>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f023 0320 	bic.w	r3, r3, #32
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	2310      	movs	r3, #16
 8003f9a:	e7a7      	b.n	8003eec <_printf_i+0xf8>
 8003f9c:	4824      	ldr	r0, [pc, #144]	; (8004030 <_printf_i+0x23c>)
 8003f9e:	e7e4      	b.n	8003f6a <_printf_i+0x176>
 8003fa0:	4615      	mov	r5, r2
 8003fa2:	e7bd      	b.n	8003f20 <_printf_i+0x12c>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	6826      	ldr	r6, [r4, #0]
 8003fa8:	6961      	ldr	r1, [r4, #20]
 8003faa:	1d18      	adds	r0, r3, #4
 8003fac:	6028      	str	r0, [r5, #0]
 8003fae:	0635      	lsls	r5, r6, #24
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	d501      	bpl.n	8003fb8 <_printf_i+0x1c4>
 8003fb4:	6019      	str	r1, [r3, #0]
 8003fb6:	e002      	b.n	8003fbe <_printf_i+0x1ca>
 8003fb8:	0670      	lsls	r0, r6, #25
 8003fba:	d5fb      	bpl.n	8003fb4 <_printf_i+0x1c0>
 8003fbc:	8019      	strh	r1, [r3, #0]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	4615      	mov	r5, r2
 8003fc4:	e7bc      	b.n	8003f40 <_printf_i+0x14c>
 8003fc6:	682b      	ldr	r3, [r5, #0]
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	602a      	str	r2, [r5, #0]
 8003fcc:	681d      	ldr	r5, [r3, #0]
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f7fc f91c 	bl	8000210 <memchr>
 8003fd8:	b108      	cbz	r0, 8003fde <_printf_i+0x1ea>
 8003fda:	1b40      	subs	r0, r0, r5
 8003fdc:	6060      	str	r0, [r4, #4]
 8003fde:	6863      	ldr	r3, [r4, #4]
 8003fe0:	6123      	str	r3, [r4, #16]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe8:	e7aa      	b.n	8003f40 <_printf_i+0x14c>
 8003fea:	6923      	ldr	r3, [r4, #16]
 8003fec:	462a      	mov	r2, r5
 8003fee:	4649      	mov	r1, r9
 8003ff0:	4640      	mov	r0, r8
 8003ff2:	47d0      	blx	sl
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d0ad      	beq.n	8003f54 <_printf_i+0x160>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	079b      	lsls	r3, r3, #30
 8003ffc:	d413      	bmi.n	8004026 <_printf_i+0x232>
 8003ffe:	68e0      	ldr	r0, [r4, #12]
 8004000:	9b03      	ldr	r3, [sp, #12]
 8004002:	4298      	cmp	r0, r3
 8004004:	bfb8      	it	lt
 8004006:	4618      	movlt	r0, r3
 8004008:	e7a6      	b.n	8003f58 <_printf_i+0x164>
 800400a:	2301      	movs	r3, #1
 800400c:	4632      	mov	r2, r6
 800400e:	4649      	mov	r1, r9
 8004010:	4640      	mov	r0, r8
 8004012:	47d0      	blx	sl
 8004014:	3001      	adds	r0, #1
 8004016:	d09d      	beq.n	8003f54 <_printf_i+0x160>
 8004018:	3501      	adds	r5, #1
 800401a:	68e3      	ldr	r3, [r4, #12]
 800401c:	9903      	ldr	r1, [sp, #12]
 800401e:	1a5b      	subs	r3, r3, r1
 8004020:	42ab      	cmp	r3, r5
 8004022:	dcf2      	bgt.n	800400a <_printf_i+0x216>
 8004024:	e7eb      	b.n	8003ffe <_printf_i+0x20a>
 8004026:	2500      	movs	r5, #0
 8004028:	f104 0619 	add.w	r6, r4, #25
 800402c:	e7f5      	b.n	800401a <_printf_i+0x226>
 800402e:	bf00      	nop
 8004030:	080044b5 	.word	0x080044b5
 8004034:	080044c6 	.word	0x080044c6

08004038 <__sflush_r>:
 8004038:	898a      	ldrh	r2, [r1, #12]
 800403a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	4605      	mov	r5, r0
 8004040:	0710      	lsls	r0, r2, #28
 8004042:	460c      	mov	r4, r1
 8004044:	d458      	bmi.n	80040f8 <__sflush_r+0xc0>
 8004046:	684b      	ldr	r3, [r1, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	dc05      	bgt.n	8004058 <__sflush_r+0x20>
 800404c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	dc02      	bgt.n	8004058 <__sflush_r+0x20>
 8004052:	2000      	movs	r0, #0
 8004054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800405a:	2e00      	cmp	r6, #0
 800405c:	d0f9      	beq.n	8004052 <__sflush_r+0x1a>
 800405e:	2300      	movs	r3, #0
 8004060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004064:	682f      	ldr	r7, [r5, #0]
 8004066:	6a21      	ldr	r1, [r4, #32]
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	d032      	beq.n	80040d2 <__sflush_r+0x9a>
 800406c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800406e:	89a3      	ldrh	r3, [r4, #12]
 8004070:	075a      	lsls	r2, r3, #29
 8004072:	d505      	bpl.n	8004080 <__sflush_r+0x48>
 8004074:	6863      	ldr	r3, [r4, #4]
 8004076:	1ac0      	subs	r0, r0, r3
 8004078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800407a:	b10b      	cbz	r3, 8004080 <__sflush_r+0x48>
 800407c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800407e:	1ac0      	subs	r0, r0, r3
 8004080:	2300      	movs	r3, #0
 8004082:	4602      	mov	r2, r0
 8004084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004086:	6a21      	ldr	r1, [r4, #32]
 8004088:	4628      	mov	r0, r5
 800408a:	47b0      	blx	r6
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	d106      	bne.n	80040a0 <__sflush_r+0x68>
 8004092:	6829      	ldr	r1, [r5, #0]
 8004094:	291d      	cmp	r1, #29
 8004096:	d82b      	bhi.n	80040f0 <__sflush_r+0xb8>
 8004098:	4a29      	ldr	r2, [pc, #164]	; (8004140 <__sflush_r+0x108>)
 800409a:	410a      	asrs	r2, r1
 800409c:	07d6      	lsls	r6, r2, #31
 800409e:	d427      	bmi.n	80040f0 <__sflush_r+0xb8>
 80040a0:	2200      	movs	r2, #0
 80040a2:	6062      	str	r2, [r4, #4]
 80040a4:	04d9      	lsls	r1, r3, #19
 80040a6:	6922      	ldr	r2, [r4, #16]
 80040a8:	6022      	str	r2, [r4, #0]
 80040aa:	d504      	bpl.n	80040b6 <__sflush_r+0x7e>
 80040ac:	1c42      	adds	r2, r0, #1
 80040ae:	d101      	bne.n	80040b4 <__sflush_r+0x7c>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b903      	cbnz	r3, 80040b6 <__sflush_r+0x7e>
 80040b4:	6560      	str	r0, [r4, #84]	; 0x54
 80040b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040b8:	602f      	str	r7, [r5, #0]
 80040ba:	2900      	cmp	r1, #0
 80040bc:	d0c9      	beq.n	8004052 <__sflush_r+0x1a>
 80040be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040c2:	4299      	cmp	r1, r3
 80040c4:	d002      	beq.n	80040cc <__sflush_r+0x94>
 80040c6:	4628      	mov	r0, r5
 80040c8:	f7ff fbea 	bl	80038a0 <_free_r>
 80040cc:	2000      	movs	r0, #0
 80040ce:	6360      	str	r0, [r4, #52]	; 0x34
 80040d0:	e7c0      	b.n	8004054 <__sflush_r+0x1c>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b0      	blx	r6
 80040d8:	1c41      	adds	r1, r0, #1
 80040da:	d1c8      	bne.n	800406e <__sflush_r+0x36>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0c5      	beq.n	800406e <__sflush_r+0x36>
 80040e2:	2b1d      	cmp	r3, #29
 80040e4:	d001      	beq.n	80040ea <__sflush_r+0xb2>
 80040e6:	2b16      	cmp	r3, #22
 80040e8:	d101      	bne.n	80040ee <__sflush_r+0xb6>
 80040ea:	602f      	str	r7, [r5, #0]
 80040ec:	e7b1      	b.n	8004052 <__sflush_r+0x1a>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	e7ad      	b.n	8004054 <__sflush_r+0x1c>
 80040f8:	690f      	ldr	r7, [r1, #16]
 80040fa:	2f00      	cmp	r7, #0
 80040fc:	d0a9      	beq.n	8004052 <__sflush_r+0x1a>
 80040fe:	0793      	lsls	r3, r2, #30
 8004100:	680e      	ldr	r6, [r1, #0]
 8004102:	bf08      	it	eq
 8004104:	694b      	ldreq	r3, [r1, #20]
 8004106:	600f      	str	r7, [r1, #0]
 8004108:	bf18      	it	ne
 800410a:	2300      	movne	r3, #0
 800410c:	eba6 0807 	sub.w	r8, r6, r7
 8004110:	608b      	str	r3, [r1, #8]
 8004112:	f1b8 0f00 	cmp.w	r8, #0
 8004116:	dd9c      	ble.n	8004052 <__sflush_r+0x1a>
 8004118:	6a21      	ldr	r1, [r4, #32]
 800411a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800411c:	4643      	mov	r3, r8
 800411e:	463a      	mov	r2, r7
 8004120:	4628      	mov	r0, r5
 8004122:	47b0      	blx	r6
 8004124:	2800      	cmp	r0, #0
 8004126:	dc06      	bgt.n	8004136 <__sflush_r+0xfe>
 8004128:	89a3      	ldrh	r3, [r4, #12]
 800412a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	e78e      	b.n	8004054 <__sflush_r+0x1c>
 8004136:	4407      	add	r7, r0
 8004138:	eba8 0800 	sub.w	r8, r8, r0
 800413c:	e7e9      	b.n	8004112 <__sflush_r+0xda>
 800413e:	bf00      	nop
 8004140:	dfbffffe 	.word	0xdfbffffe

08004144 <_fflush_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	690b      	ldr	r3, [r1, #16]
 8004148:	4605      	mov	r5, r0
 800414a:	460c      	mov	r4, r1
 800414c:	b913      	cbnz	r3, 8004154 <_fflush_r+0x10>
 800414e:	2500      	movs	r5, #0
 8004150:	4628      	mov	r0, r5
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	b118      	cbz	r0, 800415e <_fflush_r+0x1a>
 8004156:	6a03      	ldr	r3, [r0, #32]
 8004158:	b90b      	cbnz	r3, 800415e <_fflush_r+0x1a>
 800415a:	f7ff f9a9 	bl	80034b0 <__sinit>
 800415e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f3      	beq.n	800414e <_fflush_r+0xa>
 8004166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004168:	07d0      	lsls	r0, r2, #31
 800416a:	d404      	bmi.n	8004176 <_fflush_r+0x32>
 800416c:	0599      	lsls	r1, r3, #22
 800416e:	d402      	bmi.n	8004176 <_fflush_r+0x32>
 8004170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004172:	f7ff fb92 	bl	800389a <__retarget_lock_acquire_recursive>
 8004176:	4628      	mov	r0, r5
 8004178:	4621      	mov	r1, r4
 800417a:	f7ff ff5d 	bl	8004038 <__sflush_r>
 800417e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004180:	07da      	lsls	r2, r3, #31
 8004182:	4605      	mov	r5, r0
 8004184:	d4e4      	bmi.n	8004150 <_fflush_r+0xc>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	059b      	lsls	r3, r3, #22
 800418a:	d4e1      	bmi.n	8004150 <_fflush_r+0xc>
 800418c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800418e:	f7ff fb85 	bl	800389c <__retarget_lock_release_recursive>
 8004192:	e7dd      	b.n	8004150 <_fflush_r+0xc>

08004194 <__swhatbuf_r>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	460c      	mov	r4, r1
 8004198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419c:	2900      	cmp	r1, #0
 800419e:	b096      	sub	sp, #88	; 0x58
 80041a0:	4615      	mov	r5, r2
 80041a2:	461e      	mov	r6, r3
 80041a4:	da0d      	bge.n	80041c2 <__swhatbuf_r+0x2e>
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	bf0c      	ite	eq
 80041b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80041b6:	2340      	movne	r3, #64	; 0x40
 80041b8:	2000      	movs	r0, #0
 80041ba:	6031      	str	r1, [r6, #0]
 80041bc:	602b      	str	r3, [r5, #0]
 80041be:	b016      	add	sp, #88	; 0x58
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	466a      	mov	r2, sp
 80041c4:	f000 f848 	bl	8004258 <_fstat_r>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	dbec      	blt.n	80041a6 <__swhatbuf_r+0x12>
 80041cc:	9901      	ldr	r1, [sp, #4]
 80041ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80041d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80041d6:	4259      	negs	r1, r3
 80041d8:	4159      	adcs	r1, r3
 80041da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041de:	e7eb      	b.n	80041b8 <__swhatbuf_r+0x24>

080041e0 <__smakebuf_r>:
 80041e0:	898b      	ldrh	r3, [r1, #12]
 80041e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041e4:	079d      	lsls	r5, r3, #30
 80041e6:	4606      	mov	r6, r0
 80041e8:	460c      	mov	r4, r1
 80041ea:	d507      	bpl.n	80041fc <__smakebuf_r+0x1c>
 80041ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	6123      	str	r3, [r4, #16]
 80041f4:	2301      	movs	r3, #1
 80041f6:	6163      	str	r3, [r4, #20]
 80041f8:	b002      	add	sp, #8
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	ab01      	add	r3, sp, #4
 80041fe:	466a      	mov	r2, sp
 8004200:	f7ff ffc8 	bl	8004194 <__swhatbuf_r>
 8004204:	9900      	ldr	r1, [sp, #0]
 8004206:	4605      	mov	r5, r0
 8004208:	4630      	mov	r0, r6
 800420a:	f7ff fbb5 	bl	8003978 <_malloc_r>
 800420e:	b948      	cbnz	r0, 8004224 <__smakebuf_r+0x44>
 8004210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004214:	059a      	lsls	r2, r3, #22
 8004216:	d4ef      	bmi.n	80041f8 <__smakebuf_r+0x18>
 8004218:	f023 0303 	bic.w	r3, r3, #3
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	e7e3      	b.n	80041ec <__smakebuf_r+0xc>
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	6020      	str	r0, [r4, #0]
 8004228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	9b00      	ldr	r3, [sp, #0]
 8004230:	6163      	str	r3, [r4, #20]
 8004232:	9b01      	ldr	r3, [sp, #4]
 8004234:	6120      	str	r0, [r4, #16]
 8004236:	b15b      	cbz	r3, 8004250 <__smakebuf_r+0x70>
 8004238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800423c:	4630      	mov	r0, r6
 800423e:	f000 f81d 	bl	800427c <_isatty_r>
 8004242:	b128      	cbz	r0, 8004250 <__smakebuf_r+0x70>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	81a3      	strh	r3, [r4, #12]
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	431d      	orrs	r5, r3
 8004254:	81a5      	strh	r5, [r4, #12]
 8004256:	e7cf      	b.n	80041f8 <__smakebuf_r+0x18>

08004258 <_fstat_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d07      	ldr	r5, [pc, #28]	; (8004278 <_fstat_r+0x20>)
 800425c:	2300      	movs	r3, #0
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	f7fc fe64 	bl	8000f32 <_fstat>
 800426a:	1c43      	adds	r3, r0, #1
 800426c:	d102      	bne.n	8004274 <_fstat_r+0x1c>
 800426e:	682b      	ldr	r3, [r5, #0]
 8004270:	b103      	cbz	r3, 8004274 <_fstat_r+0x1c>
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	bd38      	pop	{r3, r4, r5, pc}
 8004276:	bf00      	nop
 8004278:	200002bc 	.word	0x200002bc

0800427c <_isatty_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4d06      	ldr	r5, [pc, #24]	; (8004298 <_isatty_r+0x1c>)
 8004280:	2300      	movs	r3, #0
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fc fe63 	bl	8000f52 <_isatty>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_isatty_r+0x1a>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_isatty_r+0x1a>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	200002bc 	.word	0x200002bc

0800429c <_sbrk_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4d06      	ldr	r5, [pc, #24]	; (80042b8 <_sbrk_r+0x1c>)
 80042a0:	2300      	movs	r3, #0
 80042a2:	4604      	mov	r4, r0
 80042a4:	4608      	mov	r0, r1
 80042a6:	602b      	str	r3, [r5, #0]
 80042a8:	f7fc fe6c 	bl	8000f84 <_sbrk>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d102      	bne.n	80042b6 <_sbrk_r+0x1a>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	b103      	cbz	r3, 80042b6 <_sbrk_r+0x1a>
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	200002bc 	.word	0x200002bc

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
